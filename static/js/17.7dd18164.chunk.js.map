{"version":3,"sources":["hooks/useWeb3.ts","hooks/chainHelpers.ts","hooks/price.ts","hooks/usePersistState.ts","utils/refHelpers.ts","utils/latinise.ts","state/block/hooks.ts","components/SearchInput/SearchInput.tsx","views/Gamefi/components/ToggleView/ToggleView.tsx","views/Gamefi/components/Banner/styled.tsx","views/Gamefi/components/Banner/index.tsx","views/Gamefi/components/TabButton/index.tsx","views/Gamefi/components/NotAvailable.tsx","views/Gamefi/styled.ts","views/Gamefi/components/Cards/styled.tsx","views/Gamefi/components/Cards/Farm.tsx","views/Gamefi/components/Cards/Pool.tsx","views/Gamefi/components/Select/index.tsx","views/Gamefi/Gamefi.tsx"],"names":["useWeb3","library","useWeb3React","refEth","useRef","useState","Web3","web3NoAccount","web3","setweb3","useEffect","current","useChainFinder","chainId","usePoolPrice","stakingTokenAddress","rewardTokenAddress","isFetchData","chainName","MoralisWeb3Api","useMoralisWeb3Api","_stakingTokenAddress","_rewardTokenAddress","stakingPrice","setStakingPrice","rewardPrice","setRewardPrice","utils","toChecksumAddress","console","error","a","token","getTokenPrice","chain","address","result","_stakingTokenPrice","usdPrice","_rewardTokenPrice","fetchData","useFarmPrice","farm","LPPrice","setLPPrice","_token1Address","_token2Address","_lpAddress","lpTotalSupply","getBalanceNumber","BigNumber","totalDeposits","token1Address","token2Address","pairToken","quoteToken","lpAddress","lpAddresses","findPrice","tokenAddress","price","_token1Price","_token2Price","res","account","getTokenBalances","token_addresses","Promise","all","data","token_address","toLowerCase","_totalToken1InPool","balance","Number","decimals","_totalToken2InPool","defaultOptions","hydrate","identity","dehydrate","usePersistState","initialValue","userOptions","localStorageKey","valueFromLS","localStorage","getItem","JSON","parse","value","setValue","setItem","stringify","usePrevious","ref","React","Latinise","latin_map","τ","Τ","latinise","input","replace","x","useBlock","useSelector","state","block","StyledInput","styled","Input","theme","colors","MGG_container","InputWrapper","div","mediaQueries","sm","Container","SearchInput","onChangeCallback","onChange","placeholder","toggled","setToggled","searchText","setSearchText","t","useTranslation","debouncedOnChange","useMemo","debounce","e","target","onBlur","ViewMode","IconButton","active","primary","MGG_active","src","LogoContainer","MGGLogo","img","Banner","alt","FarmTabButtons","activeIndex","tabState","tabAction","useRouteMatch","url","Wrapper","ButtonMenu","onClick","Button","StyledNotFound","NotAvailable","title","width","style","marginBottom","mb","ToggleWrapper","FilterItem","isGrid","Flex","Section","HeaderSection","BodySection","StakeSection","FilterButton","MGG_mainBG","Layout","md","Cards2","button","bgColor","Card2Container","TokenLogo","size","Badge","type","getImageUrlFromToken","getAddress","symbol","tokens","wbnb","iconExtension","FarmCard2","userDataReady","isNew","removed","cakePrice","setFetchData","toString","MAINNET_CHAIN_ID","prevLPPrice","prevRewardPrice","setTimeout","farmV2Apr","getFarmV2Apr","rewardRate","apr","toFixed","height","UIProps","className","cursor","to","pid","flexFlow","columnGap","justifyContent","color","alignItems","lpSymbol","name","textAlign","remainingDays","PoolCard2","pool","stakingToken","sousId","earningToken","userData","isFinished","isComingSoon","startBlock","endBlock","poolCategory","totalStaked","stakingTokenPrice","rewardPerBlock","tokenPerBlock","temp","times","stakedBalance","currentBlock","contractAddress","getPoolBlockInfo","blocksRemaining","shouldShowBlockCountdown","blocksUntilStart","hasPoolStarted","blocksToDisplay","stakingTokenBalance","BIG_ZERO","poolApr","PoolCategory","BINANCE","getPoolApr","FIXEDAPR","formatNumber","items","SelectComponent","handleSortBy","sortBy","useContext","ThemeContext","FormControl","sx","m","minWidth","border","backgroundColor","borderRadius","InputLabel","id","Select","labelId","label","event","textSubtle","MenuItem","map","item","Gamefi","query","setQuery","pathname","path","useLocation","setSortBy","isLiveVaults","setLiveVaults","TABLE","useFarms","farmsLP","poolsWithoutAutoVault","userDataLoaded","usePools","pools","usePriceCakeBusd","isArchived","includes","isActive","useCakeVault","userShares","cakeAtLastUserAction","accountHasVaultShares","fees","performanceFee","pricePerFullShare","totalCakeInVault","gt","usePollFarmsData","useFetchCakeVault","useFetchPublicPoolsData","stakedOnly","setStakedOnly","mggFarms","filter","hasEnded","isMain","isArchivedPid","activeFarms","inactiveFarms","archivedFarms","stakedOnlyFarms","isGreaterThan","stakedInactiveFarms","farmsList","useCallback","farmsToDisplay","farmsToDisplayWithAPR","lpTotalInQuoteToken","busdPrice","totalLiquidity","getFarmApr","poolWeight","liquidity","lowercaseQuery","mggList","fixedAprsOnly","cakePool","isAutoVault","partition","finishedPools","openPools","stakedOnlyFinishedPools","stakedOnlyOpenPools","stakedMemoized","stakingList","activePools","inactivePools","mggPools","renderContent","RENDER_TYPE","marginTop","paddingTop","display","rowGap","length","Grid","container","spacing","xs","Farm","Pool","render","TabButton","checked","scale","marginLeft","textTransform"],"mappings":"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","file":"static/js/17.7dd18164.chunk.js","sourcesContent":["import { useEffect, useState, useRef } from 'react'\nimport Web3 from 'web3'\nimport { useWeb3React } from '@web3-react/core'\nimport web3NoAccount from 'utils/web3'\n\n/**\n * Provides a web3 instance using the provider provided by useWallet\n * with a fallback of an httpProver\n * Recreate web3 instance only if the provider change\n */\nconst useWeb3 = () => {\n  const { library } = useWeb3React()\n  const refEth = useRef(library)\n  const [web3, setweb3] = useState(library ? new Web3(library) : web3NoAccount)\n\n  useEffect(() => {\n    if (library !== refEth.current) {\n      setweb3(library ? new Web3(library) : web3NoAccount)\n      refEth.current = library\n    }\n  }, [library])\n\n  return web3\n}\n\nexport default useWeb3\n","const useChainFinder = (chainId: number) => {\n  switch (chainId) {\n    case 1:\n      return 'eth'\n    case 3:\n      return 'ropsten'\n    case 56:\n      return 'bsc'\n    case 97:\n      return 'bsc testnet'\n    default:\n      return 'bsc'\n  }\n}\n\nexport default useChainFinder\n","import { useEffect, useState } from 'react'\nimport { SPARKSWAP_API, API_ASSETS, API_SUMMARY, API_LIQUIDITY, API_LASTPRICE, API_DATA } from 'config'\nimport useWeb3 from 'hooks/useWeb3'\nimport BigNumber from 'bignumber.js/bignumber'\nimport { getBalanceNumber } from 'utils/formatBalance'\nimport { useMoralisWeb3Api } from 'react-moralis'\nimport { useWeb3React } from '@web3-react/core'\nimport useChainFinder from './chainHelpers'\n\nexport const useTokenPrice = (tokenAddress: string) => {\n  const MoralisWeb3Api = useMoralisWeb3Api()\n  const { chainId } = useWeb3React()\n\n  const chainName = useChainFinder(chainId)\n\n  const [tokenPrice, setTokenPrice] = useState(0)\n  const web3 = useWeb3()\n\n  let _tokenAddress\n  try {\n    if (tokenAddress === undefined) throw new Error('Token address undefined')\n    _tokenAddress = web3.utils.toChecksumAddress(tokenAddress)\n  } catch {\n    console.error('Invalid staking and reward address')\n  }\n\n  useEffect(() => {\n    const fetchData = async () => {\n      try {\n        const result = await MoralisWeb3Api.token.getTokenPrice({ chain: chainName, address: _tokenAddress })\n        const _tokenPrice = result.usdPrice\n\n        setTokenPrice(_tokenPrice)\n      } catch (error) {\n        console.error('Unable to fetch data:', error)\n      }\n    }\n\n    fetchData()\n  }, [setTokenPrice, _tokenAddress, MoralisWeb3Api, chainName])\n\n  return { tokenPrice }\n}\n\nexport const usePoolPrice = (stakingTokenAddress: string, rewardTokenAddress: string, isFetchData?: boolean) => {\n  const MoralisWeb3Api = useMoralisWeb3Api()\n  const { chainId } = useWeb3React()\n  let chainName: 'eth' | 'ropsten' | 'bsc' | 'bsc testnet' = 'eth'\n  chainName = useChainFinder(chainId)\n  const [stakingPrice, setStakingPrice] = useState(0)\n  const [rewardPrice, setRewardPrice] = useState(0)\n\n  const web3 = useWeb3()\n  let _stakingTokenAddress\n  let _rewardTokenAddress\n  try {\n    _stakingTokenAddress = web3.utils.toChecksumAddress(stakingTokenAddress)\n    _rewardTokenAddress = web3.utils.toChecksumAddress(rewardTokenAddress)\n  } catch {\n    console.error('Invalid staking and reward address')\n  }\n\n  useEffect(() => {\n    const fetchData = async () => {\n      try {\n        let result\n        result = await MoralisWeb3Api.token.getTokenPrice({ chain: chainName, address: _stakingTokenAddress })\n        const _stakingTokenPrice = result.usdPrice\n\n        result = await MoralisWeb3Api.token.getTokenPrice({ chain: chainName, address: _rewardTokenAddress })\n        const _rewardTokenPrice = result.usdPrice\n\n        setStakingPrice(_stakingTokenPrice)\n        setRewardPrice(_rewardTokenPrice)\n      } catch (error) {\n        console.error('Unable to fetch data:', error)\n      }\n    }\n    if (isFetchData) {\n      fetchData()\n    }\n  }, [\n    setStakingPrice,\n    setRewardPrice,\n    _stakingTokenAddress,\n    _rewardTokenAddress,\n    MoralisWeb3Api,\n    chainName,\n    isFetchData,\n  ])\n\n  return { stakingPrice, rewardPrice }\n}\n\nexport const useFarmPrice = (farm: any, chain: any, isFetchData?: boolean) => {\n  const MoralisWeb3Api = useMoralisWeb3Api()\n  let chainName: 'eth' | 'ropsten' | 'bsc' | 'bsc testnet' = 'eth'\n  chainName = useChainFinder(chain)\n  const [LPPrice, setLPPrice] = useState(0)\n  const [rewardPrice, setRewardPrice] = useState(0)\n  const web3 = useWeb3()\n\n  useEffect(() => {\n    if (!farm) {\n      return\n    }\n    const lpTotalSupply = getBalanceNumber(new BigNumber(farm.totalDeposits ?? 0))\n    const token1Address = farm.token.address[chain]\n    const token2Address = farm.pairToken.address[chain]\n    const rewardTokenAddress = farm.quoteToken.address[chain]\n    const lpAddress = farm.lpAddresses[chain]\n\n    let _token1Address\n    let _token2Address\n    let _rewardTokenAddress\n    let _lpAddress\n    try {\n      _token1Address = web3.utils.toChecksumAddress(token1Address)\n      _token2Address = web3.utils.toChecksumAddress(token2Address)\n      _rewardTokenAddress = web3.utils.toChecksumAddress(rewardTokenAddress)\n      _lpAddress = web3.utils.toChecksumAddress(lpAddress)\n    } catch {\n      console.error('Invalid staking and reward address')\n    }\n\n    const findPrice = async (tokenAddress: string) => {\n      const result = await MoralisWeb3Api.token.getTokenPrice({ chain: chainName, address: tokenAddress })\n      const price = result.usdPrice\n      return price\n    }\n\n    const fetchData = async () => {\n      try {\n        let _totalToken1InPool\n        let _totalToken2InPool\n        // result = await MoralisWeb3Api.token.getTokenPrice({chain: chainName, address: _token1Address})\n        // result = await MoralisWeb3Api.token.getTokenPrice({chain: chainName, address: _token2Address})\n        // result = await MoralisWeb3Api.token.getTokenPrice({chain: chainName, address: _rewardTokenAddress})\n        const _token1Price = findPrice(_token1Address)\n        const _token2Price = findPrice(_token2Address)\n        const _rewardTokenPrice = findPrice(_rewardTokenAddress)\n        const res = MoralisWeb3Api.account.getTokenBalances({\n          chain: chainName,\n          address: _lpAddress,\n          token_addresses: [_token1Address, _token2Address],\n        })\n        const data = await Promise.all([_token1Price, _token2Price, _rewardTokenPrice, res])\n        const result = data[3]\n        if (result[0].token_address.toLowerCase() === _token1Address.toLowerCase()) {\n          _totalToken1InPool = getBalanceNumber(new BigNumber(result[0].balance), Number(result[0].decimals))\n        } else {\n          _totalToken2InPool = getBalanceNumber(new BigNumber(result[0].balance), Number(result[0].decimals))\n        }\n\n        if (result[1].token_address.toLowerCase() === _token1Address.toLowerCase()) {\n          _totalToken1InPool = getBalanceNumber(new BigNumber(result[1].balance), Number(result[1].decimals))\n        } else {\n          _totalToken2InPool = getBalanceNumber(new BigNumber(result[1].balance), Number(result[1].decimals))\n        }\n\n        setLPPrice((_totalToken1InPool * data[0] + _totalToken2InPool * data[1]) / lpTotalSupply)\n        setRewardPrice(data[2])\n      } catch (error) {\n        console.error('Unable to fetch data:', error)\n      }\n    }\n    if (isFetchData) {\n      fetchData()\n    }\n  }, [web3.utils, farm, chain, isFetchData, setLPPrice, setRewardPrice, chainName, MoralisWeb3Api])\n\n  if (!farm) {\n    return { LPPrice: 0, rewardPrice: 0 }\n  }\n\n  return { LPPrice, rewardPrice }\n}\n\nexport default usePoolPrice\n","import identity from 'lodash/identity'\nimport { useEffect, useState } from 'react'\n\ninterface UsePersistStateOptions {\n  localStorageKey: string\n  hydrate?: (value: any) => any\n  dehydrate?: (value: any) => any\n}\n\nconst defaultOptions = {\n  hydrate: identity,\n  dehydrate: identity,\n}\n\n/**\n * Same as \"useState\" but saves the value to local storage each time it changes\n */\nconst usePersistState = (initialValue: any, userOptions: UsePersistStateOptions) => {\n  const { localStorageKey, hydrate, dehydrate } = { ...defaultOptions, ...userOptions }\n  const [value, setValue] = useState(() => {\n    try {\n      const valueFromLS = localStorage.getItem(localStorageKey)\n\n      return valueFromLS ? hydrate(JSON.parse(valueFromLS)) : initialValue\n    } catch (error) {\n      return initialValue\n    }\n  })\n\n  useEffect(() => {\n    localStorage.setItem(localStorageKey, JSON.stringify(dehydrate(value)))\n  }, [value, localStorageKey, dehydrate])\n\n  return [value, setValue]\n}\n\nexport default usePersistState\n","import React, { useRef, useEffect } from 'react'\n\nfunction usePrevious(value) {\n  const ref = React.useRef()\n  useEffect(() => {\n    ref.current = value\n  }, [value])\n  return ref.current\n}\n\nexport default usePrevious\n","export const Latinise = {\n  latin_map: {\n    τ: 't',\n    Τ: 'T',\n  },\n}\n\nexport const latinise = (input: string) => {\n  return input.replace(/[^A-Za-z0-9[\\] ]/g, (x) => Latinise.latin_map[x] || x)\n}\n","import { useEffect, useRef } from 'react'\nimport { useSelector } from 'react-redux'\nimport { useAppDispatch } from 'state'\nimport { setBlock } from '.'\nimport { State } from '../types'\n\nexport const useBlock = () => {\n  return useSelector((state: State) => state.block)\n}\n\nexport const useInitialBlock = () => {\n  return useSelector((state: State) => state.block.initialBlock)\n}\n","import React, { useState, useMemo } from 'react'\nimport { Input } from '@metagg/mgg-uikit'\nimport styled from 'styled-components'\nimport debounce from 'lodash/debounce'\nimport { useTranslation } from 'contexts/Localization'\n\nconst StyledInput = styled(Input)`\n  margin-left: auto;\n  background-color: ${({ theme }) => theme.colors.MGG_container};\n  border-radius: 5px;\n  width: 200px;\n`\n\nconst InputWrapper = styled.div`\n  position: relative;\n  ${({ theme }) => theme.mediaQueries.sm} {\n    display: block;\n  }\n`\n\nconst Container = styled.div<{ toggled: boolean }>``\n\ninterface Props {\n  onChange: (e: React.ChangeEvent<HTMLInputElement>) => void\n  placeholder?: string\n}\n\nconst SearchInput: React.FC<Props> = ({ onChange: onChangeCallback, placeholder = 'Search' }) => {\n  const [toggled, setToggled] = useState(false)\n  const [searchText, setSearchText] = useState('')\n\n  const { t } = useTranslation()\n\n  const debouncedOnChange = useMemo(\n    () => debounce((e: React.ChangeEvent<HTMLInputElement>) => onChangeCallback(e), 500),\n    [onChangeCallback],\n  )\n\n  const onChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n    setSearchText(e.target.value)\n    debouncedOnChange(e)\n  }\n\n  return (\n    <Container toggled={toggled}>\n      <InputWrapper>\n        <StyledInput\n          value={searchText}\n          onChange={onChange}\n          placeholder={t(placeholder)}\n          onBlur={() => setToggled(false)}\n        />\n      </InputWrapper>\n    </Container>\n  )\n}\n\nexport default SearchInput\n","import React from 'react'\nimport styled from 'styled-components'\nimport { ListViewIcon, CardViewIcon, IconButton } from '@pancakeswap/uikit'\n\nexport enum ViewMode {\n  'TABLE' = 'TABLE',\n  'CARD' = 'CARD',\n}\n\ninterface ToggleViewProps {\n  viewMode: ViewMode\n  onToggle: (mode: ViewMode) => void\n}\n\nconst Container = styled.div`\n  margin-right: 0px;\n  margin-left: -8px;\n\n  ${({ theme }) => theme.mediaQueries.sm} {\n    margin-left: 0;\n    margin-right: 16px;\n  }\n`\n\nconst StyledIconButton = styled(IconButton)<{ active?: boolean }>`\n  border-radius: 5px;\n  ${({ active, theme }) =>\n    active &&\n    `\n  background-color: ${theme.colors.primary};\n`}\n`\n\nconst ToggleView: React.FunctionComponent<ToggleViewProps> = ({ viewMode, onToggle }) => {\n  const handleToggle = (mode: ViewMode) => {\n    if (viewMode !== mode) {\n      onToggle(mode)\n    }\n  }\n\n  return (\n    <Container>\n      <StyledIconButton\n        active={viewMode === ViewMode.CARD}\n        variant=\"text\"\n        scale=\"sm\"\n        id=\"clickPoolCardView\"\n        onClick={() => handleToggle(ViewMode.CARD)}\n      >\n        <CardViewIcon color={viewMode === ViewMode.CARD ? 'white' : 'textDisabled'} />\n      </StyledIconButton>\n      <StyledIconButton\n        active={viewMode === ViewMode.TABLE}\n        variant=\"text\"\n        scale=\"sm\"\n        id=\"clickPoolTableView\"\n        onClick={() => handleToggle(ViewMode.TABLE)}\n      >\n        <ListViewIcon color={viewMode === ViewMode.TABLE ? 'white' : 'textDisabled'} />\n      </StyledIconButton>\n    </Container>\n  )\n}\n\nexport default ToggleView\n","/* eslint-disable import/prefer-default-export */\nimport styled from 'styled-components'\n\nexport const Container = styled.div<{ src?: string }>`\n  background-color: ${({ theme }) => theme.colors.MGG_active};\n  padding: 0px 0px;\n  margin-bottom: 3rem;\n  position: relative;\n  ${({ src }) =>\n    `&:before {\n    content: '';\n    position: absolute;\n    left: 0;\n    top: 0;\n    opacity: 0.2;\n    width: 100%;\n    height: 100%;\n    z-index: 0;\n    background-image: url(${src ?? `/MGGblank.png`});\n    background-repeat: no-repeat;\n    // background-attachment: fixed;\n    background-position: center;\n    background-size: cover;\n  }`}\n`\nexport const LogoContainer = styled.div`\n  background: linear-gradient(0deg, rgb(0 0 0) 0%, rgb(0 0 0 / 50%) 25%, rgba(36, 121, 9, 0) 75%);\n  width: 100%;\n  height: 100%;\n  display: flex;\n`\n\nexport const MGGLogo = styled.img`\n  width: 200px;\n  margin: 0 auto;\n  padding: 1rem 1.5rem;\n`\n","import React from 'react'\nimport { Container, MGGLogo, LogoContainer } from './styled'\n\nconst Banner: React.FC = () => {\n  return (\n    <Container>\n      <LogoContainer>\n        <MGGLogo src=\"./MGG.png\" alt=\"mgg-logo\" />\n      </LogoContainer>\n    </Container>\n  )\n}\n\nexport default Banner\n","import React, { Dispatch, SetStateAction } from 'react'\nimport styled from 'styled-components'\nimport { Button } from '@metagg/mgg-uikit'\nimport { useLocation, Link, useRouteMatch } from 'react-router-dom'\nimport { useTranslation } from 'contexts/Localization'\n\ninterface FarmTabButtonsProps {\n  tabState: string\n  tabAction: (value: string) => void\n}\n\nconst FarmTabButtons: React.FC<FarmTabButtonsProps> = ({ tabState, tabAction }) => {\n  const { url } = useRouteMatch()\n  const { t } = useTranslation()\n\n  let activeIndex\n  switch (tabState) {\n    case '':\n      activeIndex = 0\n      break\n    case 'RENDER_ENDED':\n      activeIndex = 1\n      break\n    default:\n      activeIndex = 0\n      break\n  }\n\n  return (\n    <Wrapper>\n      <ButtonMenu activeIndex={activeIndex === 0} onClick={() => tabAction('')}>\n        {t('Live')}\n      </ButtonMenu>\n      <ButtonMenu activeIndex={activeIndex === 1} onClick={() => tabAction('RENDER_ENDED')}>\n        {t('Finished')}\n      </ButtonMenu>\n    </Wrapper>\n  )\n}\n\nexport default FarmTabButtons\n\nconst Wrapper = styled.div`\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  background-color: ${({ theme }) => theme.colors.MGG_container};\n  border-radius: 5rem;\n  a {\n    padding-left: 12px;\n    padding-right: 12px;\n  }\n  ${({ theme }) => theme.mediaQueries.sm} {\n    margin-left: 16px;\n  }\n  // & :first-child {\n  //   border-radius: 5rem;\n  // }\n  // & :last-child {\n  //   border-radius: 0rem 5rem 5rem 0rem;\n  // }\n`\nconst ButtonMenu = styled(Button)<{ activeIndex?: boolean }>`\n  background-color: ${({ activeIndex, theme }) => (activeIndex ? theme.colors.MGG_active : 'transparent')};\n  border: none;\n  border-radius: 5rem;\n`\n","import React from 'react'\nimport styled from 'styled-components'\nimport { Button, Heading, Text } from '@sparkpointio/sparkswap-uikit'\nimport { useTranslation } from 'contexts/Localization'\n\nconst StyledNotFound = styled.div`\n  align-items: center;\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n  margin: 60px auto;\n`\n\nconst NotAvailable = ({ title }) => {\n  const { t } = useTranslation()\n\n  return (\n    <StyledNotFound>\n      <img src=\"/logo.png\" alt=\"LogoIcon\" width=\"64px\" style={{ marginBottom: '8px' }} />\n      <Text mb=\"16px\">{`No ${title} Found`}</Text>\n    </StyledNotFound>\n  )\n}\n\nexport default NotAvailable\n","import styled from 'styled-components'\nimport { Button, Flex } from '@metagg/mgg-uikit'\nimport { Grid } from '@mui/material'\n\nexport const ToggleWrapper = styled.div`\n  display: flex;\n  align-items: center;\n`\n\nexport const ButtonA = styled(Button)`\n  width: 10rem;\n`\nexport const ButtonB = styled(Button)<{ isGrid: boolean }>`\n  padding: 1rem;\n  background-color: ${({ isGrid, theme }) => (isGrid ? theme.colors.MGG_active : theme.colors.MGG_container)};\n`\nexport const FilterItem = styled(Flex)`\n  align-items: center;\n  text-align: center;\n  flex-flow: row;\n  column-gap: 0.5rem;\n  margin: 0.5rem 5px;\n`\n\nexport const Section = styled(Flex)`\n  flex-flow: row-wrap;\n  justify-content: space-between;\n  margin-bottom: 2rem;\n`\n\nexport const HeaderSection = styled(Section)`\n  flex-direction: column;\n  padding: 1rem;\n  align-items: center;\n  ${({ theme }) => theme.mediaQueries.sm} {\n    flex-wrap: wrap;\n    flex-direction: row;\n    padding: 0rem;\n  }\n`\nexport const BodySection = styled(Section)`\n  flex-direction: column;\n  min-height: 35vh;\n`\nexport const StakeSection = styled(Flex)`\n  width: 100%;\n  flex-direction: column;\n  & > * {\n    margin: 0rem;\n  }\n  ${({ theme }) => theme.mediaQueries.sm} {\n    flex-direction: row;\n    & > * {\n      margin: 0rem 1rem;\n    }\n  }\n`\n\nexport const FilterButton = styled(Button)`\n  background-color: ${({ theme }) => theme.colors.MGG_mainBG};\n  border-radius: 5px;\n  width: 200px;\n  border: 2px solid ${({ theme }) => theme.colors.MGG_active};\n`\n\nexport const Layout = styled.div`\n  padding: 0rem;\n  ${({ theme }) => theme.mediaQueries.md} {\n    padding: 3.5rem;\n  }\n`\n","import styled, { ThemeContext } from 'styled-components'\n\nexport const Cards2 = styled.button<{ src?: string; bgColor?: string }>`\n  width: 100%;\n  position: relative;\n  min-width: 20rem;\n  min-height: 12rem;\n  cursor: pointer;\n  border: none;\n  padding: 0;\n  text-align: left;\n  flex: 1;\n  display: flex;\n  align-items: stretch;\n  margin: 1rem 0rem;\n  background-color: ${({ bgColor }) => bgColor ?? '#030f62'};\n  ${({ src }) =>\n    `&:before {\n      content: '';\n      position: absolute;\n      left: 0;\n      top: 0;\n      opacity: 0.2;\n      width: 100%;\n      height: 100%;\n      z-index: 0;\n      background-image: url(${src ?? `./MGG.png`});\n      background-repeat: no-repeat;\n      // background-attachment: fixed;\n      background-position: center;\n      background-size: cover;\n    }`}\n  & > * {\n    flex: 1;\n  }\n`\n\nexport const Card2Container = styled.div`\n  display: grid;\n  position: relative;\n  padding: 1rem 1.5rem;\n  background: linear-gradient(0deg, rgb(0 0 0) 0%, rgb(0 0 0 / 50%) 25%, rgba(36, 121, 9, 0) 75%);\n  width: 100%;\n  height: 100%;\n  z-index: 2;\n  grid-template-columns: 1fr 1fr;\n`\nexport const TokenLogo = styled.img<{ size?: string }>`\n  border-radius: 50%;\n  height: ${({ size }) => (!size ? '80px' : size)};\n  width: ${({ size }) => (!size ? '80px' : size)};\n  z-index: 2;\n  @media (max-width: 500px) {\n    height: ${({ size }) => (!size ? '50px' : size)};\n    width: ${({ size }) => (!size ? '50px' : size)};\n  }\n`\n\nexport const Badge = styled.div<{ type?: number }>`\n  ${({ type }) =>\n    type\n      ? `\n      padding: 0.2rem 0.5rem;\n      border: thin solid white;\n      border-radius: 0.3rem;\n    `\n      : `\n      padding: 0.2rem 0.5rem;\n      background-color: rgb(0,196,204);\n      border-radius: 0.3rem;\n    `}\n`\n","import React, { useCallback, useContext, useEffect, useMemo, useRef, useState } from 'react'\nimport { Link } from 'react-router-dom'\nimport BigNumber from 'bignumber.js'\nimport { Flex, Image, RowType, Toggle } from '@pancakeswap/uikit'\nimport { Text, Heading } from '@metagg/mgg-uikit'\nimport { Oval } from 'react-loading-icons'\nimport { useWeb3React } from '@web3-react/core'\nimport styled, { ThemeContext } from 'styled-components'\nimport tokens from 'config/constants/tokens'\nimport { Token } from 'config/constants/types'\nimport { Farm, Pool } from 'state/types'\nimport getLiquidityUrlPathParts from 'utils/getLiquidityUrlPathParts'\nimport { getAddress } from 'utils/addressHelpers'\nimport { getFarmApr, getFarmV2Apr } from 'utils/apr'\nimport { useFarmPrice } from 'hooks/price'\nimport usePrevious from 'utils/refHelpers'\nimport { getBalanceNumber, getBalanceAmount } from 'utils/formatBalance'\nimport { Cards2, Card2Container, TokenLogo, Badge } from './styled'\nimport { FarmWithStakedValue } from '../../config'\nimport { MAINNET_CHAIN_ID } from '../../../../config'\n\nconst getImageUrlFromToken = (token: Token) => {\n  const address = getAddress(token.symbol === 'BNB' ? tokens.wbnb.address : token.address)\n  return `/images/tokens/${address}.${token.iconExtension ?? 'svg'}`\n}\n\ninterface FarmCard2Props {\n  bgColor?: string\n  src?: string\n  userDataReady?: boolean\n  farm?: FarmWithStakedValue\n  removed?: boolean\n  cakePrice?: BigNumber\n  account?: string\n  isNew?: boolean\n}\n\nconst FarmCard2: React.FC<FarmCard2Props> = ({\n  bgColor = '#030f62',\n  src = './MGG.png',\n  userDataReady,\n  farm,\n  removed,\n  cakePrice,\n  account,\n  isNew,\n}) => {\n  // const farmImage = farm.lpSymbol.split(' ')[0].toLocaleLowerCase()\n  // const formatTotalRewardRate = getBalanceAmount(new BigNumber(farm.totalRewardRate ?? 0)).toFormat(4)\n  // const lpLabel = farm.lpSymbol && farm.lpSymbol.toUpperCase().replace('PANCAKE', '')\n  // const earnLabel = farm.quoteToken.symbol\n  // const liquidityUrlPathParts = getLiquidityUrlPathParts({\n  //   mainTokenAddress: farm.token.address,\n  //   pairTokenAddress: farm.pairToken.address,\n  // })\n\n  const [isFetchData, setFetchData] = useState<boolean>(false)\n  const { chainId } = useWeb3React()\n  const chain = chainId ? chainId.toString() : MAINNET_CHAIN_ID\n\n  const lpTotalSupply = getBalanceNumber(new BigNumber(farm.totalDeposits ?? 0))\n  const { LPPrice, rewardPrice } = useFarmPrice(farm, chain, isFetchData)\n  const prevLPPrice = usePrevious(LPPrice)\n  const prevRewardPrice = usePrevious(rewardPrice)\n\n  useEffect(() => {\n    if (LPPrice > 0 || rewardPrice > 0) {\n      setFetchData(false)\n    }\n    setTimeout(() => {\n      setFetchData(true)\n      if (LPPrice !== prevLPPrice || rewardPrice !== prevRewardPrice) {\n        setFetchData(true)\n      } else {\n        setFetchData(false)\n      }\n    }, 60000)\n    if (prevLPPrice === LPPrice || prevRewardPrice === rewardPrice) {\n      setFetchData(false)\n    }\n  }, [LPPrice, rewardPrice, setFetchData, prevLPPrice, prevRewardPrice])\n\n  const farmV2Apr = useMemo(\n    () => getFarmV2Apr(LPPrice, rewardPrice, Number(farm.totalDeposits), Number(farm.rewardRate)),\n    [LPPrice, rewardPrice, farm.totalDeposits, farm.rewardRate],\n  )\n\n  const apr = farmV2Apr > 0 ? `${farmV2Apr.toFixed(2)} %` : <Oval width=\"20px\" height=\"20px\" />\n\n  return (\n    <>\n      <Cards2\n        src={src}\n        bgColor={farm.UIProps ? farm.UIProps.bgColor : null}\n        className=\"shodow-pop\"\n        style={{ cursor: 'pointer' }}\n      >\n        <Link to={`/gamefi/${`LP`}/${farm.pid}`}>\n          <Card2Container>\n            <TokenLogo size=\"3.5rem\" src={getImageUrlFromToken(farm.quoteToken)} />\n            <Flex\n              style={{\n                flexFlow: 'row wrap',\n                columnGap: '0.5rem',\n                justifyContent: 'end',\n              }}\n            >\n              {isNew && (\n                <div>\n                  <Badge>\n                    <Text color=\"white\">New</Text>\n                  </Badge>\n                </div>\n              )}\n              <TokenLogo size=\"2rem\" src={getImageUrlFromToken(farm.pairToken)} />\n              <div>\n                <Badge type={1}>\n                  <Text color=\"white\">LP Staking</Text>\n                </Badge>\n              </div>\n            </Flex>\n            <Flex style={{ alignItems: 'end' }}>\n              <div>\n                <Text color=\"white\">{farm.lpSymbol}</Text>\n                <Heading color=\"white\">{farm.name}</Heading>\n              </div>\n            </Flex>\n            <Flex style={{ justifyContent: 'end', alignItems: 'end' }}>\n              <div style={{ textAlign: 'end' }}>\n                <Text color=\"white\">APR {apr}</Text>\n                <Heading color=\"white\">{farm.remainingDays} Days Left</Heading>\n              </div>\n            </Flex>\n          </Card2Container>\n        </Link>\n      </Cards2>\n    </>\n  )\n}\n\nexport default FarmCard2\n","import React, { useCallback, useContext, useEffect, useMemo, useRef, useState } from 'react'\nimport { Link as RLink } from 'react-router-dom'\nimport BigNumber from 'bignumber.js'\nimport { Flex, Link, Image, RowType, Toggle } from '@pancakeswap/uikit'\nimport { Text, Heading } from '@metagg/mgg-uikit'\nimport { Oval } from 'react-loading-icons'\nimport styled, { ThemeContext } from 'styled-components'\nimport tokens from 'config/constants/tokens'\nimport { Token, PoolCategory } from 'config/constants/types'\nimport { Pool } from 'state/types'\nimport UnlockButton from 'components/UnlockButton'\nimport { useTranslation } from 'contexts/Localization'\nimport { BIG_ZERO } from 'utils/bigNumber'\nimport { usePoolPrice } from 'hooks/price'\nimport { getPoolApr } from 'utils/apr'\nimport { getBscScanAddressUrl } from 'utils/bscscan'\nimport { getBalanceNumber, formatNumber } from 'utils/formatBalance'\nimport { getPoolBlockInfo } from 'views/Pools/helpers'\nimport { useBlock } from 'state/block/hooks'\nimport { getBscScanLink } from 'utils'\nimport { getAddress } from 'utils/addressHelpers'\nimport { Cards2, Card2Container, TokenLogo, Badge } from './styled'\n\nconst getImageUrlFromToken = (token: Token) => {\n  const address = getAddress(token.symbol === 'BNB' ? tokens.wbnb.address : token.address)\n  return `/images/tokens/${address}.${token.iconExtension ?? 'svg'}`\n}\n\ninterface PoolCard2Props {\n  bgColor?: string\n  src?: string\n  userDataReady: boolean\n  pool: Pool\n  removed: boolean\n  cakePrice?: BigNumber\n  account?: string\n  isNew?: boolean\n}\n\nconst PoolCard2: React.FC<PoolCard2Props> = ({\n  bgColor = '#030f62',\n  src = './MGG.png',\n  userDataReady,\n  pool,\n  account,\n  isNew,\n}) => {\n  const {\n    sousId,\n    stakingToken,\n    earningToken,\n    isFinished,\n    userData,\n    startBlock,\n    endBlock,\n    isComingSoon,\n    poolCategory,\n    stakingTokenPrice,\n  } = pool\n  const totalStaked = pool.totalStaked\n    ? getBalanceNumber(new BigNumber(pool.totalStaked.toString()), stakingToken.decimals)\n    : 0\n\n  const rewardPerBlock = pool?.tokenPerBlock\n    ? getBalanceNumber(new BigNumber(pool.tokenPerBlock.toString()), earningToken.decimals)\n    : 0\n\n  const temp = new BigNumber(pool.tokenPerBlock).times(new BigNumber(userData.stakedBalance).div(pool.totalStaked))\n  const rewardRate = pool?.tokenPerBlock ? getBalanceNumber(temp) : 0\n\n  const { currentBlock } = useBlock()\n  const stakingAddess = getAddress(pool.contractAddress)\n  const { shouldShowBlockCountdown, blocksUntilStart, blocksRemaining, hasPoolStarted, blocksToDisplay } =\n    getPoolBlockInfo(pool, currentBlock)\n  const stakingTokenBalance = userData?.stakingTokenBalance ? new BigNumber(userData.stakingTokenBalance) : BIG_ZERO\n  const { stakingPrice, rewardPrice } = usePoolPrice(stakingToken.address[56], earningToken.address[56])\n  const isBnbPool = poolCategory === PoolCategory.BINANCE\n  const poolApr = getPoolApr(stakingPrice, rewardPrice, totalStaked, rewardPerBlock) ?? 0\n  const apr = poolApr > 0 ? `${poolApr.toFixed(2)} %` : <Oval width=\"20px\" height=\"20px\" />\n  // const tiersLength = pool.poolCategory === PoolCategory.FIXEDAPR ? pool.fixedAprConfigs.tiers.length : null;\n\n  return (\n    <>\n      <Cards2 src={src} bgColor={pool.UIProps.bgColor} className=\"shodow-pop\" style={{ cursor: 'pointer' }}>\n        <RLink to={`/gamefi/${`Pools`}/${pool.sousId}`}>\n          <Card2Container>\n            <TokenLogo size=\"3.5rem\" src={getImageUrlFromToken(stakingToken)} />\n            <Flex\n              style={{\n                flexFlow: 'row wrap',\n                columnGap: '0.5rem',\n                justifyContent: 'end',\n              }}\n            >\n              {isNew && (\n                <div>\n                  <Badge>\n                    <Text color=\"white\">New</Text>\n                  </Badge>\n                </div>\n              )}\n              <TokenLogo size=\"2rem\" src={getImageUrlFromToken(earningToken)} />\n              <div>\n                <Badge type={1}>\n                  <Text color=\"white\">Pool Based</Text>\n                </Badge>\n              </div>\n            </Flex>\n            <Flex style={{ alignItems: 'end' }}>\n              <div>\n                <Text color=\"white\">{`${stakingToken.symbol}-${earningToken.symbol} Staking`}</Text>\n                <Heading color=\"white\">{pool.name}</Heading>\n              </div>\n            </Flex>\n            <Flex style={{ justifyContent: 'end', alignItems: 'end' }}>\n              {pool.poolCategory === PoolCategory.FIXEDAPR ? (\n                <div style={{ textAlign: 'end' }}>\n                  <Text color=\"white\">FIXED APR</Text>\n                  {/* <Heading color=\"white\">\n                    {pool.fixedAprConfigs.tiers[1].APR}% - {pool.fixedAprConfigs.tiers[tiersLength - 1].APR}%\n                  </Heading> */}\n                </div>\n              ) : (\n                <div style={{ textAlign: 'end' }}>\n                  <Text color=\"white\">APR {apr}</Text>\n                  <Heading color=\"white\">\n                    {!isComingSoon && `${formatNumber(blocksRemaining, 0, 0)}`} {isComingSoon && '-'} blocks\n                  </Heading>\n                </div>\n              )}\n            </Flex>\n          </Card2Container>\n        </RLink>\n      </Cards2>\n    </>\n  )\n}\n\nexport default PoolCard2\n","import React, { useContext } from 'react'\nimport { Grid, FormControl, InputLabel, MenuItem, FormHelperText } from '@mui/material'\nimport { Text } from '@metagg/mgg-uikit'\nimport Select, { SelectChangeEvent } from '@mui/material/Select'\nimport { ThemeContext } from 'styled-components'\n\nconst items = ['Apy', 'Rate']\n\nconst SelectComponent = ({ handleSortBy, sortBy }: { handleSortBy: (string) => void; sortBy: string }) => {\n  const theme = useContext(ThemeContext)\n  const handleChange = (event: SelectChangeEvent) => {\n    handleSortBy(event.target.value)\n  }\n  return (\n    <FormControl\n      sx={{ m: 1, minWidth: 120 }}\n      style={{ border: 'none', backgroundColor: theme.colors.MGG_container, borderRadius: '5px' }}\n      size=\"small\"\n    >\n      <InputLabel id=\"select-helper-label\">\n        <Text color=\"textSubtle\">Select</Text>\n      </InputLabel>\n      <Select\n        labelId=\"select-helper-label\"\n        id=\"select-helper\"\n        value={sortBy}\n        label=\"Sort\"\n        onChange={handleChange}\n        style={{ color: theme.colors.textSubtle }}\n      >\n        <MenuItem value=\"\">\n          <em>None</em>\n        </MenuItem>\n        {items.map((item) => {\n          return <MenuItem value={item.toLowerCase()}>{item}</MenuItem>\n        })}\n      </Select>\n    </FormControl>\n  )\n}\n\nexport default SelectComponent\n","import BigNumber from 'bignumber.js'\nimport { orderBy, partition } from 'lodash'\nimport { ThemeContext } from 'styled-components'\nimport React, { useState, useEffect, useCallback, useMemo, useRef, useContext } from 'react'\nimport { Route, useLocation, useRouteMatch } from 'react-router-dom'\nimport { useWeb3React } from '@web3-react/core'\nimport { Grid } from '@mui/material'\nimport { Farm, Pool } from 'state/types'\nimport { PoolCategory } from 'config/constants/types'\nimport {\n  useFarms,\n  usePollFarmsData,\n  usePriceCakeBusd,\n  usePools,\n  useFetchPublicPoolsData,\n  useCakeVault,\n  useFetchCakeVault,\n} from 'state/hooks'\nimport { getFarmApr, getFarmV2Apr } from 'utils/apr'\nimport { latinise } from 'utils/latinise'\nimport isArchivedPid from 'utils/farmHelpers'\nimport usePersistState from 'hooks/usePersistState'\nimport { SelectChangeEvent } from '@mui/material/Select'\nimport { Text, Flex, Heading, Button } from '@metagg/mgg-uikit'\nimport { Toggle } from '@pancakeswap/uikit'\nimport SearchInput from 'components/SearchInput'\nimport ToggleView, { ViewMode } from './components/ToggleView/ToggleView'\nimport { FarmWithStakedValue } from './config'\nimport VaultBanner from './components/Banner'\nimport TabButtons from './components/TabButton'\nimport NotAvailable from './components/NotAvailable'\nimport { BodySection, FilterButton, FilterItem, HeaderSection, Layout, StakeSection, ToggleWrapper } from './styled'\nimport FarmCard from './components/Cards/Farm'\nimport PoolCard from './components/Cards/Pool'\nimport Select from './components/Select'\n\nconst Gamefi: React.FC = () => {\n  const theme = useContext(ThemeContext)\n  const [query, setQuery] = useState('')\n  const { account } = useWeb3React()\n  const { path } = useRouteMatch()\n  const { pathname } = useLocation()\n  const [sortBy, setSortBy] = useState('')\n  const [isLiveVaults, setLiveVaults] = useState('')\n\n  const handleIsLiveVaults = (value: string) => {\n    setLiveVaults(value)\n  }\n  const handleChange = (event: SelectChangeEvent) => {\n    setSortBy(event.target.value)\n  }\n  const [viewMode, setViewMode] = usePersistState(ViewMode.TABLE, { localStorageKey: 'mgg_vaults_view' })\n  const { data: farmsLP, userDataLoaded } = useFarms()\n  const { pools: poolsWithoutAutoVault } = usePools(account)\n  const cakePrice = usePriceCakeBusd()\n  const isArchived = pathname.includes('archived')\n  const isActive = true\n  const {\n    userData: { cakeAtLastUserAction, userShares },\n    fees: { performanceFee },\n    pricePerFullShare,\n    totalCakeInVault,\n  } = useCakeVault()\n  const accountHasVaultShares = userShares && userShares.gt(0)\n  const performanceFeeAsDecimal = performanceFee && performanceFee / 100\n  usePollFarmsData(isArchived)\n  useFetchCakeVault()\n  useFetchPublicPoolsData()\n  // Users with no wallet connected should see 0 as Earned amount\n  // Connected users should see loading indicator until first userData has loaded\n  const userDataReady = !account // || (!!account && userDataLoaded)\n  const [stakedOnly, setStakedOnly] = useState(!isActive)\n  useEffect(() => {\n    setStakedOnly(!isActive)\n  }, [isActive])\n  const mggFarms = farmsLP.filter((farm) => farm.pid !== 0 && !farm.hasEnded && farm.isMain && !isArchivedPid(farm.pid))\n  const activeFarms = farmsLP.filter(\n    (farm) => farm.pid !== 0 && !farm.hasEnded && !farm.isMain && !isArchivedPid(farm.pid),\n  )\n  const inactiveFarms = farmsLP.filter((farm) => farm.pid !== 0 && farm.hasEnded && !isArchivedPid(farm.pid))\n  const archivedFarms = farmsLP.filter((farm) => isArchivedPid(farm.pid))\n\n  const stakedOnlyFarms = activeFarms.filter(\n    (farm) => farm.userData && !farm.isMain && new BigNumber(farm.userData.stakedBalance).isGreaterThan(0),\n  )\n\n  const stakedInactiveFarms = inactiveFarms.filter(\n    (farm) => farm.userData && !farm.isMain && new BigNumber(farm.userData.stakedBalance).isGreaterThan(0),\n  )\n\n  const stakedArchivedFarms = archivedFarms.filter(\n    (farm) => farm.userData && new BigNumber(farm.userData.stakedBalance).isGreaterThan(0),\n  )\n\n  const handleChangeQuery = (event: React.ChangeEvent<HTMLInputElement>) => {\n    setQuery(event.target.value)\n  }\n  const loadMoreRef = useRef<HTMLDivElement>(null)\n  const farmsList = useCallback(\n    (farmsToDisplay: Farm[]): FarmWithStakedValue[] => {\n      let farmsToDisplayWithAPR: FarmWithStakedValue[] = farmsToDisplay.map((farm) => {\n        if (!farm.lpTotalInQuoteToken || !farm.quoteToken.busdPrice) {\n          return farm\n        }\n        const totalLiquidity = new BigNumber(farm.lpTotalInQuoteToken).times(farm.quoteToken.busdPrice)\n        const apr = isActive ? getFarmApr(new BigNumber(farm.poolWeight), cakePrice, totalLiquidity) : 0\n\n        return { ...farm, apr, liquidity: totalLiquidity }\n      })\n\n      if (query) {\n        const lowercaseQuery = latinise(query.toLowerCase())\n        farmsToDisplayWithAPR = farmsToDisplayWithAPR.filter((farm: FarmWithStakedValue) => {\n          return (\n            latinise(farm.lpSymbol.toLowerCase()).includes(lowercaseQuery) ||\n            latinise(farm.quoteToken.symbol.toLowerCase()).includes(lowercaseQuery)\n          )\n        })\n      }\n      return farmsToDisplayWithAPR\n    },\n    [cakePrice, query, isActive],\n  )\n\n  const mggList = useCallback(\n    (farmsToDisplay: Farm[]): FarmWithStakedValue[] => {\n      const farmsToDisplayWithAPR: FarmWithStakedValue[] = farmsToDisplay.map((farm) => {\n        if (!farm.lpTotalInQuoteToken || !farm.quoteToken.busdPrice) {\n          return farm\n        }\n        const totalLiquidity = new BigNumber(farm.lpTotalInQuoteToken).times(farm.quoteToken.busdPrice)\n        const apr = isActive ? getFarmApr(new BigNumber(farm.poolWeight), cakePrice, totalLiquidity) : 0\n\n        return { ...farm, apr, liquidity: totalLiquidity }\n      })\n\n      return farmsToDisplayWithAPR\n    },\n    [cakePrice, isActive],\n  )\n\n  const fixedAprsOnly = poolsWithoutAutoVault.filter((pool) => pool.poolCategory === PoolCategory.FIXEDAPR)\n\n  const pools = useMemo(() => {\n    const cakePool = fixedAprsOnly.map((pool) => pool.sousId === 0)\n    const cakeAutoVault = { ...cakePool, isAutoVault: true }\n\n    return [...fixedAprsOnly]\n  }, [fixedAprsOnly])\n\n  const [finishedPools, openPools] = useMemo(() => partition(pools, (pool) => pool.isFinished), [pools])\n  const stakedOnlyFinishedPools = useMemo(\n    () =>\n      finishedPools.filter((pool) => {\n        if (pool.isAutoVault) {\n          return accountHasVaultShares\n        }\n        return pool.userData && new BigNumber(pool.userData.stakedBalance).isGreaterThan(0)\n      }),\n    [finishedPools, accountHasVaultShares],\n  )\n  const stakedOnlyOpenPools = useMemo(\n    () =>\n      openPools.filter((pool) => {\n        if (pool.isAutoVault) {\n          return accountHasVaultShares\n        }\n        return pool.userData && new BigNumber(pool.userData.stakedBalance).isGreaterThan(0)\n      }),\n    [openPools, accountHasVaultShares],\n  )\n\n  const stakedMemoized = useMemo(() => {\n    const stakingList = {\n      activeFarms: [],\n      inactiveFarms: [],\n      activePools: [],\n      inactivePools: [],\n      mggFarms: [],\n      mggPools: [],\n    }\n    if (stakedOnly) {\n      stakingList.activeFarms = farmsList(stakedOnlyFarms)\n      stakingList.inactiveFarms = farmsList(stakedInactiveFarms)\n      stakingList.activePools = stakedOnlyOpenPools.filter((pool) => !pool.isMain)\n      stakingList.inactivePools = stakedOnlyFinishedPools.filter((pool) => !pool.isMain)\n    } else {\n      stakingList.activeFarms = farmsList(activeFarms)\n      stakingList.inactiveFarms = farmsList(inactiveFarms)\n      stakingList.activePools = openPools.filter((pool) => !pool.isMain)\n      stakingList.inactivePools = finishedPools.filter((pool) => !pool.isMain)\n    }\n    stakingList.mggPools = openPools.filter((pool) => pool.isMain)\n    stakingList.mggFarms = mggList(mggFarms)\n    return stakingList\n  }, [\n    farmsList,\n    mggList,\n    mggFarms,\n    activeFarms,\n    inactiveFarms,\n    stakedInactiveFarms,\n    stakedOnly,\n    stakedOnlyFarms,\n    finishedPools,\n    openPools,\n    stakedOnlyOpenPools,\n    stakedOnlyFinishedPools,\n  ])\n\n  const renderContent = ({ RENDER_TYPE }: { RENDER_TYPE?: string }): JSX.Element => {\n    const render = (type) => {\n      switch (type) {\n        case 'MGG_VAULTS':\n          return stakedMemoized.mggFarms.length !== 0 || stakedMemoized.mggPools.length !== 0 ? (\n            <StakeSection>\n              {stakedMemoized.mggFarms.length !== 0 && (\n                <Grid container spacing={{ md: 4 }}>\n                  {stakedMemoized.mggFarms.map((farm) => (\n                    <Grid key={farm.pid} item xs={12} md={12}>\n                      <FarmCard\n                        userDataReady={userDataReady}\n                        farm={farm}\n                        cakePrice={cakePrice}\n                        account={account}\n                        removed={false}\n                      />\n                    </Grid>\n                  ))}\n                </Grid>\n              )}\n              {stakedMemoized.mggPools.length !== 0 && (\n                <Grid container spacing={{ md: 4 }}>\n                  {stakedMemoized.mggPools.map((pool) => (\n                    <Grid key={pool.sousId} item xs={12} md={12}>\n                      <PoolCard\n                        userDataReady={userDataReady}\n                        pool={pool}\n                        cakePrice={cakePrice}\n                        account={account}\n                        removed={false}\n                        bgColor=\"#b10303d6\"\n                      />\n                    </Grid>\n                  ))}\n                </Grid>\n              )}\n            </StakeSection>\n          ) : (\n            <NotAvailable title=\"MGG Vaults\" />\n          )\n        case 'RENDER_ENDED':\n          return stakedMemoized.inactiveFarms.length !== 0 || stakedMemoized.inactivePools.length !== 0 ? (\n            <StakeSection>\n              {stakedMemoized.inactiveFarms.length !== 0 && (\n                <Grid container spacing={{ md: 4 }}>\n                  {stakedMemoized.inactiveFarms.map((farm) => (\n                    <Grid key={farm.pid} item xs={12} md={12}>\n                      <FarmCard\n                        userDataReady={userDataReady}\n                        farm={farm}\n                        cakePrice={cakePrice}\n                        account={account}\n                        removed={false}\n                      />\n                    </Grid>\n                  ))}\n                </Grid>\n              )}\n              {stakedMemoized.inactivePools.length !== 0 && (\n                <Grid container spacing={{ md: 4 }}>\n                  {stakedMemoized.inactivePools.map((pool) => (\n                    <Grid key={pool.sousId} item xs={12} md={12}>\n                      <PoolCard\n                        userDataReady={userDataReady}\n                        pool={pool}\n                        cakePrice={cakePrice}\n                        account={account}\n                        removed={false}\n                        bgColor=\"#b10303d6\"\n                      />\n                    </Grid>\n                  ))}\n                </Grid>\n              )}\n            </StakeSection>\n          ) : (\n            <NotAvailable title=\"Inactive Vaults\" />\n          )\n        default:\n          return stakedMemoized.activeFarms.length !== 0 || stakedMemoized.activePools.length !== 0 ? (\n            <StakeSection>\n              {stakedMemoized.activeFarms.length !== 0 && (\n                <Grid container spacing={4}>\n                  {stakedMemoized.activeFarms.map((farm) => (\n                    <Grid key={farm.pid} item xs={12} md={12}>\n                      <FarmCard\n                        userDataReady={userDataReady}\n                        farm={farm}\n                        cakePrice={cakePrice}\n                        account={account}\n                        removed={false}\n                      />\n                    </Grid>\n                  ))}\n                </Grid>\n              )}\n              {stakedMemoized.activePools.length !== 0 && (\n                <Grid container spacing={2}>\n                  {stakedMemoized.activePools.map((pool) => (\n                    <Grid key={pool.sousId} item xs={12} md={12}>\n                      <PoolCard\n                        userDataReady={userDataReady}\n                        pool={pool}\n                        cakePrice={cakePrice}\n                        account={account}\n                        removed={false}\n                        bgColor=\"#b10303d6\"\n                      />\n                    </Grid>\n                  ))}\n                </Grid>\n              )}\n            </StakeSection>\n          ) : (\n            <NotAvailable title=\"Active Vaults\" />\n          )\n      }\n    }\n\n    return (\n      <div style={{ marginTop: '25x', paddingTop: '25px' }}>\n        <div\n          style={{\n            display: 'flex',\n            flexFlow: 'row wrap',\n            justifyContent: 'space-evenly',\n            columnGap: '2rem',\n            rowGap: '2rem',\n          }}\n        >\n          {render(RENDER_TYPE)}\n        </div>\n      </div>\n    )\n  }\n  return (\n    <>\n      <VaultBanner />\n      <Layout>\n        <BodySection>\n          <Heading size=\"xl\">MGG Vaults</Heading>\n          {/* Sample render for MGG, update with live mgg vault */}\n          {renderContent({ RENDER_TYPE: 'MGG_VAULTS' })}\n        </BodySection>\n        <HeaderSection>\n          <FilterItem>\n            <FilterButton>\n              <Text>FILTER</Text>\n            </FilterButton>\n          </FilterItem>\n          <FilterItem>\n            <TabButtons tabAction={handleIsLiveVaults} tabState={isLiveVaults} />\n          </FilterItem>\n          <FilterItem>\n            <ToggleWrapper>\n              <Toggle checked={stakedOnly} onChange={() => setStakedOnly(!stakedOnly)} scale=\"sm\" />\n              <Text marginLeft=\"10px\"> Staked only</Text>\n            </ToggleWrapper>\n            {/* <TabButtons hasStakeInFinishedFarms={stakedInactiveFarms.length > 0} /> */}\n          </FilterItem>\n          <FilterItem>\n            <Text textTransform=\"uppercase\">Search</Text>\n            <SearchInput onChange={handleChangeQuery} placeholder=\"Search Vaults\" />\n          </FilterItem>\n          <FilterItem>\n            <Text>SORT BY:</Text>\n            <Select handleSortBy={setSortBy} sortBy={sortBy} />\n          </FilterItem>\n          {/* <FilterItem>\n          <Text textTransform='uppercase'>View</Text>\n          <ToggleView viewMode={viewMode} onToggle={(mode: ViewMode) => setViewMode(mode)} />\n        </FilterItem> */}\n        </HeaderSection>\n        <BodySection>\n          <Heading size=\"xl\">{isLiveVaults === '' ? 'Live' : 'Past'} Vaults</Heading>\n          {renderContent({ RENDER_TYPE: isLiveVaults })}\n        </BodySection>\n      </Layout>\n    </>\n  )\n}\n\nexport default Gamefi\n"],"sourceRoot":""}