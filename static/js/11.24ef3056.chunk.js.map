{"version":3,"sources":["hooks/useContract.ts","hooks/useWeb3.ts","components/UnlockButton.tsx","utils/callHelpers.ts","components/Balance.tsx","utils/bscscan.ts","hooks/useApprove.ts","hooks/usePreviousValue.ts","hooks/useLastUpdated.ts","hooks/chainHelpers.ts","hooks/price.ts","hooks/useTokenBalance.ts","hooks/usePersistState.ts","utils/refHelpers.ts","utils/latinise.ts","hooks/useUnstake.ts","hooks/useHarvest.ts","components/TokenPairImage/index.tsx","hooks/useStake.ts","components/layout/Flex.tsx","views/Farms/components/Divider.tsx","views/Farms/components/FarmTable/Actions/styles.ts","views/Farms/components/FarmCard/DetailsSection.tsx","state/block/hooks.ts","components/PageHeader/PageHeader.tsx","components/ModalInput/ModalInput.tsx","views/Pools/components/ToggleView/ToggleView.tsx","views/Pools/components/PoolCard/StyledCard.tsx","views/Pools/components/CakeVaultCard/CakeVaultTokenPairImage.tsx","views/Pools/components/PoolCard/StyledCardHeader.tsx","views/Pools/components/PoolCard/Modals/NotEnoughTokensModal.tsx","views/Pools/components/PoolCard/Modals/Stake.tsx","views/Pools/components/PoolCard/Modals/StakeModal.tsx","views/Pools/components/PoolCard/CardActions/StakeActions.tsx","views/Pools/components/PoolCard/CardActions/index.tsx","views/Pools/components/ClaimAction/index.tsx","views/Pools/components/PoolCard/index.tsx","components/ApyCalculatorModal/index.tsx","views/Pools/components/PoolCard/AprRow.tsx","components/Tags.tsx","views/Pools/components/PoolCard/CardFooter/ExpandedFooter.tsx","views/Pools/components/PoolCard/CardFooter/index.tsx","views/Pools/components/CakeVaultCard/VaultCardActions/VaultApprovalAction.tsx","hooks/cakeVault/useWithdrawalFeeTimer.ts","utils/getTimePeriods.ts","views/Pools/components/CakeVaultCard/WithdrawalFeeTimer.tsx","views/Pools/components/CakeVaultCard/UnstakingFeeCountdownRow.tsx","views/Pools/components/CakeVaultCard/FeeSummary.tsx","views/Pools/components/CakeVaultCard/VaultStakeModal.tsx","views/Pools/components/CakeVaultCard/VaultCardActions/HasSharesActions.tsx","views/Pools/components/CakeVaultCard/VaultCardActions/VaultStakeActions.tsx","views/Pools/components/CakeVaultCard/VaultCardActions/index.tsx","views/Pools/components/CakeVaultCard/RecentCakeProfitBalance.tsx","views/Pools/components/CakeVaultCard/RecentCakeProfitRow.tsx","views/Pools/components/CakeVaultCard/index.tsx","views/Pools/components/PoolsTable/Cells/BaseCell.tsx","views/Pools/components/PoolsTable/ActionPanel/ActionPanel.tsx","views/Pools/components/PoolsTable/Cells/NameCell.tsx","views/Pools/components/PoolsTable/Cells/EarningsCell.tsx","views/Pools/components/PoolsTable/Cells/AprCell.tsx","views/Pools/components/PoolsTable/Cells/TotalStakedCell.tsx","views/Pools/components/PoolsTable/Cells/EndsInCell.tsx","views/Pools/components/PoolsTable/Cells/ExpandActionCell.tsx","views/Pools/components/PoolsTable/ActionPanel/styles.ts","views/Pools/components/PoolsTable/ActionPanel/Stake.tsx","views/Pools/components/PoolsTable/PoolRow.tsx","views/Pools/components/PoolsTable/PoolsTable.tsx","views/Pools/index.tsx"],"names":["useInoContract","address","web3","useWeb3","useMemo","getInoContract","useIgoContract","getIgoContract","useVestingContract","getVestingContract","useERC20","getBep20Contract","useLPStakingContract","getLpStakingContract","useCake","getCakeContract","useLottery","getLotteryContract","useMasterchef","getMasterchefContract","useSousChef","id","getSouschefContract","useCakeVaultContract","getCakeVaultContract","library","useWeb3React","refEth","useRef","useState","Web3","web3NoAccount","setweb3","useEffect","current","UnlockButton","props","customTitle","useTranslation","t","useAuth","login","logout","onPresentConnectModal","useWalletModal","onClick","fullWidth","approve","lpContract","masterChefContract","account","a","methods","options","ethers","constants","MaxUint256","send","from","approveContract","tokenContract","spender","buyBox","inoContract","rarity","amount","buy","value","getDecimalAmount","buyIgo","igoContract","buyTokens","toString","claimVesting","vestingContract","claimAll","approveWithAmount","stake","pid","BigNumber","times","DEFAULT_TOKEN_DECIMAL","gas","DEFAULT_GAS_LIMIT","on","tx","transactionHash","enterStaking","deposit","sousStake","sousChefContract","decimals","BIG_TEN","pow","sousStakeBnb","unstake","leaveStaking","withdraw","exit","contract","sousUnstake","sousEmergencyUnstake","emergencyWithdraw","claim","getReward","harvest","soushHarvest","soushHarvestBnb","BIG_ZERO","parseInt","process","farms","find","farm","Balance","color","isDisabled","unit","prefix","previousValue","start","end","duration","separator","getBscScanAddressUrl","BASE_BSC_SCAN_URL","getBscScanBlockCountdownUrl","block","useApprove","contractAddress","onApprove","useCallback","useApproveGuildpad","tokenContractAddress","useSousApprove","sousId","earningTokenSymbol","requestedApproval","setRequestedApproval","useToast","toastSuccess","toastError","dispatch","useAppDispatch","handleApprove","updateUserAllowance","symbol","console","error","message","useSousApproveWithAmount","stakingAmount","useVaultApprove","setLastUpdated","cakeVaultContract","cakeContract","useCheckVaultApprovalStatus","isVaultApproved","setIsVaultApproved","useLastUpdated","lastUpdated","allowance","call","response","currentAllowance","gt","checkApprovalStatus","useLotteryApprove","lotteryContract","usePreviousValue","ref","Date","now","setStateLastUpdated","previousLastUpdated","useChainFinder","chainId","usePoolPrice","stakingTokenAddress","rewardTokenAddress","isFetchData","chainName","MoralisWeb3Api","useMoralisWeb3Api","_stakingTokenAddress","_rewardTokenAddress","stakingPrice","setStakingPrice","rewardPrice","setRewardPrice","utils","toChecksumAddress","token","getTokenPrice","chain","result","_stakingTokenPrice","usdPrice","_rewardTokenPrice","fetchData","useFarmPrice","LPPrice","setLPPrice","_token1Address","_token2Address","_lpAddress","lpTotalSupply","getBalanceNumber","totalDeposits","token1Address","token2Address","pairToken","quoteToken","lpAddress","lpAddresses","findPrice","tokenAddress","price","_token1Price","_token2Price","res","getTokenBalances","token_addresses","Promise","all","data","token_address","toLowerCase","_totalToken1InPool","balance","Number","_totalToken2InPool","FetchStatus","useTokenAllowance","allowedAddress","NOT_FETCHED","SUCCESS","FAILED","fetchStatus","balanceState","setBalanceState","fastRefresh","useRefresh","prev","fetchBalance","useTokenBalance","customAccount","MAINNET_CHAIN_ID","acct","getWeb3NoAccount","balanceOf","defaultOptions","hydrate","identity","dehydrate","usePersistState","initialValue","userOptions","localStorageKey","valueFromLS","localStorage","getItem","JSON","parse","setValue","setItem","stringify","usePrevious","React","Latinise","latin_map","τ","Τ","latinise","input","replace","x","useExit","stakingContract","onUnstake","txHash","info","useSousUnstake","enableEmergencyWithdraw","handleUnstake","updateUserStakedBalance","updateUserBalance","updateUserPendingReward","useClaim","onReward","useSousHarvest","isUsingBnb","handleHarvest","StyledLogo","styled","img","PairLogoImg","Flex","getImageUrlFromToken","getAddress","tokens","wbnb","iconExtension","TokenPairImage","primaryToken","secondaryToken","src","alt","useSousStake","handleStake","onStake","useStake","FlexLayout","div","StyledHr","theme","colors","textSubtle","primary","ModalHr","hr","ActionContainer","MGG_active","mediaQueries","sm","xl","ActionTitles","ActionContent","Earned","text","Wrapper","StyledLinkExternal","LinkExternal","DetailsSection","stakingAddress","lpInfoAddress","href","useBlock","useSelector","state","Outer","Box","background","isDark","modal","Inner","Container","PageHeader","children","StyledTokenInput","isWarning","shadows","warning","inset","StyledInput","Input","xs","ModalInput","max","onChange","onSelectMax","isBalanceZero","style","position","margin","alignItems","justifyContent","pattern","inputMode","step","min","placeholder","size","mr","mb","ViewMode","StyledCard","keyframes","MGG_container","isFinished","StyledCardInner","card","isPromotedPool","radii","CakeVaultTokenPairImage","primaryTokenSrc","cake","primarySrc","secondarySrc","StyledCardHeader","earningToken","stakingToken","isAutoVault","isStaking","useContext","ThemeContext","flexDirection","textAlign","width","height","StyledLink","Link","NotEnoughTokensModal","tokenSymbol","onDismiss","useTheme","title","bold","mt","as","external","BASE_EXCHANGE_URL","variant","ml","ModalBody","StakeActionModal","isBnbPool","pool","stakingTokenBalance","stakingTokenPrice","isRemovingStake","isApprove","userData","stakingLimit","stakingTokenContract","pendingTx","setPendingTx","isApproved","setIsApproved","stakeAmount","setStakeAmount","hasReachedStakeLimit","setHasReachedStakedLimit","setPercent","userLimit","minus","stakedBalance","totalStakingTokens","remainingStakeTokens","totalAllowance","getCalculatedStakingLimit","formatNumber","toNumber","fullDecimalStakeAmount","plus","gte","handleConfirmClick","fontSize","maxstake","getFullDisplayBalance","tokensymbol","sliderPercent","percentageOfStakingMax","dividedBy","multipliedBy","amountToStake","handleChangePercent","e","convertedInput","percentage","Math","floor","handleStakeInputChange","currentTarget","addLiquidityUrl","toFixed","marginTop","marginBottom","isLoading","endIcon","spin","disabled","marginRight","marginLeft","StyledFlex","StakeModal","addTokenUrl","isAddTokenDisabled","activeSelect","setActiveSelect","earnedTokenBalance","totalStakedTokens","totalEarningTokens","totalEarnedTokens","pendingReward","temp","tokenPerBlock","totalStaked","rewardRate","useModal","Stake","onPresentStakeAction","handleHarvestConfirm","anchorEl","Boolean","className","window","open","BASE_SWAP_URL","border","borderTop","onMouseEnter","onMouseLeave","eq","target","isWithdrawDisabled","type","StakeAction","isStaked","onPresentStake","useTooltip","placement","targetRef","tooltip","tooltipVisible","isEqualTo","isGreaterThan","Text","CardActions","poolCategory","isComingSoon","earningTokenPrice","PoolCategory","BINANCE","totalEarned","display","textTransform","StakeActions","ClaimAction","MGG_accent2","pr","borderRadius","PoolCard","userDataReady","startBlock","endBlock","accountHasStakedBalance","rewardPerBlock","currentBlock","stakingAddess","getPoolBlockInfo","blocksRemaining","shouldShowBlockCountdown","blocksUntilStart","hasPoolStarted","blocksToDisplay","getPoolApr","getBscScanLink","Grid","GridItem","GridHeaderItem","ApyCalculatorModal","tokenPrice","apr","linkLabel","linkHref","roundingDecimals","compoundFrequency","performanceFee","oneThousandDollarsWorthOfToken","tokenEarnedPerThousand1D","tokenEarnedPerThousandDollarsCompounding","numberOfDays","farmApr","tokenEarnedPerThousand7D","tokenEarnedPerThousand30D","tokenEarnedPerThousand365D","num","getRoi","amountEarned","amountInvested","maxWidth","freq","toLocaleString","fee","AprRow","tooltipContent","getAprData","earningsPercentageToDisplay","apyModalLink","onPresentApyModal","scale","ManualPoolTag","outline","startIcon","CompoundingPoolTag","ExpandedWrapper","ExpandedFooter","useCakeVault","totalCakeInVault","fees","poolContractAddress","cakeVaultContractAddress","getCakeVaultAddress","imageSrc","BASE_URL","isMetaMaskInScope","ethereum","isMetaMask","isManualCakePool","totalStakedTargetRef","totalStakedTooltip","totalStakedTooltipVisible","small","manualCakeTotalMinusAutoVault","getTotalStakedBalance","projectLink","p","registerToken","memo","ExpandableButtonWrapper","Footer","isExpanded","setIsExpanded","manualTooltipText","autoTooltipText","expanded","VaultApprovalAction","useWithdrawalFeeTimer","lastDepositedTime","userShares","withdrawalFeePeriod","secondsRemaining","setSecondsRemaining","hasUnstakingFee","setHasUnstakingFee","currentSeconds","setCurrentSeconds","secondsRemainingCalc","doesUnstakingFeeApply","timerInterval","setInterval","prevSeconds","clearInterval","HOUR_IN_SECONDS","DAY_IN_SECONDS","MONTH_IN_SECONDS","YEAR_IN_SECONDS","getTimePeriods","seconds","delta","abs","timeLeft","years","months","days","hours","minutes","WithdrawalFeeTimer","day","hour","minute","UnstakingFeeCountdownRow","isTableVariant","withdrawalFee","feeAsDecimal","noFeeToPay","shouldShowTimer","FeeSummary","stakingTokenSymbol","feeInCake","parseFloat","StyledButton","Button","VaultStakeModal","stakingMax","pricePerFullShare","percent","cakePriceBusd","usePriceCakeBusd","usdValueStaked","handleWithdrawal","convertedStakeAmount","shareStakeToWithdraw","convertCakeToShares","triggerWithdrawAllThreshold","sharesRemaining","sharesAsBigNumber","lte","withdrawAll","fetchCakeVaultUserData","handleDeposit","minWidth","onUserInput","currencyValue","onValueChanged","name","valueLabel","mx","HasSharesActions","convertSharesToCake","cakeAsBigNumber","cakeAsNumberBalance","stakedDollarValue","onPresentTokenRequired","onPresentUnstake","VaultStakeActions","accountHasSharesStaked","InlineText","CakeVaultCardActions","RecentCakeProfitBalance","cakeToDisplay","dollarValueToDisplay","dateStringToDisplay","RecentCakeProfitCountdownRow","cakeAtLastUserAction","lastUserActionTime","getCakeVaultEarnings","hasAutoEarnings","autoCakeToDisplay","autoUsdToDisplay","lastActionInMs","StyledCardBody","CardBody","CakeVaultCard","showStakedOnly","useMatchBreakpoints","isXl","isVaultUserDataLoading","performanceFeeAsDecimal","RecentCakeProfitRow","VaultCardActions","CardFooter","BaseCell","expandAnimation","md","ChevronDownIcon","toggled","collapseAnimation","css","lg","textDisabled","CardLayout","InfoBox","Pools","location","useLocation","usePools","poolsWithoutAutoVault","pools","userDataLoaded","stakedOnly","numberOfPoolsVisible","setNumberOfPoolsVisible","observerIsSet","setObserverIsSet","loadMoreRef","TABLE","searchQuery","sortOption","isMobile","useMedia","cakePool","map","partition","usePollFarmsData","useFetchCakeVault","useFetchPublicPoolsData","IntersectionObserver","entries","isIntersecting","poolsCurrentlyVisible","rootMargin","threshold","observe","showFinishedPools","pathname","includes","showUpcomingPools","poolsToShow","chosenPools","lowercaseQuery","filter","poolsToSort","orderBy","sortPools","slice","cardLayout","useRouteMatch","path","url","isExact","setFetchData","mggPool","isMain","prevStakingPrice","prevRewardPrice","setTimeout","poolApr","tvr","minHeight","padding","flex","borderBottom","Page"],"mappings":"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","file":"static/js/11.24ef3056.chunk.js","sourcesContent":["import { useMemo } from 'react'\nimport useWeb3 from 'hooks/useWeb3'\nimport {\n  getBep20Contract,\n  getCakeContract,\n  getBunnyFactoryContract,\n  getBunnySpecialContract,\n  getPancakeRabbitContract,\n  getProfileContract,\n  getIfoV1Contract,\n  getIfoV2Contract,\n  getLotteryContract,\n  getLotteryTicketContract,\n  getMasterchefContract,\n  getPointCenterIfoContract,\n  getSouschefContract,\n  getClaimRefundContract,\n  getTradingCompetitionContract,\n  getEasterNftContract,\n  getErc721Contract,\n  getCakeVaultContract,\n  getPredictionsContract,\n  getChainlinkOracleContract,\n  getSouschefV2Contract,\n  getLotteryV2Contract,\n  getLpStakingContract,\n  getInoContract,\n  getIgoContract,\n  getVestingContract,\n} from 'utils/contractHelpers'\n\n/**\n * Helper hooks to get specific contracts (by ABI)\n */\n\nexport const useInoContract = (address: string) => {\n  const web3 = useWeb3()\n  return useMemo(() => getInoContract(address, web3), [address, web3])\n}\n\nexport const useIgoContract = (address: string) => {\n  const web3 = useWeb3()\n  return useMemo(() => getIgoContract(address, web3), [address, web3])\n}\n\nexport const useVestingContract = (address: string) => {\n  const web3 = useWeb3()\n  return useMemo(() => getVestingContract(address, web3), [address, web3])\n}\n\nexport const useIfoV1Contract = (address: string) => {\n  const web3 = useWeb3()\n  return useMemo(() => getIfoV1Contract(address, web3), [address, web3])\n}\n\nexport const useIfoV2Contract = (address: string) => {\n  const web3 = useWeb3()\n  return useMemo(() => getIfoV2Contract(address, web3), [address, web3])\n}\n\nexport const useERC20 = (address: string) => {\n  const web3 = useWeb3()\n  return useMemo(() => getBep20Contract(address, web3), [address, web3])\n}\n\nexport const useLPStakingContract = (address: string) => {\n  const web3 = useWeb3()\n  return useMemo(() => getLpStakingContract(address, web3), [address, web3])\n}\n\n/**\n * @see https://docs.openzeppelin.com/contracts/3.x/api/token/erc721\n */\nexport const useERC721 = (address: string) => {\n  const web3 = useWeb3()\n  return useMemo(() => getErc721Contract(address, web3), [address, web3])\n}\n\nexport const useCake = () => {\n  const web3 = useWeb3()\n  return useMemo(() => getCakeContract(web3), [web3])\n}\n\nexport const useBunnyFactory = () => {\n  const web3 = useWeb3()\n  return useMemo(() => getBunnyFactoryContract(web3), [web3])\n}\n\nexport const usePancakeRabbits = () => {\n  const web3 = useWeb3()\n  return useMemo(() => getPancakeRabbitContract(web3), [web3])\n}\n\nexport const useProfile = () => {\n  const web3 = useWeb3()\n  return useMemo(() => getProfileContract(web3), [web3])\n}\n\nexport const useLottery = () => {\n  const web3 = useWeb3()\n  return useMemo(() => getLotteryContract(web3), [web3])\n}\n\nexport const useLotteryTicket = () => {\n  const web3 = useWeb3()\n  return useMemo(() => getLotteryTicketContract(web3), [web3])\n}\n\nexport const useLotteryV2Contract = () => {\n  const web3 = useWeb3()\n  return useMemo(() => getLotteryV2Contract(web3), [web3])\n}\n\nexport const useMasterchef = () => {\n  const web3 = useWeb3()\n  return useMemo(() => getMasterchefContract(web3), [web3])\n}\n\nexport const useSousChef = (id) => {\n  const web3 = useWeb3()\n  return useMemo(() => getSouschefContract(id, web3), [id, web3])\n}\n\nexport const useSousChefV2 = (id) => {\n  const web3 = useWeb3()\n  return useMemo(() => getSouschefV2Contract(id, web3), [id, web3])\n}\n\nexport const usePointCenterIfoContract = () => {\n  const web3 = useWeb3()\n  return useMemo(() => getPointCenterIfoContract(web3), [web3])\n}\n\nexport const useBunnySpecialContract = () => {\n  const web3 = useWeb3()\n  return useMemo(() => getBunnySpecialContract(web3), [web3])\n}\n\nexport const useClaimRefundContract = () => {\n  const web3 = useWeb3()\n  return useMemo(() => getClaimRefundContract(web3), [web3])\n}\n\nexport const useTradingCompetitionContract = () => {\n  const web3 = useWeb3()\n  return useMemo(() => getTradingCompetitionContract(web3), [web3])\n}\n\nexport const useEasterNftContract = () => {\n  const web3 = useWeb3()\n  return useMemo(() => getEasterNftContract(web3), [web3])\n}\n\nexport const useCakeVaultContract = () => {\n  const web3 = useWeb3()\n  return useMemo(() => getCakeVaultContract(web3), [web3])\n}\n\nexport const usePredictionsContract = () => {\n  const web3 = useWeb3()\n  return useMemo(() => getPredictionsContract(web3), [web3])\n}\n\nexport const useChainlinkOracleContract = () => {\n  const web3 = useWeb3()\n  return useMemo(() => getChainlinkOracleContract(web3), [web3])\n}\n","import { useEffect, useState, useRef } from 'react'\nimport Web3 from 'web3'\nimport { useWeb3React } from '@web3-react/core'\nimport web3NoAccount from 'utils/web3'\n\n/**\n * Provides a web3 instance using the provider provided by useWallet\n * with a fallback of an httpProver\n * Recreate web3 instance only if the provider change\n */\nconst useWeb3 = () => {\n  const { library } = useWeb3React()\n  const refEth = useRef(library)\n  const [web3, setweb3] = useState(library ? new Web3(library) : web3NoAccount)\n\n  useEffect(() => {\n    if (library !== refEth.current) {\n      setweb3(library ? new Web3(library) : web3NoAccount)\n      refEth.current = library\n    }\n  }, [library])\n\n  return web3\n}\n\nexport default useWeb3\n","import React from 'react'\nimport { Button, useWalletModal } from '@metagg/mgg-uikit'\nimport useAuth from 'hooks/useAuth'\nimport { useTranslation } from 'contexts/Localization'\n\nconst UnlockButton = (props) => {\n  const { customTitle } = props\n  const { t } = useTranslation()\n  const { login, logout } = useAuth()\n  const { onPresentConnectModal } = useWalletModal(login, logout)\n\n  return (\n    <Button onClick={onPresentConnectModal} {...props} fullWidth>\n      {!customTitle ? 'Connect Wallet' : customTitle}\n    </Button>\n  )\n}\n\nexport default UnlockButton\n","import BigNumber from 'bignumber.js'\nimport { DEFAULT_GAS_LIMIT, DEFAULT_TOKEN_DECIMAL } from 'config'\nimport { ethers } from 'ethers'\nimport { Pair, Token, TokenAmount } from '@pancakeswap-libs/sdk'\nimport { Contract } from 'web3-eth-contract'\nimport { getLpContract, getLpStakingContract, getMasterchefContract } from 'utils/contractHelpers'\nimport farms from 'config/constants/farms'\nimport { getAddress, getCakeAddress } from 'utils/addressHelpers'\nimport tokens from 'config/constants/tokens'\nimport { web3WithArchivedNodeProvider } from './web3'\nimport { getBalanceAmount, getDecimalAmount } from './formatBalance'\nimport { BIG_TEN, BIG_ZERO } from './bigNumber'\nimport { useERC20 } from '../hooks/useContract'\n\nexport const approve = async (lpContract, masterChefContract, account) => {\n  return lpContract.methods\n    .approve(masterChefContract.options.address, ethers.constants.MaxUint256)\n    .send({ from: account })\n}\n\nexport const approveContract = async (tokenContract: Contract, spender: string, account) => {\n  return tokenContract.methods.approve(spender, ethers.constants.MaxUint256).send({ from: account })\n}\n\nexport const buyBox = async (inoContract, rarity, account, amount) => {\n  return inoContract.methods.buy(rarity).send({ from: account, value: getDecimalAmount(amount) })\n}\n\nexport const buyIgo = async (igoContract, account, amount) => {\n  return igoContract.methods.buyTokens(getDecimalAmount(amount).toString()).send({ from: account })\n}\n\nexport const claimVesting = async (vestingContract, account) => {\n  return vestingContract.methods.claimAll().send({ from: account })\n}\n\nexport const approveWithAmount = async (lpContract, masterChefContract, account, amount) => {\n  return lpContract.methods.approve(masterChefContract.options.address, amount).send({ from: account })\n}\n\nexport const stake = async (masterChefContract, pid, amount, account, useV2 = false) => {\n  if (useV2) {\n    return masterChefContract.methods\n      .stake(new BigNumber(amount).times(DEFAULT_TOKEN_DECIMAL).toString())\n      .send({ from: account, gas: DEFAULT_GAS_LIMIT })\n      .on('transactionHash', (tx) => {\n        return tx.transactionHash\n      })\n  }\n  if (pid === 0) {\n    return masterChefContract.methods\n      .enterStaking(new BigNumber(amount).times(DEFAULT_TOKEN_DECIMAL).toString())\n      .send({ from: account, gas: DEFAULT_GAS_LIMIT })\n      .on('transactionHash', (tx) => {\n        return tx.transactionHash\n      })\n  }\n\n  return masterChefContract.methods\n    .deposit(pid, new BigNumber(amount).times(DEFAULT_TOKEN_DECIMAL).toString())\n    .send({ from: account, gas: DEFAULT_GAS_LIMIT })\n    .on('transactionHash', (tx) => {\n      return tx.transactionHash\n    })\n}\n\nexport const sousStake = async (sousChefContract, amount, decimals = 18, account) => {\n  return sousChefContract.methods\n    .deposit(new BigNumber(amount).times(BIG_TEN.pow(decimals)).toString())\n    .send({ from: account, gas: DEFAULT_GAS_LIMIT })\n    .on('transactionHash', (tx) => {\n      return tx.transactionHash\n    })\n}\n\nexport const sousStakeBnb = async (sousChefContract, amount, account) => {\n  return sousChefContract.methods\n    .deposit()\n    .send({\n      from: account,\n      gas: DEFAULT_GAS_LIMIT,\n      value: new BigNumber(amount).times(DEFAULT_TOKEN_DECIMAL).toString(),\n    })\n    .on('transactionHash', (tx) => {\n      return tx.transactionHash\n    })\n}\n\nexport const unstake = async (masterChefContract, pid, amount, account) => {\n  if (pid === 0) {\n    return masterChefContract.methods\n      .leaveStaking(new BigNumber(amount).times(DEFAULT_TOKEN_DECIMAL).toString())\n      .send({ from: account, gas: DEFAULT_GAS_LIMIT })\n      .on('transactionHash', (tx) => {\n        return tx.transactionHash\n      })\n  }\n\n  return masterChefContract.methods\n    .withdraw(pid, new BigNumber(amount).times(DEFAULT_TOKEN_DECIMAL).toString())\n    .send({ from: account, gas: DEFAULT_GAS_LIMIT })\n    .on('transactionHash', (tx) => {\n      return tx.transactionHash\n    })\n}\n\nexport const exit = async (contract: Contract, account) => {\n  return contract.methods\n    .exit()\n    .send({ from: account, gas: DEFAULT_GAS_LIMIT })\n    .on('transactionHash', (tx) => {\n      return tx.transactionHash\n    })\n}\n\nexport const sousUnstake = async (sousChefContract, amount, decimals, account) => {\n  return sousChefContract.methods\n    .withdraw(new BigNumber(amount).times(BIG_TEN.pow(decimals)).toString())\n    .send({ from: account, gas: DEFAULT_GAS_LIMIT })\n    .on('transactionHash', (tx) => {\n      return tx.transactionHash\n    })\n}\n\nexport const sousEmergencyUnstake = async (sousChefContract, account) => {\n  return sousChefContract.methods\n    .emergencyWithdraw()\n    .send({ from: account })\n    .on('transactionHash', (tx) => {\n      return tx.transactionHash\n    })\n}\n\nexport const claim = async (contract, account) => {\n  return contract.methods\n    .getReward()\n    .send({ from: account, gas: DEFAULT_GAS_LIMIT })\n    .on('transactionHash', (tx) => {\n      return tx.transactionHash\n    })\n}\n\nexport const harvest = async (masterChefContract, pid, account) => {\n  if (pid === 0) {\n    return masterChefContract.methods\n      .leaveStaking('0')\n      .send({ from: account, gas: DEFAULT_GAS_LIMIT })\n      .on('transactionHash', (tx) => {\n        return tx.transactionHash\n      })\n  }\n\n  return masterChefContract.methods\n    .deposit(pid, '0')\n    .send({ from: account, gas: DEFAULT_GAS_LIMIT })\n    .on('transactionHash', (tx) => {\n      return tx.transactionHash\n    })\n}\n\nexport const soushHarvest = async (sousChefContract, account) => {\n  return sousChefContract.methods\n    .deposit('0')\n    .send({ from: account, gas: DEFAULT_GAS_LIMIT })\n    .on('transactionHash', (tx) => {\n      return tx.transactionHash\n    })\n}\n\nexport const soushHarvestBnb = async (sousChefContract, account) => {\n  return sousChefContract.methods\n    .deposit()\n    .send({ from: account, gas: DEFAULT_GAS_LIMIT, value: BIG_ZERO })\n    .on('transactionHash', (tx) => {\n      return tx.transactionHash\n    })\n}\n\nconst chainId = parseInt(process.env.REACT_APP_CHAIN_ID, 10)\nconst cakeBnbPid = 251\nconst cakeBnbFarm = farms.find((farm) => farm.pid === cakeBnbPid)\n\n// const CAKE_TOKEN = new Token(chainId, getCakeAddress(), 18)\n// const WBNB_TOKEN = new Token(chainId, tokens.wbnb.address[chainId], 18)\n// const CAKE_BNB_TOKEN = new Token(chainId, getAddress(cakeBnbFarm.lpAddresses), 18)\n//\n// /**\n//  * Returns the total CAKE staked in the CAKE-BNB LP\n//  */\n// export const getUserStakeInCakeBnbLp = async (account: string, block?: number) => {\n//   try {\n//     const masterContract = getMasterchefContract(web3WithArchivedNodeProvider)\n//     const cakeBnbContract = getLpContract(getAddress(cakeBnbFarm.lpAddresses), web3WithArchivedNodeProvider)\n//     const totalSupplyLP = await cakeBnbContract.methods.totalSupply().call(undefined, block)\n//     const reservesLP = await cakeBnbContract.methods.getReserves().call(undefined, block)\n//     const cakeBnbBalance = await masterContract.methods.userInfo(cakeBnbPid, account).call(undefined, block)\n//\n//     const pair: Pair = new Pair(\n//       new TokenAmount(CAKE_TOKEN, reservesLP._reserve0.toString()),\n//       new TokenAmount(WBNB_TOKEN, reservesLP._reserve1.toString()),\n//     )\n//     const cakeLPBalance = pair.getLiquidityValue(\n//       pair.token0,\n//       new TokenAmount(CAKE_BNB_TOKEN, totalSupplyLP.toString()),\n//       new TokenAmount(CAKE_BNB_TOKEN, cakeBnbBalance.amount.toString()),\n//       false,\n//     )\n//\n//     return new BigNumber(cakeLPBalance.toSignificant(18))\n//   } catch (error) {\n//     console.error(`CAKE-BNB LP error: ${error}`)\n//     return BIG_ZERO\n//   }\n// }\n\nexport const getLPStakingDetails = async (stakingAddresses, account: string) => {\n  try {\n    const contract = getLpStakingContract(getAddress(stakingAddresses))\n\n    return {\n      stakedTokens: await contract.methods.balanceOf(account).call(),\n      totalDeposits: await contract.methods.totalSupply().call(),\n      rewardRate: await contract.methods.rewardRate().call(),\n    }\n  } catch (error) {\n    console.error(`LP Staking error: ${error}`)\n    return {\n      totalDeposits: '-',\n    }\n  }\n}\n\n/**\n * Gets the cake staked in the main pool\n */\nexport const getUserStakeInCakePool = async (account: string, block?: number) => {\n  try {\n    const masterContract = getMasterchefContract(web3WithArchivedNodeProvider)\n    const response = await masterContract.methods.userInfo(0, account).call(undefined, block)\n\n    return getBalanceAmount(new BigNumber(response.amount))\n  } catch (error) {\n    console.error('Error getting stake in CAKE pool', error)\n    return BIG_ZERO\n  }\n}\n","import React, { useEffect, useRef } from 'react'\nimport CountUp from 'react-countup'\nimport { Text, TextProps } from '@pancakeswap/uikit'\n\ninterface BalanceProps extends TextProps {\n  value: number\n  decimals?: number\n  unit?: string\n  isDisabled?: boolean\n  prefix?: string\n  onClick?: (event: React.MouseEvent<HTMLElement>) => void\n}\n\nconst Balance: React.FC<BalanceProps> = ({\n  value,\n  color = 'text',\n  decimals = 3,\n  isDisabled = false,\n  unit,\n  prefix,\n  onClick,\n  ...props\n}) => {\n  const previousValue = useRef(0)\n\n  useEffect(() => {\n    previousValue.current = value\n  }, [value])\n  return (\n    <Text color={isDisabled ? 'textDisabled' : color} onClick={onClick} {...props}>\n      {prefix && <span>{prefix}</span>}\n      <CountUp start={previousValue.current} end={value} decimals={decimals} duration={1} separator=\",\" />\n      {unit && <span>{unit}</span>}\n    </Text>\n  )\n}\n\nexport default Balance\n","import { BASE_BSC_SCAN_URL } from 'config'\n\nexport const getExplorerAddressUrl = (address: string) => {\n  return `${BASE_BSC_SCAN_URL}/address/${address}`\n}\n\nexport const getExplorerTransactionUrl = (address: string) => {\n  return `${BASE_BSC_SCAN_URL}/address/${address}`\n}\n\nexport const getBscScanAddressUrl = (address: string) => {\n  return `${BASE_BSC_SCAN_URL}/address/${address}`\n}\n\nexport const getBscScanTransactionUrl = (transactionHash: string) => {\n  return `${BASE_BSC_SCAN_URL}/tx/${transactionHash}`\n}\n\nexport const getBscScanBlockNumberUrl = (block: string | number) => {\n  return `${BASE_BSC_SCAN_URL}/block/${block}`\n}\n\nexport const getBscScanBlockCountdownUrl = (block: string | number) => {\n  return `${BASE_BSC_SCAN_URL}/block/countdown/${block}`\n}\n","import { useCallback, useEffect, useState } from 'react'\nimport { useWeb3React } from '@web3-react/core'\nimport { Contract } from 'web3-eth-contract'\nimport { ethers } from 'ethers'\nimport BigNumber from 'bignumber.js'\nimport { useAppDispatch } from 'state'\nimport { updateUserAllowance } from 'state/actions'\nimport { approve, approveContract, approveWithAmount } from 'utils/callHelpers'\nimport { useTranslation } from 'contexts/Localization'\nimport { useCake, useCakeVaultContract, useERC20, useLottery, useSousChef } from './useContract'\nimport useToast from './useToast'\nimport useLastUpdated from './useLastUpdated'\n\n// Approve a Farm\nexport const useApprove = (lpContract: Contract, contractAddress: Contract) => {\n  const { account } = useWeb3React()\n  const handleApprove = useCallback(async () => {\n    try {\n      return await approve(lpContract, contractAddress, account)\n    } catch (e) {\n      return false\n    }\n  }, [account, lpContract, contractAddress])\n\n  return { onApprove: handleApprove }\n}\n\n// Approve a Guildpad\nexport const useApproveGuildpad = (tokenContractAddress: string, contractAddress: string) => {\n  const { account } = useWeb3React()\n  const tokenContract = useERC20(tokenContractAddress)\n  const handleApprove = useCallback(async () => {\n    try {\n      return await approveContract(tokenContract, contractAddress, account)\n    } catch (e) {\n      return false\n    }\n  }, [account, tokenContract, contractAddress])\n\n  return { onApprove: handleApprove }\n}\n\n// Approve a Pool\nexport const useSousApprove = (lpContract: Contract, sousId, earningTokenSymbol) => {\n  const [requestedApproval, setRequestedApproval] = useState(false)\n  const { toastSuccess, toastError } = useToast()\n  const { t } = useTranslation()\n  const dispatch = useAppDispatch()\n  const { account } = useWeb3React()\n  const sousChefContract = useSousChef(sousId)\n\n  const handleApprove = useCallback(async () => {\n    try {\n      setRequestedApproval(true)\n      const tx = await approve(lpContract, sousChefContract, account)\n      dispatch(updateUserAllowance(sousId, account))\n      if (tx) {\n        toastSuccess(\n          t('Contract Enabled'),\n          t('You can now stake in the %symbol% pool!', { symbol: earningTokenSymbol }),\n        )\n        setRequestedApproval(false)\n      } else {\n        // user rejected tx or didn't go thru\n        toastError(t('Error'), t('Please try again. Confirm the transaction and make sure you are paying enough gas!'))\n        setRequestedApproval(false)\n      }\n    } catch (e) {\n      console.error(e)\n      toastError(t('Error'), e?.message)\n      setRequestedApproval(false)\n    }\n  }, [account, dispatch, lpContract, sousChefContract, sousId, earningTokenSymbol, t, toastError, toastSuccess])\n\n  return { handleApprove, requestedApproval }\n}\n\nexport const useSousApproveWithAmount = (lpContract: Contract, sousId, earningTokenSymbol, stakingAmount) => {\n  const [requestedApproval, setRequestedApproval] = useState(false)\n  const { toastSuccess, toastError } = useToast()\n  const { t } = useTranslation()\n  const dispatch = useAppDispatch()\n  const { account } = useWeb3React()\n  const sousChefContract = useSousChef(sousId)\n\n  const handleApprove = useCallback(async () => {\n    try {\n      setRequestedApproval(true)\n      const tx = await approveWithAmount(lpContract, sousChefContract, account, stakingAmount.toString())\n      dispatch(updateUserAllowance(sousId, account))\n      if (tx) {\n        toastSuccess(\n          t('Contract Enabled'),\n          t('You can now stake in the %symbol% pool!', { symbol: earningTokenSymbol }),\n        )\n        setRequestedApproval(false)\n      } else {\n        // user rejected tx or didn't go thru\n        toastError(t('Error'), t('Please try again. Confirm the transaction and make sure you are paying enough gas!'))\n        setRequestedApproval(false)\n      }\n    } catch (e) {\n      console.error(e)\n      toastError(t('Error'), e?.message)\n      setRequestedApproval(false)\n    }\n  }, [\n    account,\n    dispatch,\n    lpContract,\n    sousChefContract,\n    sousId,\n    earningTokenSymbol,\n    stakingAmount,\n    t,\n    toastError,\n    toastSuccess,\n  ])\n\n  return { handleApprove, requestedApproval }\n}\n\n// Approve CAKE auto pool\nexport const useVaultApprove = (setLastUpdated: () => void) => {\n  const { account } = useWeb3React()\n  const [requestedApproval, setRequestedApproval] = useState(false)\n  const { t } = useTranslation()\n  const { toastSuccess, toastError } = useToast()\n  const cakeVaultContract = useCakeVaultContract()\n  const cakeContract = useCake()\n\n  const handleApprove = () => {\n    cakeContract.methods\n      .approve(cakeVaultContract.options.address, ethers.constants.MaxUint256)\n      .send({ from: account })\n      .on('sending', () => {\n        setRequestedApproval(true)\n      })\n      .on('receipt', () => {\n        toastSuccess(t('Contract Enabled'), t('You can now stake in the %symbol% vault!', { symbol: 'CAKE' }))\n        setLastUpdated()\n        setRequestedApproval(false)\n      })\n      .on('error', (error) => {\n        console.error(error)\n        toastError(t('Error'), t('Please try again. Confirm the transaction and make sure you are paying enough gas!'))\n        setRequestedApproval(false)\n      })\n  }\n\n  return { handleApprove, requestedApproval }\n}\n\nexport const useCheckVaultApprovalStatus = () => {\n  const [isVaultApproved, setIsVaultApproved] = useState(false)\n  const { account } = useWeb3React()\n  const cakeContract = useCake()\n  const cakeVaultContract = useCakeVaultContract()\n  const { lastUpdated, setLastUpdated } = useLastUpdated()\n  useEffect(() => {\n    const checkApprovalStatus = async () => {\n      try {\n        const response = await cakeContract.methods.allowance(account, cakeVaultContract.options.address).call()\n        const currentAllowance = new BigNumber(response)\n        setIsVaultApproved(currentAllowance.gt(0))\n      } catch (error) {\n        setIsVaultApproved(false)\n      }\n    }\n\n    checkApprovalStatus()\n  }, [account, cakeContract, cakeVaultContract, lastUpdated])\n\n  return { isVaultApproved, setLastUpdated }\n}\n\n// Approve the lottery\nexport const useLotteryApprove = () => {\n  const { account } = useWeb3React()\n  const cakeContract = useCake()\n  const lotteryContract = useLottery()\n\n  const handleApprove = useCallback(async () => {\n    try {\n      return await approve(cakeContract, lotteryContract, account)\n    } catch (e) {\n      return false\n    }\n  }, [account, cakeContract, lotteryContract])\n\n  return { onApprove: handleApprove }\n}\n\n// Approve an IFO\nexport const useIfoApprove = (tokenContract: Contract, spenderAddress: string) => {\n  const { account } = useWeb3React()\n  const onApprove = useCallback(async () => {\n    const tx = await tokenContract.methods.approve(spenderAddress, ethers.constants.MaxUint256).send({ from: account })\n    return tx\n  }, [account, spenderAddress, tokenContract])\n\n  return onApprove\n}\n","import { useEffect, useRef } from 'react'\n\n/**\n * Returns the previous value of the given value\n *\n * @see https://reactjs.org/docs/hooks-faq.html#how-to-get-the-previous-props-or-state\n */\nconst usePreviousValue = (value: any) => {\n  const ref = useRef()\n\n  useEffect(() => {\n    ref.current = value\n  })\n\n  return ref.current\n}\n\nexport default usePreviousValue\n","import { useCallback, useState } from 'react'\nimport usePreviousValue from './usePreviousValue'\n\n/**\n * A helper hook to keep track of the time between events\n * Can also be used to force an effect to re-run\n */\nconst useLastUpdated = () => {\n  const [lastUpdated, setStateLastUpdated] = useState(Date.now())\n  const previousLastUpdated = usePreviousValue(lastUpdated)\n\n  const setLastUpdated = useCallback(() => {\n    setStateLastUpdated(Date.now())\n  }, [setStateLastUpdated])\n\n  return { lastUpdated, previousLastUpdated, setLastUpdated }\n}\n\nexport default useLastUpdated\n","const useChainFinder = (chainId: number) => {\n  switch (chainId) {\n    case 1:\n      return 'eth'\n    case 3:\n      return 'ropsten'\n    case 56:\n      return 'bsc'\n    case 97:\n      return 'bsc testnet'\n    default:\n      return 'bsc'\n  }\n}\n\nexport default useChainFinder\n","import { useEffect, useState } from 'react'\nimport { SPARKSWAP_API, API_ASSETS, API_SUMMARY, API_LIQUIDITY, API_LASTPRICE, API_DATA } from 'config'\nimport useWeb3 from 'hooks/useWeb3'\nimport BigNumber from 'bignumber.js/bignumber'\nimport { getBalanceNumber } from 'utils/formatBalance'\nimport { useMoralisWeb3Api } from 'react-moralis'\nimport { useWeb3React } from '@web3-react/core'\nimport useChainFinder from './chainHelpers'\n\nexport const useTokenPrice = (tokenAddress: string) => {\n  const MoralisWeb3Api = useMoralisWeb3Api()\n  const { chainId } = useWeb3React()\n\n  const chainName = useChainFinder(chainId)\n\n  const [tokenPrice, setTokenPrice] = useState(0)\n  const web3 = useWeb3()\n\n  let _tokenAddress\n  try {\n    if (tokenAddress === undefined) throw new Error('Token address undefined')\n    _tokenAddress = web3.utils.toChecksumAddress(tokenAddress)\n  } catch {\n    console.error('Invalid staking and reward address')\n  }\n\n  useEffect(() => {\n    const fetchData = async () => {\n      try {\n        const result = await MoralisWeb3Api.token.getTokenPrice({ chain: chainName, address: _tokenAddress })\n        const _tokenPrice = result.usdPrice\n\n        setTokenPrice(_tokenPrice)\n      } catch (error) {\n        console.error('Unable to fetch data:', error)\n      }\n    }\n\n    fetchData()\n  }, [setTokenPrice, _tokenAddress, MoralisWeb3Api, chainName])\n\n  return { tokenPrice }\n}\n\nexport const usePoolPrice = (stakingTokenAddress: string, rewardTokenAddress: string, isFetchData?: boolean) => {\n  const MoralisWeb3Api = useMoralisWeb3Api()\n  const { chainId } = useWeb3React()\n  let chainName: 'eth' | 'ropsten' | 'bsc' | 'bsc testnet' = 'eth'\n  chainName = useChainFinder(chainId)\n  const [stakingPrice, setStakingPrice] = useState(0)\n  const [rewardPrice, setRewardPrice] = useState(0)\n\n  const web3 = useWeb3()\n  let _stakingTokenAddress\n  let _rewardTokenAddress\n  try {\n    _stakingTokenAddress = web3.utils.toChecksumAddress(stakingTokenAddress)\n    _rewardTokenAddress = web3.utils.toChecksumAddress(rewardTokenAddress)\n  } catch {\n    console.error('Invalid staking and reward address')\n  }\n\n  useEffect(() => {\n    const fetchData = async () => {\n      try {\n        let result\n        result = await MoralisWeb3Api.token.getTokenPrice({ chain: chainName, address: _stakingTokenAddress })\n        const _stakingTokenPrice = result.usdPrice\n\n        result = await MoralisWeb3Api.token.getTokenPrice({ chain: chainName, address: _rewardTokenAddress })\n        const _rewardTokenPrice = result.usdPrice\n\n        setStakingPrice(_stakingTokenPrice)\n        setRewardPrice(_rewardTokenPrice)\n      } catch (error) {\n        console.error('Unable to fetch data:', error)\n      }\n    }\n    if (isFetchData) {\n      fetchData()\n    }\n  }, [\n    setStakingPrice,\n    setRewardPrice,\n    _stakingTokenAddress,\n    _rewardTokenAddress,\n    MoralisWeb3Api,\n    chainName,\n    isFetchData,\n  ])\n\n  return { stakingPrice, rewardPrice }\n}\n\nexport const useFarmPrice = (farm: any, chain: any, isFetchData?: boolean) => {\n  const MoralisWeb3Api = useMoralisWeb3Api()\n  let chainName: 'eth' | 'ropsten' | 'bsc' | 'bsc testnet' = 'eth'\n  chainName = useChainFinder(chain)\n  const [LPPrice, setLPPrice] = useState(0)\n  const [rewardPrice, setRewardPrice] = useState(0)\n  const web3 = useWeb3()\n\n  useEffect(() => {\n    if (!farm) {\n      return\n    }\n    const lpTotalSupply = getBalanceNumber(new BigNumber(farm.totalDeposits ?? 0))\n    const token1Address = farm.token.address[chain]\n    const token2Address = farm.pairToken.address[chain]\n    const rewardTokenAddress = farm.quoteToken.address[chain]\n    const lpAddress = farm.lpAddresses[chain]\n\n    let _token1Address\n    let _token2Address\n    let _rewardTokenAddress\n    let _lpAddress\n    try {\n      _token1Address = web3.utils.toChecksumAddress(token1Address)\n      _token2Address = web3.utils.toChecksumAddress(token2Address)\n      _rewardTokenAddress = web3.utils.toChecksumAddress(rewardTokenAddress)\n      _lpAddress = web3.utils.toChecksumAddress(lpAddress)\n    } catch {\n      console.error('Invalid staking and reward address')\n    }\n\n    const findPrice = async (tokenAddress: string) => {\n      const result = await MoralisWeb3Api.token.getTokenPrice({ chain: chainName, address: tokenAddress })\n      const price = result.usdPrice\n      return price\n    }\n\n    const fetchData = async () => {\n      try {\n        let _totalToken1InPool\n        let _totalToken2InPool\n        // result = await MoralisWeb3Api.token.getTokenPrice({chain: chainName, address: _token1Address})\n        // result = await MoralisWeb3Api.token.getTokenPrice({chain: chainName, address: _token2Address})\n        // result = await MoralisWeb3Api.token.getTokenPrice({chain: chainName, address: _rewardTokenAddress})\n        const _token1Price = findPrice(_token1Address)\n        const _token2Price = findPrice(_token2Address)\n        const _rewardTokenPrice = findPrice(_rewardTokenAddress)\n        const res = MoralisWeb3Api.account.getTokenBalances({\n          chain: chainName,\n          address: _lpAddress,\n          token_addresses: [_token1Address, _token2Address],\n        })\n        const data = await Promise.all([_token1Price, _token2Price, _rewardTokenPrice, res])\n        const result = data[3]\n        if (result[0].token_address.toLowerCase() === _token1Address.toLowerCase()) {\n          _totalToken1InPool = getBalanceNumber(new BigNumber(result[0].balance), Number(result[0].decimals))\n        } else {\n          _totalToken2InPool = getBalanceNumber(new BigNumber(result[0].balance), Number(result[0].decimals))\n        }\n\n        if (result[1].token_address.toLowerCase() === _token1Address.toLowerCase()) {\n          _totalToken1InPool = getBalanceNumber(new BigNumber(result[1].balance), Number(result[1].decimals))\n        } else {\n          _totalToken2InPool = getBalanceNumber(new BigNumber(result[1].balance), Number(result[1].decimals))\n        }\n\n        setLPPrice((_totalToken1InPool * data[0] + _totalToken2InPool * data[1]) / lpTotalSupply)\n        setRewardPrice(data[2])\n      } catch (error) {\n        console.error('Unable to fetch data:', error)\n      }\n    }\n    if (isFetchData) {\n      fetchData()\n    }\n  }, [web3.utils, farm, chain, isFetchData, setLPPrice, setRewardPrice, chainName, MoralisWeb3Api])\n\n  if (!farm) {\n    return { LPPrice: 0, rewardPrice: 0 }\n  }\n\n  return { LPPrice, rewardPrice }\n}\n\nexport default usePoolPrice\n","import { useEffect, useState } from 'react'\nimport BigNumber from 'bignumber.js'\nimport { useWeb3React } from '@web3-react/core'\nimport { getBep20Contract, getCakeContract } from 'utils/contractHelpers'\nimport { BIG_ZERO } from 'utils/bigNumber'\nimport useWeb3 from './useWeb3'\nimport useRefresh from './useRefresh'\nimport useLastUpdated from './useLastUpdated'\nimport { MAINNET_CHAIN_ID } from '../config'\nimport { getWeb3NoAccount } from '../utils/web3'\n\ntype UseTokenBalanceState = {\n  balance: BigNumber\n  fetchStatus: FetchStatus\n}\n\nexport enum FetchStatus {\n  NOT_FETCHED = 'not-fetched',\n  SUCCESS = 'success',\n  FAILED = 'failed',\n}\n\nconst useTokenBalance = (tokenAddress: string, customAccount = '0x0000') => {\n  const { NOT_FETCHED, SUCCESS, FAILED } = FetchStatus\n  const [balanceState, setBalanceState] = useState<UseTokenBalanceState>({\n    balance: BIG_ZERO,\n    fetchStatus: NOT_FETCHED,\n  })\n  const { account, chainId } = useWeb3React()\n  const chain = chainId ? chainId.toString() : MAINNET_CHAIN_ID\n  let acct = account\n  const { fastRefresh } = useRefresh()\n  if (customAccount !== '0x0000') {\n    acct = customAccount\n  }\n  useEffect(() => {\n    const fetchBalance = async () => {\n      const contract = getBep20Contract(tokenAddress, getWeb3NoAccount(chain))\n      try {\n        const res = await contract.methods.balanceOf(acct).call()\n        setBalanceState({ balance: new BigNumber(res), fetchStatus: SUCCESS })\n      } catch (e) {\n        console.error(e)\n        setBalanceState((prev) => ({\n          ...prev,\n          fetchStatus: FAILED,\n        }))\n      }\n    }\n\n    if (acct) {\n      fetchBalance()\n    }\n  }, [acct, chain, tokenAddress, fastRefresh, SUCCESS, FAILED])\n\n  return balanceState\n}\n\nexport const useTokenAllowance = (tokenAddress: string, allowedAddress: string) => {\n  const { NOT_FETCHED, SUCCESS, FAILED } = FetchStatus\n  const [balanceState, setBalanceState] = useState<UseTokenBalanceState>({\n    balance: BIG_ZERO,\n    fetchStatus: NOT_FETCHED,\n  })\n  const { account } = useWeb3React()\n  const { fastRefresh } = useRefresh()\n\n  useEffect(() => {\n    const fetchBalance = async () => {\n      const contract = getBep20Contract(tokenAddress)\n      try {\n        const res = await contract.methods.allowance(account, allowedAddress).call()\n        setBalanceState({ balance: new BigNumber(res), fetchStatus: SUCCESS })\n      } catch (e) {\n        console.error(e)\n        setBalanceState((prev) => ({\n          ...prev,\n          fetchStatus: FAILED,\n        }))\n      }\n    }\n\n    if (account) {\n      fetchBalance()\n    }\n  }, [account, tokenAddress, allowedAddress, fastRefresh, SUCCESS, FAILED])\n\n  return balanceState\n}\n\nexport const useTotalSupply = () => {\n  const { slowRefresh } = useRefresh()\n  const [totalSupply, setTotalSupply] = useState<BigNumber>()\n\n  useEffect(() => {\n    async function fetchTotalSupply() {\n      const cakeContract = getCakeContract()\n      const supply = await cakeContract.methods.totalSupply().call()\n      setTotalSupply(new BigNumber(supply))\n    }\n\n    fetchTotalSupply()\n  }, [slowRefresh])\n\n  return totalSupply\n}\n\nexport const useBurnedBalance = (tokenAddress: string) => {\n  const [balance, setBalance] = useState(BIG_ZERO)\n  const { slowRefresh } = useRefresh()\n\n  useEffect(() => {\n    const fetchBalance = async () => {\n      const contract = getBep20Contract(tokenAddress)\n      const res = await contract.methods.balanceOf('0x000000000000000000000000000000000000dEaD').call()\n      setBalance(new BigNumber(res))\n    }\n\n    fetchBalance()\n  }, [tokenAddress, slowRefresh])\n\n  return balance\n}\n\nexport const useGetBnbBalance = () => {\n  const [balance, setBalance] = useState(BIG_ZERO)\n  const { account } = useWeb3React()\n  const { lastUpdated, setLastUpdated } = useLastUpdated()\n  const web3 = useWeb3()\n\n  useEffect(() => {\n    const fetchBalance = async () => {\n      const walletBalance = await web3.eth.getBalance(account)\n      setBalance(new BigNumber(walletBalance))\n    }\n\n    if (account) {\n      fetchBalance()\n    }\n  }, [account, web3, lastUpdated, setBalance])\n\n  return { balance, refresh: setLastUpdated }\n}\n\nexport default useTokenBalance\n","import identity from 'lodash/identity'\nimport { useEffect, useState } from 'react'\n\ninterface UsePersistStateOptions {\n  localStorageKey: string\n  hydrate?: (value: any) => any\n  dehydrate?: (value: any) => any\n}\n\nconst defaultOptions = {\n  hydrate: identity,\n  dehydrate: identity,\n}\n\n/**\n * Same as \"useState\" but saves the value to local storage each time it changes\n */\nconst usePersistState = (initialValue: any, userOptions: UsePersistStateOptions) => {\n  const { localStorageKey, hydrate, dehydrate } = { ...defaultOptions, ...userOptions }\n  const [value, setValue] = useState(() => {\n    try {\n      const valueFromLS = localStorage.getItem(localStorageKey)\n\n      return valueFromLS ? hydrate(JSON.parse(valueFromLS)) : initialValue\n    } catch (error) {\n      return initialValue\n    }\n  })\n\n  useEffect(() => {\n    localStorage.setItem(localStorageKey, JSON.stringify(dehydrate(value)))\n  }, [value, localStorageKey, dehydrate])\n\n  return [value, setValue]\n}\n\nexport default usePersistState\n","import React, { useRef, useEffect } from 'react'\n\nfunction usePrevious(value) {\n  const ref = React.useRef()\n  useEffect(() => {\n    ref.current = value\n  }, [value])\n  return ref.current\n}\n\nexport default usePrevious\n","export const Latinise = {\n  latin_map: {\n    τ: 't',\n    Τ: 'T',\n  },\n}\n\nexport const latinise = (input: string) => {\n  return input.replace(/[^A-Za-z0-9[\\] ]/g, (x) => Latinise.latin_map[x] || x)\n}\n","import { useCallback } from 'react'\nimport { useWeb3React } from '@web3-react/core'\nimport { useAppDispatch } from 'state'\nimport { updateUserBalance, updateUserPendingReward, updateUserStakedBalance } from 'state/actions'\nimport { exit, sousEmergencyUnstake, sousUnstake, unstake } from 'utils/callHelpers'\nimport { useLPStakingContract, useMasterchef, useSousChef } from './useContract'\n\nexport const useExit = (contract: string) => {\n  const { account } = useWeb3React()\n  const stakingContract = useLPStakingContract(contract)\n\n  const handleUnstake = useCallback(\n    async (amount: string) => {\n      const txHash = await exit(stakingContract, account)\n      console.info(txHash)\n    },\n    [account, stakingContract],\n  )\n\n  return { onUnstake: handleUnstake }\n}\n\nconst useUnstake = (pid: number) => {\n  const { account } = useWeb3React()\n  const masterChefContract = useMasterchef()\n\n  const handleUnstake = useCallback(\n    async (amount: string) => {\n      const txHash = await unstake(masterChefContract, pid, amount, account)\n      console.info(txHash)\n    },\n    [account, masterChefContract, pid],\n  )\n\n  return { onUnstake: handleUnstake }\n}\n\nexport const useSousUnstake = (sousId, enableEmergencyWithdraw = false) => {\n  const dispatch = useAppDispatch()\n  const { account } = useWeb3React()\n  const masterChefContract = useMasterchef()\n  const sousChefContract = useSousChef(sousId)\n\n  const handleUnstake = useCallback(\n    async (amount: string, decimals: number) => {\n      if (sousId === 0) {\n        const txHash = await unstake(masterChefContract, 0, amount, account)\n        console.info(txHash)\n      } else if (enableEmergencyWithdraw) {\n        const txHash = await sousEmergencyUnstake(sousChefContract, account)\n        console.info(txHash)\n      } else {\n        const txHash = await sousUnstake(sousChefContract, amount, decimals, account)\n        console.info(txHash)\n      }\n      dispatch(updateUserStakedBalance(sousId, account))\n      dispatch(updateUserBalance(sousId, account))\n      dispatch(updateUserPendingReward(sousId, account))\n    },\n    [account, dispatch, enableEmergencyWithdraw, masterChefContract, sousChefContract, sousId],\n  )\n\n  return { onUnstake: handleUnstake }\n}\n\nexport default useUnstake\n","import { useCallback } from 'react'\nimport { useWeb3React } from '@web3-react/core'\nimport { useAppDispatch } from 'state'\nimport { updateUserBalance, updateUserPendingReward } from 'state/actions'\nimport { soushHarvest, soushHarvestBnb, harvest, claim } from 'utils/callHelpers'\nimport { useLPStakingContract, useMasterchef, useSousChef } from './useContract'\n\nexport const useClaim = (stakingContract: string) => {\n  const { account } = useWeb3React()\n  const contract = useLPStakingContract(stakingContract)\n\n  const handleClaim = useCallback(async () => {\n    const txHash = await claim(contract, account)\n    return txHash\n  }, [account, contract])\n\n  return { onReward: handleClaim }\n}\n\nexport const useHarvest = (farmPid: number) => {\n  const { account } = useWeb3React()\n  const masterChefContract = useMasterchef()\n\n  const handleHarvest = useCallback(async () => {\n    const txHash = await harvest(masterChefContract, farmPid, account)\n    return txHash\n  }, [account, farmPid, masterChefContract])\n\n  return { onReward: handleHarvest }\n}\n\nexport const useSousHarvest = (sousId, isUsingBnb = false) => {\n  const dispatch = useAppDispatch()\n  const { account } = useWeb3React()\n  const sousChefContract = useSousChef(sousId)\n  const masterChefContract = useMasterchef()\n\n  const handleHarvest = useCallback(async () => {\n    if (sousId === 0) {\n      await harvest(masterChefContract, 0, account)\n    } else if (isUsingBnb) {\n      await soushHarvestBnb(sousChefContract, account)\n    } else {\n      await soushHarvest(sousChefContract, account)\n    }\n    dispatch(updateUserPendingReward(sousId, account))\n    dispatch(updateUserBalance(sousId, account))\n  }, [account, dispatch, isUsingBnb, masterChefContract, sousChefContract, sousId])\n\n  return { onReward: handleHarvest }\n}\n","import React from 'react'\nimport { TokenPairImageProps as UIKitTokenPairImageProps } from '@pancakeswap/uikit'\nimport { Flex } from '@sparkpointio/sparkswap-uikit'\nimport styled from 'styled-components'\nimport tokens from 'config/constants/tokens'\nimport { Token } from 'config/constants/types'\nimport { getAddress } from 'utils/addressHelpers'\n\ninterface TokenPairImageProps extends Omit<UIKitTokenPairImageProps, 'primarySrc' | 'secondarySrc'> {\n  primaryToken: Token\n  secondaryToken: Token\n}\n\nconst StyledLogo = styled.img`\n  width: 50px;\n`\nconst PairLogoImg = styled(Flex)`\n  margin-bottom: 30px;\n  & > * {\n    margin-left: 10px;\n  }\n`\n\nconst getImageUrlFromToken = (token: Token) => {\n  const address = getAddress(token.symbol === 'BNB' ? tokens.wbnb.address : token.address)\n  return `/images/tokens/${address}.${token.iconExtension ?? 'svg'}`\n}\n\nconst TokenPairImage: React.FC<TokenPairImageProps> = ({ primaryToken, secondaryToken }) => {\n  return (\n    <PairLogoImg>\n      <StyledLogo src={getImageUrlFromToken(primaryToken)} alt=\"logo-img\" />\n      <StyledLogo src={getImageUrlFromToken(secondaryToken)} alt=\"logo-img\" />\n    </PairLogoImg>\n  )\n}\n\nexport default TokenPairImage\n","import { useCallback } from 'react'\nimport { useWeb3React } from '@web3-react/core'\nimport { Contract } from 'web3-eth-contract'\nimport { useAppDispatch } from 'state'\nimport { updateUserStakedBalance, updateUserBalance } from 'state/actions'\nimport { stake, sousStake, sousStakeBnb } from 'utils/callHelpers'\nimport { useMasterchef, useSousChef } from './useContract'\n\nconst useStake = (pid: number) => {\n  const { account } = useWeb3React()\n  const masterChefContract = useMasterchef()\n\n  const handleStake = useCallback(\n    async (amount: string, contract: Contract) => {\n      const txHash = await stake(contract ?? masterChefContract, pid, amount, account, !!contract)\n      console.info(txHash)\n    },\n    [account, masterChefContract, pid],\n  )\n\n  return { onStake: handleStake }\n}\n\nexport const useSousStake = (sousId: number, isUsingBnb = false) => {\n  const dispatch = useAppDispatch()\n  const { account } = useWeb3React()\n  const masterChefContract = useMasterchef()\n  const sousChefContract = useSousChef(sousId)\n\n  const handleStake = useCallback(\n    async (amount: string, decimals: number) => {\n      if (sousId === 0) {\n        await stake(masterChefContract, 0, amount, account)\n      } else if (isUsingBnb) {\n        await sousStakeBnb(sousChefContract, amount, account)\n      } else {\n        await sousStake(sousChefContract, amount, decimals, account)\n      }\n      dispatch(updateUserStakedBalance(sousId, account))\n      dispatch(updateUserBalance(sousId, account))\n    },\n    [account, dispatch, isUsingBnb, masterChefContract, sousChefContract, sousId],\n  )\n\n  return { onStake: handleStake }\n}\n\nexport default useStake\n","import styled from 'styled-components'\n\nconst FlexLayout = styled.div`\n  display: flex;\n  justify-content: center;\n  flex-wrap: wrap;\n  & > * {\n    min-width: 280px;\n    max-width: 31.5%;\n    min-height: 500px;\n    height: auto;\n    width: 100%;\n    margin: 0 8px;\n    margin-bottom: 32px;\n  }\n`\n\nexport default FlexLayout\n","import React from 'react'\nimport styled from 'styled-components'\n\nexport default styled.div`\n  background-color: ${({ theme }) => theme.colors.textSubtle};\n  height: 1px;\n  margin: 0 auto 32px;\n  width: 100%;\n`\n\nexport const StyledHr = styled.div`\n  border-style: solid none none none;\n  border-width: 2px;\n  border-color: ${({ theme }) => theme.colors.primary};\n  width: 95%;\n`\n\nexport const ModalHr = styled.hr`\n  border-style: solid none none none;\n  border-width: 2px;\n  border-color: ${({ theme }) => theme.colors.primary};\n  margin-top: 20px;\n  margin-bottom: 20px;\n  width: 100%;\n`\n","import styled from 'styled-components'\n\nexport const ActionContainer = styled.div`\n  padding: 16px;\n  border: 2px solid ${({ theme }) => theme.colors.MGG_active};\n  // border-radius: 16px;\n  flex-grow: 1;\n  flex-basis: 0;\n  margin-bottom: 16px;\n\n  ${({ theme }) => theme.mediaQueries.sm} {\n    margin-left: 12px;\n    margin-right: 12px;\n    margin-bottom: 0;\n    max-height: 100px;\n  }\n\n  ${({ theme }) => theme.mediaQueries.xl} {\n    margin-left: 48px;\n    margin-right: 0;\n    margin-bottom: 0;\n    max-height: 100px;\n  }\n`\n\nexport const ActionTitles = styled.div`\n  display: flex;\n`\n\nexport const ActionContent = styled.div`\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n`\nexport const Earned = styled.div`\n  font-weight: 600;\n  font-size: 20px;\n  color: ${({ theme }) => theme.colors.text};\n`\n","import React from 'react'\nimport { useTranslation } from 'contexts/Localization'\nimport styled from 'styled-components'\nimport { Text, Flex, LinkExternal, Skeleton } from '@pancakeswap/uikit'\n\nexport interface ExpandableSectionProps {\n  stakingAddress?: string\n  lpInfoAddress?: string\n  removed?: boolean\n  totalValueFormatted?: string\n  lpLabel?: string\n  addLiquidityUrl?: string\n}\n\nconst Wrapper = styled.div`\n  margin-top: 24px;\n`\n\nconst StyledLinkExternal = styled(LinkExternal)`\n  font-weight: 400;\n`\n\nconst DetailsSection: React.FC<ExpandableSectionProps> = ({ stakingAddress, lpInfoAddress }) => {\n  const { t } = useTranslation()\n\n  return (\n    <Wrapper>\n      {/* <Flex justifyContent=\"space-between\">\n        <Text>{t('Total Liquidity')}:</Text>\n        {totalValueFormatted ? <Text>{totalValueFormatted}</Text> : <Skeleton width={75} height={25} />}\n      </Flex>\n      {!removed && (\n        <StyledLinkExternal href={addLiquidityUrl}>{t('Get %symbol%', { symbol: lpLabel })}</StyledLinkExternal>\n      )} */}\n      <StyledLinkExternal href={stakingAddress}>View Staking Contract</StyledLinkExternal>\n      {lpInfoAddress && <StyledLinkExternal href={lpInfoAddress}>{t('See Pair Info')}</StyledLinkExternal>}\n    </Wrapper>\n  )\n}\n\nexport default DetailsSection\n","import { useEffect, useRef } from 'react'\nimport { useSelector } from 'react-redux'\nimport { useAppDispatch } from 'state'\nimport { setBlock } from '.'\nimport { State } from '../types'\n\nexport const useBlock = () => {\n  return useSelector((state: State) => state.block)\n}\n\nexport const useInitialBlock = () => {\n  return useSelector((state: State) => state.block.initialBlock)\n}\n","import React from 'react'\nimport styled from 'styled-components'\nimport { Box } from '@pancakeswap/uikit'\nimport Container from '../layout/Container'\n\nconst Outer = styled(Box)<{ background?: string }>`\n  background: ${({ theme, background }) =>\n    theme.isDark ? `linear-gradient(0deg, rgba(43,28,0,1) 5%, rgba(16,16,16,1) 100%)` : theme.colors.modal};\n  // background:  rgb(43,28,0);\n  // background: linear-gradient(0deg, rgba(43,28,0,1) 5%, rgba(16,16,16,1) 100%);\n`\n\nconst Inner = styled(Container)`\n  padding-top: 32px;\n  padding-bottom: 32px;\n`\n\nconst PageHeader: React.FC<{ background?: string }> = ({ background, children, ...props }) => (\n  <Outer background={background} {...props}>\n    <Inner>{children}</Inner>\n  </Outer>\n)\n\nexport default PageHeader\n","import React from 'react'\nimport styled from 'styled-components'\nimport { Button, Flex, Input, InputProps } from '@metagg/mgg-uikit'\nimport { useTranslation } from 'contexts/Localization'\n\ninterface ModalInputProps {\n  max: string\n  symbol: string\n  onSelectMax?: () => void\n  onChange: (e: React.FormEvent<HTMLInputElement>) => void\n  placeholder?: string\n  value: string\n  addLiquidityUrl?: string\n  inputTitle?: string\n  decimals?: number\n}\n\nconst getBoxShadow = ({ isWarning = false, theme }) => {\n  if (isWarning) {\n    return theme.shadows.warning\n  }\n\n  return theme.shadows.inset\n}\n\nconst StyledTokenInput = styled.div<InputProps>`\n  display: flex;\n  flex-direction: column;\n  background-color: transparent;\n  border: 2px solid ${({ theme }) => theme.colors.primary};\n  // box-shadow: ${getBoxShadow};\n  color: ${({ theme }) => theme.colors.text};\n  padding: 8px 16px 8px 0;\n  width: 100%;\n`\n\nconst StyledInput = styled(Input)`\n  box-shadow: none;\n  flex: 1;\n  margin: 0 8px;\n  padding: 0 8px;\n  background: none;\n\n  ${({ theme }) => theme.mediaQueries.xs} {\n    width: 80px;\n  }\n\n  ${({ theme }) => theme.mediaQueries.sm} {\n    width: auto;\n  }\n\n  &:focus:not(:disabled) {\n    box-shadow: none;\n  }\n`\n\n// const StyledErrorMessage = styled(Text)`\n//   position: absolute;\n//   bottom: -22px;\n//\n//   a {\n//     display: inline;\n//   }\n// `\n\nconst ModalInput: React.FC<ModalInputProps> = ({\n  max,\n  // symbol,\n  onChange,\n  onSelectMax,\n  value,\n  // addLiquidityUrl,\n  // inputTitle,\n  decimals = 18,\n}) => {\n  const { t } = useTranslation()\n  const isBalanceZero = max === '0' || !max\n\n  // const displayBalance = (balance: string) => {\n  //   if (isBalanceZero) {\n  //     return '0'\n  //   }\n  //   const balanceBigNumber = new BigNumber(balance)\n  //   if (balanceBigNumber.gt(0) && balanceBigNumber.lt(0.0001)) {\n  //     return balanceBigNumber.toLocaleString()\n  //   }\n  //   return balanceBigNumber.toFixed(3, BigNumber.ROUND_DOWN)\n  // }\n\n  return (\n    <div style={{ position: 'relative', margin: '15px 0px' }}>\n      <StyledTokenInput isWarning={isBalanceZero}>\n        {/* <Flex justifyContent=\"space-between\" pl=\"16px\">\n          <Text fontSize=\"14px\">{inputTitle}</Text>\n        </Flex> */}\n        <Flex alignItems=\"flex-end\" justifyContent=\"space-around\">\n          <StyledInput\n            pattern={`^[0-9]*[.,]?[0-9]{0,${decimals}}$`}\n            inputMode=\"decimal\"\n            step=\"any\"\n            min=\"0\"\n            onChange={onChange}\n            placeholder=\"0\"\n            value={value}\n          />\n          <Button size=\"sm\" onClick={onSelectMax} mr=\"8px\" mb=\"4px\">\n            {t('Max')}\n          </Button>\n          {/* <Text fontSize=\"16px\">{symbol}</Text> */}\n        </Flex>\n      </StyledTokenInput>\n      <Flex>\n        {/* <Text fontSize=\"14px\" color=\"textSubtle\">\n            {t('Available')}: {getFullDisplayBalance}\n          </Text>  */}\n      </Flex>\n      {/* {isBalanceZero && (\n        <StyledErrorMessage fontSize=\"14px\" color=\"failure\">\n          {t('No tokens to stake')}:{' '}\n          <Link fontSize=\"14px\" bold={false} href={addLiquidityUrl} external color=\"failure\">\n            {t('Get %symbol%', { symbol })}\n          </Link>\n        </StyledErrorMessage>\n      )} */}\n    </div>\n  )\n}\n\nexport default ModalInput\n","import React from 'react'\nimport styled from 'styled-components'\nimport { ListViewIcon, CardViewIcon, IconButton } from '@pancakeswap/uikit'\n\nexport enum ViewMode {\n  'TABLE' = 'TABLE',\n  'CARD' = 'CARD',\n}\n\ninterface ToggleViewProps {\n  viewMode: ViewMode\n  onToggle: (mode: ViewMode) => void\n}\n\nconst Container = styled.div`\n  margin-right: 0px;\n  margin-left: -8px;\n\n  ${({ theme }) => theme.mediaQueries.sm} {\n    margin-left: 0;\n    margin-right: 16px;\n  }\n`\n\nconst ToggleView: React.FunctionComponent<ToggleViewProps> = ({ viewMode, onToggle }) => {\n  const handleToggle = (mode: ViewMode) => {\n    if (viewMode !== mode) {\n      onToggle(mode)\n    }\n  }\n\n  return (\n    <Container>\n      <IconButton variant=\"text\" scale=\"sm\" id=\"clickPoolCardView\" onClick={() => handleToggle(ViewMode.CARD)}>\n        <CardViewIcon color={viewMode === ViewMode.CARD ? 'primary' : 'textDisabled'} />\n      </IconButton>\n      <IconButton variant=\"text\" scale=\"sm\" id=\"clickPoolTableView\" onClick={() => handleToggle(ViewMode.TABLE)}>\n        <ListViewIcon color={viewMode === ViewMode.TABLE ? 'primary' : 'textDisabled'} />\n      </IconButton>\n    </Container>\n  )\n}\n\nexport default ToggleView\n","import styled, { css, keyframes } from 'styled-components'\nimport { Card } from '@sparkpointio/sparkswap-uikit'\n\nconst PromotedGradient = keyframes`\n  0% {\n    background-position: 50% 0%;\n  }\n  50% {\n    background-position: 50% 100%;\n  }\n  100% {\n    background-position: 50% 0%;\n  }\n`\n\nexport const StyledCard = styled.div<{ isPromotedPool?: boolean; isFinished?: boolean }>`\n  border: 5px solid ${(props) => props.theme.colors.MGG_active};\n  max-width: 450px;\n  display: flex;\n  flex-direction: column;\n  align-self: baseline;\n  position: relative;\n  justify-content: space-around;\n  background: ${(props) => props.theme.colors.MGG_container};\n  color: ${({ isFinished, theme }) => theme.colors[isFinished ? 'textDisabled' : 'secondary']};\n  ${({ theme }) => theme.mediaQueries.sm} {\n    margin: 0 12px 46px;\n  }\n`\n\nexport const StyledCardInner = styled.div<{ isPromotedPool?: boolean }>`\n  background: ${({ theme }) => theme.card.background};\n\n  // border-radius: ${({ isPromotedPool, theme }) => (isPromotedPool ? '31px' : theme.radii.card)};\n`\n\nexport default StyledCard\n","import React from 'react'\nimport { TokenPairImage, ImageProps } from '@pancakeswap/uikit'\nimport tokens from 'config/constants/tokens'\nimport { getAddress } from 'utils/addressHelpers'\n\nconst CakeVaultTokenPairImage: React.FC<Omit<ImageProps, 'src'>> = (props) => {\n  const primaryTokenSrc = `/images/tokens/${getAddress(tokens.cake.address)}.svg`\n\n  return <TokenPairImage primarySrc={primaryTokenSrc} secondarySrc=\"/images/tokens/autorenew.svg\" {...props} />\n}\n\nexport default CakeVaultTokenPairImage\n","import React, { useContext } from 'react'\nimport { Heading, Text, Flex, Image } from '@sparkpointio/sparkswap-uikit'\nimport styled, { ThemeContext } from 'styled-components'\nimport { useTranslation } from 'contexts/Localization'\nimport { Token } from 'config/constants/types'\nimport TokenPairImage from 'components/TokenPairImage'\nimport CakeVaultTokenPairImage from '../CakeVaultCard/CakeVaultTokenPairImage'\n\nconst Wrapper = styled.div<{ isFinished?: boolean; background?: string }>`\n  border-bottom: 5px solid ${({ theme }) => theme.colors.MGG_active};\n  padding: 24px;\n  svg {\n    margin-right: 4px;\n  }\n`\n//  background: ${({ isFinished, background, theme }) =>\n// isFinished ? theme.colors.backgroundDisabled : theme.colors.gradients[background]};\n// border-radius: ${({ theme, isPromotedPool }) =>\n// isPromotedPool ? '31px 31px 0 0' : `${theme.radii.card} ${theme.radii.card} 0 0`};\nconst StyledCardHeader: React.FC<{\n  earningToken: Token\n  stakingToken: Token\n  isAutoVault?: boolean\n  isFinished?: boolean\n  isStaking?: boolean\n}> = ({ earningToken, stakingToken, isFinished = false, isAutoVault = false, isStaking = false }) => {\n  const { t } = useTranslation()\n  const isCakePool = earningToken.symbol === 'CAKE' && stakingToken.symbol === 'CAKE'\n  // const background = isStaking ? 'bubblegum' : 'cardHeader'\n  const background = 'cardHeader'\n\n  /*\n  const getHeadingPrefix = () => {\n    if (isAutoVault) {\n      // vault\n      return t('Auto')\n    }\n    if (isCakePool) {\n      // manual cake\n      return t('Manual')\n    }\n    // all other pools\n    return t('Earn')\n  }\n*/\n\n  const getCardTitle = () => {\n    if (isAutoVault) {\n      return t('Automatic restaking')\n    }\n    if (isCakePool) {\n      return t(`Stake CAKE to Earn CAKE`)\n    }\n    return t('Stake %symbol%', { symbol: stakingToken.symbol })\n    // return t('Stake %symbol% to Earn SRK', { symbol: stakingToken.symbol } )\n  }\n  const theme = useContext(ThemeContext)\n\n  return (\n    <Wrapper isFinished={isFinished} background={background}>\n      <Flex alignItems=\"center\" justifyContent=\"space-between\">\n        <Flex flexDirection=\"column\" style={{ textAlign: 'left' }}>\n          <Heading color=\"text\" size=\"lg\">\n            {`Stake ${stakingToken.symbol}`} <br />\n            to <br />\n            {`Earn ${earningToken.symbol}`}\n          </Heading>\n        </Flex>\n        {isAutoVault ? (\n          <CakeVaultTokenPairImage width={64} height={64} />\n        ) : (\n          <TokenPairImage primaryToken={stakingToken} secondaryToken={earningToken} width={64} height={64} />\n        )}\n      </Flex>\n    </Wrapper>\n  )\n}\n\nexport default StyledCardHeader\n","import React from 'react'\nimport { useTranslation } from 'contexts/Localization'\nimport styled from 'styled-components'\nimport { Modal, Text, Button, OpenNewIcon, Link } from '@pancakeswap/uikit'\nimport { BASE_EXCHANGE_URL } from 'config'\nimport useTheme from 'hooks/useTheme'\n\ninterface NotEnoughTokensModalProps {\n  tokenSymbol: string\n  onDismiss?: () => void\n}\n\nconst StyledLink = styled(Link)`\n  width: 100%;\n`\n\nconst NotEnoughTokensModal: React.FC<NotEnoughTokensModalProps> = ({ tokenSymbol, onDismiss }) => {\n  const { t } = useTranslation()\n  const { theme } = useTheme()\n\n  return (\n    <Modal title={t('%symbol% required', { symbol: tokenSymbol })} onDismiss={onDismiss}>\n      <Text color=\"failure\" bold>\n        {t('Insufficient %symbol% balance', { symbol: tokenSymbol })}\n      </Text>\n      <Text mt=\"24px\">{t('You’ll need %symbol% to stake in this pool!', { symbol: tokenSymbol })}</Text>\n      <Text>\n        {t('Buy some %symbol%, or make sure your %symbol% isn’t in another pool or LP.', {\n          symbol: tokenSymbol,\n        })}\n      </Text>\n      <Button mt=\"24px\" as=\"a\" external href={BASE_EXCHANGE_URL}>\n        {t('Buy')} {tokenSymbol}\n      </Button>\n      <StyledLink href=\"https://yieldwatch.net\" external>\n        <Button variant=\"secondary\" mt=\"8px\" width=\"100%\">\n          {t('Locate Assets')}\n          <OpenNewIcon color=\"primary\" ml=\"4px\" />\n        </Button>\n      </StyledLink>\n      <Button variant=\"text\" onClick={onDismiss}>\n        {t('Close Window')}\n      </Button>\n    </Modal>\n  )\n}\n\nexport default NotEnoughTokensModal\n","import React, { useEffect, useState, useRef } from 'react'\nimport styled from 'styled-components'\nimport { Slider, BalanceInput, AutoRenewIcon, Link } from '@pancakeswap/uikit'\nimport { Modal, Text, Flex, Image, Button } from '@metagg/mgg-uikit'\nimport { useTranslation } from 'contexts/Localization'\nimport { BASE_EXCHANGE_URL } from 'config'\nimport { useSousStake } from 'hooks/useStake'\nimport { useSousUnstake } from 'hooks/useUnstake'\nimport useTheme from 'hooks/useTheme'\nimport useToast from 'hooks/useToast'\nimport BigNumber from 'bignumber.js'\nimport { useSousApprove, useSousApproveWithAmount } from 'hooks/useApprove'\nimport { useTokenAllowance } from 'hooks/useTokenBalance'\nimport { useERC20 } from 'hooks/useContract'\nimport { getFullDisplayBalance, formatNumber, getDecimalAmount, getBalanceNumber } from 'utils/formatBalance'\nimport { BIG_ZERO } from 'utils/bigNumber'\nimport { Pool } from 'state/types'\nimport ModalInput from 'components/ModalInput'\nimport { getAddress } from 'utils/addressHelpers'\nimport PercentageButton from './PercentageButton'\n\ninterface StakeModalProps {\n  isBnbPool: boolean\n  pool: Pool\n  stakingTokenBalance: BigNumber\n  stakingTokenPrice: number\n  isRemovingStake?: boolean\n  onSelectMax?: () => void\n  onDismiss?: () => void\n  isApprove?: boolean\n}\n\nconst StyledLink = styled(Link)`\n  width: 100%;\n`\n\nconst ModalBody = styled(Flex)`\n  width: 450px;\n  margin-top: -20px;\n  padding: 20px;\n`\nconst StakeActionModal: React.FC<StakeModalProps> = ({\n  isBnbPool,\n  pool,\n  stakingTokenBalance,\n  stakingTokenPrice,\n  isRemovingStake = false,\n  onDismiss,\n  isApprove = false,\n}) => {\n  const { sousId, stakingToken, userData, stakingLimit, earningToken } = pool\n  const approveBtn = useRef(null)\n  const stakingTokenContract = useERC20(stakingToken.address ? getAddress(stakingToken.address) : '')\n  const { t } = useTranslation()\n  const { theme } = useTheme()\n  const { onStake } = useSousStake(sousId, isBnbPool)\n  const { onUnstake } = useSousUnstake(sousId, pool.enableEmergencyWithdraw)\n  const { toastSuccess, toastError } = useToast()\n  const [pendingTx, setPendingTx] = useState(false)\n  // const [approvedTx, setApprovedTx] = useState(false)\n  const [isApproved, setIsApproved] = useState(isApprove)\n  const [stakeAmount, setStakeAmount] = useState('')\n  const [hasReachedStakeLimit, setHasReachedStakedLimit] = useState(false)\n  const [percent, setPercent] = useState(0)\n  const userLimit = stakingLimit.minus(userData.stakedBalance)\n  const totalStakedTokens = userData?.stakedBalance\n    ? getBalanceNumber(new BigNumber(userData.stakedBalance), stakingToken.decimals)\n    : BIG_ZERO\n  const numTotalStaked = totalStakedTokens\n  const totalStakingTokens = userData?.stakingTokenBalance\n    ? getBalanceNumber(new BigNumber(userData.stakingTokenBalance), stakingToken.decimals)\n    : BIG_ZERO\n  const remainingStakeTokens = userData?.stakedBalance\n    ? getBalanceNumber(new BigNumber(pool.stakingLimit.minus(userData.stakedBalance)), stakingToken.decimals)\n    : BIG_ZERO\n  const totalAllowance = useTokenAllowance(getAddress(stakingToken.address), getAddress(pool.contractAddress))\n  const { handleApprove, requestedApproval } = useSousApproveWithAmount(\n    stakingTokenContract,\n    sousId,\n    earningToken.symbol,\n    getDecimalAmount(new BigNumber(stakeAmount), stakingToken.decimals),\n  )\n  const getCalculatedStakingLimit = () => {\n    if (isRemovingStake) {\n      return userData.stakedBalance\n    }\n    return stakingLimit.gt(BIG_ZERO) && stakingTokenBalance.gt(userLimit) ? userLimit : stakingTokenBalance\n  }\n  const usdValueStaked = stakeAmount && formatNumber(new BigNumber(stakeAmount).times(stakingTokenPrice).toNumber())\n\n  useEffect(() => {\n    if (stakingLimit.gt(0) && !isRemovingStake) {\n      const fullDecimalStakeAmount = getDecimalAmount(new BigNumber(stakeAmount), stakingToken.decimals)\n      setHasReachedStakedLimit(fullDecimalStakeAmount.plus(userData.stakedBalance).gt(stakingLimit))\n    }\n    setIsApproved(totalAllowance.balance.gte(getDecimalAmount(new BigNumber(stakeAmount), stakingToken.decimals)))\n  }, [\n    requestedApproval,\n    stakeAmount,\n    stakingLimit,\n    userData,\n    stakingToken,\n    isRemovingStake,\n    totalAllowance,\n    setHasReachedStakedLimit,\n  ])\n\n  const handleStakeInputChange = (input: string) => {\n    if (input) {\n      const convertedInput = getDecimalAmount(new BigNumber(input), stakingToken.decimals)\n      const percentage = Math.floor(convertedInput.dividedBy(getCalculatedStakingLimit()).multipliedBy(100).toNumber())\n      setPercent(Math.min(percentage, 100))\n    } else {\n      setPercent(0)\n    }\n    setStakeAmount(input)\n  }\n\n  const handleChangePercent = (sliderPercent: number) => {\n    if (sliderPercent > 0) {\n      const percentageOfStakingMax = getCalculatedStakingLimit().dividedBy(100).multipliedBy(sliderPercent)\n      const amountToStake = getFullDisplayBalance(percentageOfStakingMax, stakingToken.decimals, stakingToken.decimals)\n      setStakeAmount(amountToStake)\n    } else {\n      setStakeAmount('')\n    }\n    setPercent(sliderPercent)\n  }\n\n  // const handleApproveClick = async () => {\n  //   setApprovedTx(true)\n  // }\n\n  const handleConfirmClick = async () => {\n    setPendingTx(true)\n\n    if (isRemovingStake) {\n      // unstaking\n      try {\n        await onUnstake(stakeAmount, stakingToken.decimals)\n        toastSuccess(\n          `${t('Unstaked')}!`,\n          t('Your %symbol% earnings have also been harvested to your wallet!', {\n            symbol: earningToken.symbol,\n          }),\n        )\n        setPendingTx(false)\n        setIsApproved(false)\n        onDismiss()\n      } catch (e) {\n        toastError(t('Canceled'), t('Please try again and confirm the transaction.'))\n        setPendingTx(false)\n      }\n    } else {\n      try {\n        // staking\n        await onStake(stakeAmount, stakingToken.decimals)\n        toastSuccess(\n          `${t('Staked')}!`,\n          t('Your %symbol% funds have been staked in the pool!', {\n            symbol: stakingToken.symbol,\n          }),\n        )\n        setPendingTx(false)\n        onDismiss()\n      } catch (e) {\n        toastError(t('Canceled'), t('Please try again and confirm the transaction.'))\n        setPendingTx(false)\n      }\n    }\n  }\n\n  return (\n    <Modal title=\"\" onDismiss={onDismiss}>\n      <ModalBody flexDirection=\"column\">\n        {/* {stakingLimit.gt(0) && !isRemovingStake && (\n          <Text color=\"secondary\" bold mb=\"24px\" style={{ textAlign: 'center' }} fontSize=\"16px\">\n            {t('Max stake for this pool: %amount% %token%', {\n              amount: getFullDisplayBalance(stakingLimit, stakingToken.decimals, 0),\n              token: stakingToken.symbol,\n            })}\n          </Text>\n        )} */}\n\n        <Flex justifyContent=\"center\">\n          <Text color=\"textSubtle\" fontSize=\"14px\" mb=\"38px\" mt=\"-48px\" style={{ textAlign: 'center' }}>\n            {t('Maximum stakable amount in this pool: %maxstake% %tokensymbol%', {\n              maxstake: getFullDisplayBalance(stakingLimit, stakingToken.decimals),\n              tokensymbol: pool.stakingToken.symbol,\n            })}\n          </Text>\n        </Flex>\n\n        <Flex alignItems=\"center\" justifyContent=\"space-between\" mb=\"8px\">\n          <Text bold>Stake amount</Text>\n          {/* <Flex alignItems=\"center\">\n            <Image\n              src={`/images/tokens/${getAddress(stakingToken.address)}.png`}\n              width={24}\n              height={24}\n              alt={stakingToken.symbol}\n            />\n            <Text ml=\"4px\" bold>\n              {stakingToken.symbol}\n            </Text>\n          </Flex> */}\n        </Flex>\n        <ModalInput\n          value={stakeAmount}\n          onSelectMax={() => {\n            handleChangePercent(100)\n          }}\n          onChange={(e) => handleStakeInputChange(e.currentTarget.value)}\n          max={getFullDisplayBalance(new BigNumber(userLimit), stakingToken.decimals, 0)}\n          symbol={stakingToken.symbol}\n          addLiquidityUrl=\"\"\n        />\n\n        {/* Fetch and display actual balance */}\n\n        <Text color=\"textSubtle\" fontSize=\"14px\" mb=\"8px\" style={{ textAlign: 'left' }}>\n          Remaining stakable amount: {remainingStakeTokens} {pool.stakingToken.symbol}\n        </Text>\n\n        <div>\n          <Text ml=\"auto\" color=\"textSubtle\" fontSize=\"14px\" mb=\"8px\" style={{ textAlign: 'left' }}>\n            {/* {t('Balance: %balance%', {\n            balance: getFullDisplayBalance(getCalculatedStakingLimit(), stakingToken.decimals),\n          })} */}\n            Balance: {totalStakingTokens.toFixed(4)} {pool.stakingToken.symbol}\n          </Text>\n        </div>\n\n        {/* {hasReachedStakeLimit && (\n          <Text color=\"failure\" fontSize=\"12px\" style={{ textAlign: 'right' }} mt=\"4px\">\n            {t('Maximum total stake: %amount% %token%', {\n              amount: getFullDisplayBalance(new BigNumber(stakingLimit), stakingToken.decimals, 0),\n              token: stakingToken.symbol,\n            })}\n          </Text>\n        )} */}\n        {/* <Flex>\n        <Text ml=\"auto\" color=\"textSubtle\" fontSize=\"12px\" mb=\"8px\" mt=\"-8px\" style={{ textAlign: 'left'}}>\n          {t('Balance: %balance%', {\n            balance: getFullDisplayBalance(getCalculatedStakingLimit(), stakingToken.decimals),\n          })}\n        </Text>\n        </Flex> */}\n        {/* <Slider\n          min={0}\n          max={100}\n          value={percent}\n          onValueChanged={handleChangePercent}\n          name=\"stake\"\n          valueLabel={`${percent}%`}\n          step={1}\n        />\n        <Flex alignItems=\"center\" justifyContent=\"space-between\" mt=\"8px\">\n          <PercentageButton onClick={() => handleChangePercent(25)}>25%</PercentageButton>\n          <PercentageButton onClick={() => handleChangePercent(50)}>50%</PercentageButton>\n          <PercentageButton onClick={() => handleChangePercent(75)}>75%</PercentageButton>\n          <PercentageButton onClick={() => handleChangePercent(100)}>{t('Max')}</PercentageButton>\n        </Flex> */}\n\n        <Flex justifyContent=\"space-between\" marginTop=\"17px\" marginBottom=\"17px\">\n          <Text bold>Approved Tokens</Text>\n          <Text>\n            {getBalanceNumber(totalAllowance.balance, stakingToken.decimals)} {pool.stakingToken.symbol}\n          </Text>\n        </Flex>\n        <Flex style={{ width: '100%' }}>\n          <Button\n            isLoading={pendingTx}\n            // endIcon={pendingTx ? <AutoRenewIcon spin color=\"currentColor\" /> : null}\n            endIcon={requestedApproval ? <AutoRenewIcon spin color=\"currentColor\" /> : null}\n            // onClick={handleApproveClick}\n            // disabled={!stakeAmount || parseFloat(stakeAmount) === 0 || hasReachedStakeLimit || approvedTx}\n            onClick={handleApprove}\n            disabled={!stakeAmount || isApproved}\n            mt=\"24px\"\n            fullWidth\n            marginRight=\"20px\"\n          >\n            Approve\n          </Button>\n          <Button\n            isLoading={pendingTx}\n            endIcon={pendingTx ? <AutoRenewIcon spin color=\"currentColor\" /> : null}\n            onClick={handleConfirmClick}\n            disabled={!stakeAmount || hasReachedStakeLimit || !isApproved}\n            // disabled={!approvedTx}\n            mt=\"24px\"\n            fullWidth\n            marginLeft=\"20px\"\n          >\n            {/* {pendingTx ? t('Depositing') : t('Deposit')} */}\n            {t('Deposit')}\n          </Button>\n        </Flex>\n        {/* {!isRemovingStake && (\n          <StyledLink external href={BASE_EXCHANGE_URL}>\n            <Button fullWidth mt=\"8px\" variant=\"secondary\">\n              {t('Get %symbol%', { symbol: stakingToken.symbol })}\n            </Button>\n          </StyledLink>\n        )} */}\n      </ModalBody>\n    </Modal>\n  )\n}\n\nexport default StakeActionModal\n","import React, { useState } from 'react'\nimport styled from 'styled-components'\nimport { Button, Flex, Link, Modal, Text, useModal } from '@metagg/mgg-uikit'\nimport { Dropdown } from '@sparkpointio/sparkswap-uikit'\nimport { useTranslation } from 'contexts/Localization'\nimport { useSousUnstake } from 'hooks/useUnstake'\nimport { ChevronDown, ChevronUp } from 'react-feather'\nimport useTheme from 'hooks/useTheme'\nimport useToast from 'hooks/useToast'\nimport { useSousHarvest } from 'hooks/useHarvest'\nimport BigNumber from 'bignumber.js'\nimport { formatNumber, getBalanceNumber, getFullDisplayBalance } from 'utils/formatBalance'\nimport useTokenBalance from 'hooks/useTokenBalance'\nimport { Pool } from 'state/types'\nimport { getAddress } from '../../../../../utils/addressHelpers'\nimport { StyledDropdown } from './Styled'\nimport StakeTokenModal from './Stake'\nimport { BASE_SWAP_URL } from '../../../../../config'\n\ninterface StakeModalProps {\n  isBnbPool: boolean\n  pool: Pool\n  stakingTokenBalance: BigNumber\n  stakingTokenPrice: number\n  isRemovingStake?: boolean\n  onDismiss?: () => void\n  addTokenUrl?: string\n}\n\nconst StyledLink = styled(Link)`\n  width: 100%;\n`\nconst StyledFlex = styled(Flex)`\n  justify-content: center;\n\n  & > * {\n    flex: 1;\n    margin: 0px 10px;\n  }\n`\n\nconst StakeModal: React.FC<StakeModalProps> = ({\n  isBnbPool,\n  pool,\n  stakingTokenBalance,\n  stakingTokenPrice,\n  addTokenUrl,\n  isRemovingStake = false,\n  onDismiss,\n}) => {\n  const { sousId, stakingToken, userData, isAddTokenDisabled, earningToken } = pool\n  const { onReward } = useSousHarvest(sousId, isBnbPool)\n  const { onUnstake } = useSousUnstake(sousId, false)\n  const { t } = useTranslation()\n  const { theme } = useTheme()\n  const [activeSelect, setActiveSelect] = useState(false)\n  const { balance: earnedTokenBalance } = useTokenBalance(getAddress(pool.earningToken.address))\n  const { toastSuccess, toastError } = useToast()\n  const totalStakingTokens = userData?.stakingTokenBalance\n    ? getBalanceNumber(new BigNumber(userData.stakingTokenBalance), stakingToken.decimals)\n    : 0\n  const totalStakedTokens = userData?.stakedBalance\n    ? getBalanceNumber(new BigNumber(userData.stakedBalance), stakingToken.decimals)\n    : 0\n  const totalEarningTokens = earnedTokenBalance ? getBalanceNumber(new BigNumber(earnedTokenBalance)) : 0\n  const totalEarnedTokens = userData?.pendingReward ? getBalanceNumber(new BigNumber(userData.pendingReward)) : 0\n  const [pendingTx, setPendingTx] = useState(false)\n  const temp = new BigNumber(pool.tokenPerBlock).times(new BigNumber(userData.stakedBalance).div(pool.totalStaked))\n  const rewardRate = pool?.tokenPerBlock ? getBalanceNumber(temp) : 0\n  const [onPresentStakeAction] = useModal(\n    <StakeTokenModal\n      isBnbPool={isBnbPool}\n      pool={pool}\n      stakingTokenBalance={stakingTokenBalance}\n      stakingTokenPrice={stakingTokenPrice}\n    />,\n  )\n\n  const handleHarvestConfirm = async () => {\n    setPendingTx(true)\n    // harvesting\n    try {\n      await onReward()\n      toastSuccess(\n        `${t('Claimed')}!`,\n        t('Your %symbol% earnings have been sent to your wallet!', { symbol: earningToken.symbol }),\n      )\n      setPendingTx(false)\n      onDismiss()\n    } catch (e) {\n      toastError(t('Error'), t('Please try again. Confirm the transaction and make sure you are paying enough gas!'))\n      console.error(e)\n      setPendingTx(false)\n    }\n  }\n\n  const handleUnstake = async () => {\n    setPendingTx(true)\n    // unstaking\n    try {\n      await onUnstake(\n        getFullDisplayBalance(new BigNumber(userData.stakedBalance), stakingToken.decimals, 18),\n        stakingToken.decimals,\n      )\n      toastSuccess(\n        `${t('Unstaked')}!`,\n        t('Your %symbol% earnings have also been claimed to your wallet!', {\n          symbol: earningToken.symbol,\n        }),\n      )\n      setPendingTx(false)\n      onDismiss()\n    } catch (e) {\n      toastError(t('Canceled'), t('Please try again and confirm the transaction.'))\n      setPendingTx(false)\n    }\n  }\n\n  const [anchorEl, setAnchorEl] = React.useState<null | HTMLElement>(null)\n  const open = Boolean(anchorEl)\n  const handleClick = (event: React.MouseEvent<HTMLButtonElement>) => {\n    setAnchorEl(event.currentTarget)\n  }\n  const handleClose = () => {\n    setAnchorEl(null)\n  }\n\n  return (\n    <Modal title=\"\" onDismiss={onDismiss}>\n      <Flex flexDirection=\"column\" style={{ marginTop: '-50px', width: '550px' }}>\n        <Text fontSize=\"20px\" marginBottom=\"10px\" marginLeft=\"10px\">\n          Account Info\n        </Text>\n        <Text fontSize=\"15px\" marginLeft=\"10px\">\n          Staking, balances & earnings\n        </Text>\n\n        {/* Remove extra add liquidity button component when staking token symbol is equal to earning token symbol */}\n        <StyledFlex marginTop=\"21px\">\n          <Flex flexDirection=\"column\">\n            <Text fontSize=\"24px\">{formatNumber(totalStakingTokens, 2, 5)}</Text>\n            <Text color=\"textSubtle\" marginBottom=\"24px\">\n              {pool.stakingToken.symbol} Tokens\n            </Text>\n            <Button\n              disabled={isAddTokenDisabled}\n              fullWidth\n              className=\"disabled\"\n              onClick={() => {\n                window.open(`${BASE_SWAP_URL}/${pool.stakingToken.address[56]}`, '_blank')\n              }}\n            >\n              Add More\n            </Button>\n          </Flex>\n          {pool.stakingToken.symbol !== pool.earningToken.symbol && (\n            <Flex flexDirection=\"column\">\n              <Text fontSize=\"24px\">{formatNumber(totalEarningTokens, 2, 5)}</Text>\n              <Text color=\"textSubtle\" marginBottom=\"24px\">\n                {pool.earningToken.symbol} Tokens\n              </Text>\n              <Button\n                fullWidth\n                onClick={() => {\n                  window.open(`${BASE_SWAP_URL}/${pool.earningToken.address[56]}`, '_blank')\n                }}\n              >\n                Add More\n              </Button>\n            </Flex>\n          )}\n          <Flex flexDirection=\"column\">\n            <Text fontSize=\"24px\">{formatNumber(totalStakedTokens, 2, 5)}</Text>\n            <Text color=\"textSubtle\" marginBottom=\"24px\">\n              {pool.stakingToken.symbol} Staked\n            </Text>\n            <Button fullWidth onClick={onPresentStakeAction} disabled={pool.isFinished}>\n              Stake Tokens\n            </Button>\n          </Flex>\n        </StyledFlex>\n\n        <StyledFlex>\n          <hr style={{ marginTop: '30px', border: 'none', borderTop: `2px solid ${theme.colors.primary}` }} />\n        </StyledFlex>\n        <StyledFlex marginTop=\"30px\" marginBottom=\"20px\">\n          <Flex flexDirection=\"column\">\n            <Text fontSize=\"24px\">{formatNumber(rewardRate, 2, 10)}</Text>\n            <Text color=\"textSubtle\" fontSize=\"17px\">\n              Your Rate {pool.earningToken.symbol}/block\n            </Text>\n          </Flex>\n          <Flex flexDirection=\"column\">\n            <Text fontSize=\"24px\">{formatNumber(totalEarnedTokens, 2, 5)}</Text>\n            <Text color=\"textSubtle\" fontSize=\"17px\">\n              {pool.earningToken.symbol} Token Earnings\n            </Text>\n          </Flex>\n          <Flex\n            flexDirection=\"column\"\n            mb=\"16px\"\n            marginLeft=\"5px\"\n            onMouseEnter={() => setActiveSelect(true)}\n            onMouseLeave={() => setActiveSelect(false)}\n          >\n            {userData.stakedBalance.eq(0) ? (\n              <Button disabled fullWidth>\n                {' '}\n                Withdraw{' '}\n              </Button>\n            ) : (\n              <Dropdown\n                position=\"top\"\n                target={\n                  // Disable component if total staked tokens is empty\n                  <Button fullWidth variant=\"secondary\" disabled={pool.isWithdrawDisabled}>\n                    <Text>Withdraw</Text> {activeSelect ? <ChevronDown /> : <ChevronUp />}\n                  </Button>\n                }\n              >\n                {/* Disable Claim & Withdraw if no staked tokens */}\n                <Button type=\"button\" disabled={pool.isWithdrawDisabled} fullWidth onClick={handleHarvestConfirm}>\n                  Claim\n                </Button>\n                <Button type=\"button\" disabled={pool.isWithdrawDisabled} onClick={handleUnstake}>\n                  Claim & Withdraw\n                </Button>\n              </Dropdown>\n            )}\n          </Flex>\n        </StyledFlex>\n        {!!pool.isWithdrawDisabled && (\n          <Text className=\"yellow\" fontSize=\"15px\" marginLeft=\"10px\">\n            SRKb and SFUEL Withdrawals and Deposits are locked for 48 hours during launchpad\n          </Text>\n        )}\n      </Flex>\n    </Modal>\n  )\n}\n\nexport default StakeModal\n","import React, { useState } from 'react'\nimport { Skeleton, useTooltip } from '@pancakeswap/uikit'\nimport { Button, Flex, useModal } from '@metagg/mgg-uikit'\nimport BigNumber from 'bignumber.js'\nimport { useTranslation } from 'contexts/Localization'\nimport { getBalanceNumber, getFullDisplayBalance } from 'utils/formatBalance'\nimport { Pool } from 'state/types'\nimport NotEnoughTokensModal from '../Modals/NotEnoughTokensModal'\nimport StakeModal from '../Modals/StakeModal'\nimport { useSousUnstake } from '../../../../../hooks/useUnstake'\nimport useToast from '../../../../../hooks/useToast'\n\ninterface StakeActionsProps {\n  pool: Pool\n  stakingTokenBalance: BigNumber\n  stakedBalance: BigNumber\n  isBnbPool: boolean\n  isStaked: ConstrainBoolean\n  isLoading?: boolean\n}\n\nconst StakeAction: React.FC<StakeActionsProps> = ({\n  pool,\n  stakingTokenBalance,\n  stakedBalance,\n  isBnbPool,\n  isStaked,\n  isLoading = false,\n}) => {\n  const { stakingToken, stakingTokenPrice, stakingLimit, isFinished, userData } = pool\n  const { t } = useTranslation()\n  const stakedTokenBalance = getBalanceNumber(stakedBalance, stakingToken.decimals)\n  const [pendingTx, setPendingTx] = useState(false)\n  const { toastSuccess, toastError } = useToast()\n  const { onUnstake } = useSousUnstake(pool.sousId, false)\n  const stakedTokenDollarBalance = getBalanceNumber(\n    stakedBalance.multipliedBy(stakingTokenPrice),\n    stakingToken.decimals,\n  )\n\n  const [onPresentTokenRequired] = useModal(<NotEnoughTokensModal tokenSymbol={stakingToken.symbol} />)\n\n  const [onPresentStake] = useModal(\n    <StakeModal\n      isBnbPool={isBnbPool}\n      pool={pool}\n      stakingTokenBalance={stakingTokenBalance}\n      stakingTokenPrice={stakingTokenPrice}\n    />,\n  )\n\n  const handleUnstake = async () => {\n    setPendingTx(true)\n    // unstaking\n    try {\n      await onUnstake(\n        getFullDisplayBalance(new BigNumber(userData.stakedBalance), stakingToken.decimals, 18),\n        stakingToken.decimals,\n      )\n      toastSuccess(\n        `${t('Unstaked')}!`,\n        t('Your %symbol% earnings have also been claimed to your wallet!', {\n          symbol: pool.earningToken.symbol,\n        }),\n      )\n      setPendingTx(false)\n    } catch (e) {\n      toastError(t('Canceled'), t('Please try again and confirm the transaction.'))\n      setPendingTx(false)\n    }\n  }\n\n  const { targetRef, tooltip, tooltipVisible } = useTooltip(\n    t('You’ve already staked the maximum amount you can stake in this pool!'),\n    { placement: 'bottom' },\n  )\n\n  const reachStakingLimit = stakingLimit.gt(0) && userData.stakedBalance.gte(stakingLimit)\n\n  const renderStakeAction = () => {\n    // isStaked ? (\n    //   <Flex justifyContent=\"space-between\" alignItems=\"center\">\n    //     <Flex flexDirection=\"column\">\n    //       <>\n    //         <Balance bold fontSize=\"20px\" decimals={3} value={stakedTokenBalance} />\n    //         {stakingTokenPrice !== 0 && (\n    //           <Text fontSize=\"12px\" color=\"textSubtle\">\n    //             <Balance\n    //               fontSize=\"12px\"\n    //               color=\"textSubtle\"\n    //               decimals={2}\n    //               value={stakedTokenDollarBalance}\n    //               prefix=\"~\"\n    //               unit=\" USD\"\n    //             />\n    //           </Text>\n    //         )}\n    //       </>\n    //     </Flex>\n    //     <Flex>\n    //       <IconButton variant=\"secondary\" onClick={onPresentUnstake} mr=\"6px\">\n    //         <MinusIcon color=\"primary\" width=\"24px\" />\n    //       </IconButton>\n    //       {reachStakingLimit ? (\n    //         <span ref={targetRef}>\n    //           <IconButton variant=\"secondary\" disabled>\n    //             <AddIcon color=\"textDisabled\" width=\"24px\" height=\"24px\" />\n    //           </IconButton>\n    //         </span>\n    //       ) : (\n    //         <IconButton\n    //           variant=\"secondary\"\n    //           onClick={stakingTokenBalance.gt(0) ? onPresentStake : onPresentTokenRequired}\n    //           disabled={isFinished}\n    //         >\n    //           <AddIcon color=\"primary\" width=\"24px\" height=\"24px\" />\n    //         </IconButton>\n    //       )}\n    //     </Flex>\n    //     {tooltipVisible && tooltip}\n    //   </Flex>\n    // ) :\n\n    // Reserve function for future use\n    // <Button disabled={isFinished} onClick={stakingTokenBalance.gt(0) ? onPresentStake : onPresentTokenRequired} fullWidth>\n    return (\n      <Button\n        fullWidth\n        disabled={isFinished && stakedBalance.isEqualTo(0)}\n        onClick={isFinished && stakedBalance.isGreaterThan(0) ? handleUnstake : onPresentStake}\n      >\n        {isFinished && stakedBalance.isGreaterThan(0) ? 'Withdraw' : 'Deposit'}\n      </Button>\n    )\n  }\n\n  return (\n    <Flex justifyContent=\"space-between\" alignItems=\"center\">\n      {isLoading ? <Skeleton width=\"100%\" height=\"52px\" /> : renderStakeAction()}\n    </Flex>\n  )\n}\n\nexport default StakeAction\n","import BigNumber from 'bignumber.js'\nimport React from 'react'\nimport styled from 'styled-components'\nimport { BIG_ZERO } from 'utils/bigNumber'\nimport { Flex, Text, Box } from '@pancakeswap/uikit'\nimport { useTranslation } from 'contexts/Localization'\nimport { PoolCategory } from 'config/constants/types'\nimport { Pool } from 'state/types'\nimport { getBalanceNumber, formatNumber } from 'utils/formatBalance'\nimport ApprovalAction from './ApprovalAction'\nimport StakeActions from './StakeActions'\nimport HarvestActions from './HarvestActions'\n\nconst InlineText = styled(Text)`\n  display: inline;\n`\n\nconst StyledFlex = styled(Flex)`\n  & > * {\n    flex: 1;\n    height: 60px;\n  }\n`\n\ninterface CardActionsProps {\n  pool: Pool\n  stakedBalance: BigNumber\n}\n\nconst CardActions: React.FC<CardActionsProps> = ({ pool, stakedBalance }) => {\n  const { sousId, stakingToken, earningToken, harvest, poolCategory, userData, earningTokenPrice, isComingSoon } = pool\n  // getBalanceNumber(stakedBalance, stakingToken.decimals)\n  // Pools using native BNB behave differently than pools using a token\n  const isBnbPool = poolCategory === PoolCategory.BINANCE\n  const { t } = useTranslation()\n  const allowance = userData?.allowance ? new BigNumber(userData.allowance) : BIG_ZERO\n  const stakingTokenBalance = userData?.stakingTokenBalance ? new BigNumber(userData.stakingTokenBalance) : BIG_ZERO\n  const earnings = userData?.pendingReward ? new BigNumber(userData.pendingReward) : BIG_ZERO\n  const needsApproval = !allowance.gt(0) && !isBnbPool\n  const isStaked = stakedBalance.gt(0)\n  const isLoading = !userData\n\n  const totalStaked = userData?.stakedBalance\n    ? getBalanceNumber(new BigNumber(userData.stakedBalance), stakingToken.decimals)\n    : 0\n  const totalEarned = userData?.pendingReward ? getBalanceNumber(new BigNumber(userData.pendingReward)) : 0\n\n  return (\n    <Flex flexDirection=\"column\">\n      <Flex flexDirection=\"column\">\n        {harvest && (\n          <>\n            {/* <Flex justifyContent=\"space-between\">\n              <Box display=\"inline\">\n                <Text color=\"text\" textTransform=\"uppercase\" bold fontSize=\"12px\">\n                <Text color=\"text\" bold fontSize=\"15px\" marginBottom=\"8px\">\n                  {`${stakingToken.symbol} Staked`}\n                </Text>\n              </Box>\n              <Box display=\"inline\">\n                <Text color=\"text\" textTransform=\"uppercase\" bold fontSize=\"12px\">\n                <Text color=\"text\" bold fontSize=\"15px\" marginBottom=\"8px\">\n                  {`${earningToken.symbol} Earned`}\n                </Text>\n              </Box>\n            </Flex> */}\n            <Flex justifyContent=\"space-between\" marginBottom=\"20px\">\n              <Box display=\"inline\">\n                {/* <Text color=\"text\" textTransform=\"uppercase\"  bold fontSize=\"12px\"> */}\n                <Text color=\"text\" textTransform=\"uppercase\" fontSize=\"12px\">\n                  {!isComingSoon && formatNumber(totalStaked, 2, 5)} {isComingSoon && '-'} {stakingToken.symbol}\n                </Text>\n              </Box>\n              <Box display=\"inline\">\n                {/* <Text color=\"text\" textTransform=\"uppercase\" bold fontSize=\"12px\"> */}\n                <Text color=\"text\" textTransform=\"uppercase\" fontSize=\"12px\">\n                  {!isComingSoon && formatNumber(totalEarned, 2, 5)} {isComingSoon && '-'} {earningToken.symbol}\n                </Text>\n              </Box>\n            </Flex>\n          </>\n        )}\n        {/* <Box display=\"inline\">\n          <InlineText color={isStaked ? 'secondary' : 'textSubtle'} textTransform=\"uppercase\" bold fontSize=\"12px\">\n            {isStaked ? stakingToken.symbol : t('Stake')}{' '}\n          </InlineText>\n          <InlineText color={isStaked ? 'textSubtle' : 'secondary'} textTransform=\"uppercase\" bold fontSize=\"12px\">\n            {isStaked ? t('Staked') : `${stakingToken.symbol}`}\n          </InlineText>\n        </Box> */}\n        <StyledFlex justifyContent=\"space-between\" marginTop=\"10px\">\n          <StakeActions\n            isLoading={isLoading}\n            pool={pool}\n            stakingTokenBalance={stakingTokenBalance}\n            stakedBalance={stakedBalance}\n            isBnbPool={isBnbPool}\n            isStaked={isStaked}\n          />\n          {/* <HarvestActions\n              earnings={earnings}\n              earningToken={earningToken}\n              sousId={sousId}\n              earningTokenPrice={earningTokenPrice}\n              isBnbPool={isBnbPool}\n              isLoading={isLoading}\n            /> */}\n        </StyledFlex>\n      </Flex>\n    </Flex>\n  )\n}\n\nexport default CardActions\n","import React, { useContext, useState } from 'react'\nimport { Flex, Text, Button } from '@metagg/mgg-uikit'\nimport BigNumber from 'bignumber.js'\nimport { Pool } from 'state/types'\nimport useToast from 'hooks/useToast'\nimport { useTranslation } from 'contexts/Localization'\nimport { useSousHarvest } from 'hooks/useHarvest'\nimport { ThemeContext } from 'styled-components'\nimport { formatNumber, getBalanceNumber, getFullDisplayBalance } from 'utils/formatBalance'\nimport Balance from 'components/Balance'\nimport {\n  ActionContainer,\n  ActionContent,\n  ActionTitles,\n  Earned,\n} from '../../../Farms/components/FarmTable/Actions/styles'\n\ninterface StakeActionsProps {\n  isBnbPool: boolean\n  pool: Pool\n  stakingTokenBalance: BigNumber\n  stakingTokenPrice: number\n  addTokenUrl?: string\n}\n\nconst ClaimAction: React.FC<StakeActionsProps> = ({\n  isBnbPool,\n  pool,\n  stakingTokenBalance,\n  stakingTokenPrice,\n  addTokenUrl,\n}) => {\n  const { sousId, stakingToken, userData, isAddTokenDisabled, earningToken } = pool\n  const [pendingTx, setPendingTx] = useState(false)\n  const theme = useContext(ThemeContext)\n  const { t } = useTranslation()\n  const { toastSuccess, toastError } = useToast()\n  const { onReward } = useSousHarvest(sousId, isBnbPool)\n  const totalEarnedTokens = userData?.pendingReward ? getBalanceNumber(new BigNumber(userData.pendingReward)) : 0\n  const handleHarvestConfirm = async () => {\n    setPendingTx(true)\n    // harvesting\n    try {\n      await onReward()\n      toastSuccess(\n        `Claimed!`,\n        t('Your %symbol% earnings have been sent to your wallet!', { symbol: earningToken.symbol }),\n      )\n      setPendingTx(false)\n    } catch (e) {\n      toastError('Error, Please try again. Confirm the transaction and make sure you are paying enough gas!')\n      console.error(e)\n      setPendingTx(false)\n    }\n  }\n\n  return (\n    <ActionContainer style={{ margin: '10px 0' }}>\n      <ActionTitles>\n        <Text bold textTransform=\"uppercase\" color={theme.colors.MGG_accent2} fontSize=\"12px\" pr=\"4px\">\n          {earningToken.symbol}\n        </Text>\n        <Text bold textTransform=\"uppercase\" color=\"textSubtle\" fontSize=\"12px\">\n          Earned\n        </Text>\n      </ActionTitles>\n      <ActionContent>\n        <div>\n          <Earned>{formatNumber(totalEarnedTokens, 2, 5)}</Earned>\n        </div>\n        <Button\n          disabled={userData.stakedBalance.eq(0)}\n          onClick={handleHarvestConfirm}\n          style={{ borderRadius: '3px', height: '40px' }}\n          ml=\"4px\"\n        >\n          Claim\n        </Button>\n      </ActionContent>\n    </ActionContainer>\n  )\n}\n\nexport default ClaimAction\n","import BigNumber from 'bignumber.js'\nimport React, { useContext, useEffect, useState } from 'react'\nimport { CardBody, Flex, Text, Link, LinkExternal } from '@sparkpointio/sparkswap-uikit'\nimport { PoolCategory } from 'config/constants/types'\nimport { ThemeContext } from 'styled-components'\nimport UnlockButton from 'components/UnlockButton'\nimport { useTranslation } from 'contexts/Localization'\nimport { BIG_ZERO } from 'utils/bigNumber'\nimport { usePoolPrice } from 'hooks/price'\nimport { getPoolApr } from 'utils/apr'\nimport { getBscScanAddressUrl } from 'utils/bscscan'\nimport { Pool } from 'state/types'\nimport { getBalanceNumber, formatNumber } from 'utils/formatBalance'\nimport { getPoolBlockInfo } from 'views/Pools/helpers'\nimport { useBlock } from 'state/block/hooks'\nimport { getBscScanLink } from 'utils'\nimport DetailsSection from 'views/Farms/components/FarmCard/DetailsSection'\nimport { StyledCard, StyledCardInner } from './StyledCard'\nimport CardFooter from './CardFooter'\nimport StyledCardHeader from './StyledCardHeader'\nimport CardActions from './CardActions'\nimport { getAddress } from '../../../../utils/addressHelpers'\nimport ClaimAction from '../ClaimAction'\n\nconst PoolCard: React.FC<{ pool: Pool; account: string; userDataReady: boolean }> = ({\n  pool,\n  account,\n  userDataReady,\n}) => {\n  const {\n    sousId,\n    stakingToken,\n    earningToken,\n    isFinished,\n    userData,\n    startBlock,\n    endBlock,\n    isComingSoon,\n    poolCategory,\n    stakingTokenPrice,\n  } = pool\n  const { t } = useTranslation()\n  const stakedBalance = userData?.stakedBalance ? new BigNumber(userData.stakedBalance) : BIG_ZERO\n  const accountHasStakedBalance = stakedBalance.gt(0)\n  const theme = useContext(ThemeContext)\n\n  const totalStaked = pool.totalStaked\n    ? getBalanceNumber(new BigNumber(pool.totalStaked.toString()), stakingToken.decimals)\n    : 0\n\n  const rewardPerBlock = pool?.tokenPerBlock\n    ? getBalanceNumber(new BigNumber(pool.tokenPerBlock.toString()), earningToken.decimals)\n    : 0\n\n  const temp = new BigNumber(pool.tokenPerBlock).times(new BigNumber(userData.stakedBalance).div(pool.totalStaked))\n  const rewardRate = pool?.tokenPerBlock ? getBalanceNumber(temp) : 0\n\n  const { currentBlock } = useBlock()\n  const stakingAddess = getAddress(pool.contractAddress)\n  const { shouldShowBlockCountdown, blocksUntilStart, blocksRemaining, hasPoolStarted, blocksToDisplay } =\n    getPoolBlockInfo(pool, currentBlock)\n  const stakingTokenBalance = userData?.stakingTokenBalance ? new BigNumber(userData.stakingTokenBalance) : BIG_ZERO\n  const { stakingPrice, rewardPrice } = usePoolPrice(stakingToken.address[56], earningToken.address[56])\n  const isBnbPool = poolCategory === PoolCategory.BINANCE\n  const apr = getPoolApr(stakingPrice, rewardPrice, totalStaked, rewardPerBlock)\n  return (\n    <StyledCard isFinished={isFinished && sousId !== 0}>\n      <StyledCardHeader\n        isStaking={accountHasStakedBalance}\n        earningToken={earningToken}\n        stakingToken={stakingToken}\n        isFinished={isFinished && sousId !== 0}\n      />\n      <Flex style={{ margin: '24px' }} flexDirection=\"column\" justifyContent=\"space-evenly\">\n        <Flex>\n          <ClaimAction\n            stakingTokenBalance={stakingTokenBalance}\n            isBnbPool={isBnbPool}\n            pool={pool}\n            stakingTokenPrice={stakingTokenPrice}\n          />\n        </Flex>\n        <Flex justifyContent=\"space-between\" style={{ textAlign: 'left' }}>\n          <Text>Duration</Text>\n          <Link external href={getBscScanLink(hasPoolStarted ? endBlock : startBlock, 'countdown')}>\n            <Text color=\"textSubtle\">\n              {!isComingSoon && `${formatNumber(blocksRemaining, 0, 0)}`} {isComingSoon && '-'} blocks\n            </Text>\n          </Link>\n        </Flex>\n\n        {/* <AprRow pool={pool} stakingTokenPrice={stakingTokenPrice} /> */}\n        {/* <Flex justifyContent=\"space-between\" style={{textAlign: 'left'}}>\n            <Text>Total Deposit</Text>\n            <Text>{!isComingSoon && `${ formatNumber(totalStaked) }`} {isComingSoon && '-'} {stakingToken.symbol}</Text>\n          </Flex> */}\n        {/* <Flex justifyContent=\"space-between\" style={{textAlign: 'left'}}>\n              <Text>Reward per block</Text>\n              <Text>{!isComingSoon && rewardPerBlock} {isComingSoon && '-'}</Text>\n          </Flex> */}\n        <Flex justifyContent=\"space-between\" style={{ textAlign: 'left' }}>\n          <Text>{t('Rate')}</Text>\n          <Text>\n            {!isComingSoon && formatNumber(rewardRate, 2, 10)} {isComingSoon && '-'} {pool.earningToken.symbol}/block\n          </Text>\n        </Flex>\n        <Flex mt=\"24px\" flexDirection=\"column\" marginTop=\"10px\">\n          {account ? (\n            <CardActions pool={pool} stakedBalance={stakedBalance} />\n          ) : (\n            <>\n              <UnlockButton />\n            </>\n          )}\n        </Flex>\n        {/* <Text color=\"textSubtle\" fontSize=\"14px\">{t('This will only work on Binance Smart Chain')}</Text> */}\n        {/* <CardFooter pool={pool} account={account} /> */}\n        <DetailsSection stakingAddress={getBscScanAddressUrl(stakingAddess)} />\n      </Flex>\n    </StyledCard>\n  )\n}\n\nexport default PoolCard\n","import React from 'react'\nimport styled from 'styled-components'\nimport { Modal, Text, LinkExternal, Flex, Box } from '@pancakeswap/uikit'\nimport { useTranslation } from 'contexts/Localization'\nimport { tokenEarnedPerThousandDollarsCompounding, getRoi } from 'utils/compoundApyHelpers'\n\ninterface ApyCalculatorModalProps {\n  onDismiss?: () => void\n  tokenPrice: number\n  apr: number\n  linkLabel: string\n  linkHref: string\n  earningTokenSymbol?: string\n  roundingDecimals?: number\n  compoundFrequency?: number\n  performanceFee?: number\n}\n\nconst Grid = styled.div`\n  display: grid;\n  grid-template-columns: repeat(3, auto);\n  grid-template-rows: repeat(4, auto);\n  margin-bottom: 12px;\n`\n\nconst GridItem = styled.div``\n\nconst GridHeaderItem = styled.div`\n  max-width: 180px;\n`\n\nconst ApyCalculatorModal: React.FC<ApyCalculatorModalProps> = ({\n  onDismiss,\n  tokenPrice,\n  apr,\n  linkLabel,\n  linkHref,\n  earningTokenSymbol = 'CAKE',\n  roundingDecimals = 2,\n  compoundFrequency = 1,\n  performanceFee = 0,\n}) => {\n  const { t } = useTranslation()\n  const oneThousandDollarsWorthOfToken = 1000 / tokenPrice\n\n  const tokenEarnedPerThousand1D = tokenEarnedPerThousandDollarsCompounding({\n    numberOfDays: 1,\n    farmApr: apr,\n    tokenPrice,\n    roundingDecimals,\n    compoundFrequency,\n    performanceFee,\n  })\n  const tokenEarnedPerThousand7D = tokenEarnedPerThousandDollarsCompounding({\n    numberOfDays: 7,\n    farmApr: apr,\n    tokenPrice,\n    roundingDecimals,\n    compoundFrequency,\n    performanceFee,\n  })\n  const tokenEarnedPerThousand30D = tokenEarnedPerThousandDollarsCompounding({\n    numberOfDays: 30,\n    farmApr: apr,\n    tokenPrice,\n    roundingDecimals,\n    compoundFrequency,\n    performanceFee,\n  })\n  const tokenEarnedPerThousand365D = tokenEarnedPerThousandDollarsCompounding({\n    numberOfDays: 365,\n    farmApr: apr,\n    tokenPrice,\n    roundingDecimals,\n    compoundFrequency,\n    performanceFee,\n  })\n\n  return (\n    <Modal title={t('ROI')} onDismiss={onDismiss}>\n      <Grid>\n        <GridHeaderItem>\n          <Text fontSize=\"12px\" bold color=\"textSubtle\" textTransform=\"uppercase\" mb=\"12px\">\n            {t('Timeframe')}\n          </Text>\n        </GridHeaderItem>\n        <GridHeaderItem>\n          <Text fontSize=\"12px\" bold color=\"textSubtle\" textTransform=\"uppercase\" mr=\"12px\" ml=\"12px\" mb=\"12px\">\n            {t('ROI')}\n          </Text>\n        </GridHeaderItem>\n        <GridHeaderItem>\n          <Text fontSize=\"12px\" bold color=\"textSubtle\" textTransform=\"uppercase\" mb=\"12px\">\n            {t('%symbol% per $1,000', { symbol: earningTokenSymbol })}\n          </Text>\n        </GridHeaderItem>\n        {/* 1 day row */}\n        <GridItem>\n          <Text>{t('%num%d', { num: 1 })}</Text>\n        </GridItem>\n        <GridItem>\n          <Text mr=\"12px\" ml=\"12px\">\n            {getRoi({ amountEarned: tokenEarnedPerThousand1D, amountInvested: oneThousandDollarsWorthOfToken }).toFixed(\n              roundingDecimals,\n            )}\n            %\n          </Text>\n        </GridItem>\n        <GridItem>\n          <Text>{tokenEarnedPerThousand1D}</Text>\n        </GridItem>\n        {/* 7 day row */}\n        <GridItem>\n          <Text>{t('%num%d', { num: 7 })}</Text>\n        </GridItem>\n        <GridItem>\n          <Text mr=\"12px\" ml=\"12px\">\n            {getRoi({ amountEarned: tokenEarnedPerThousand7D, amountInvested: oneThousandDollarsWorthOfToken }).toFixed(\n              roundingDecimals,\n            )}\n            %\n          </Text>\n        </GridItem>\n        <GridItem>\n          <Text>{tokenEarnedPerThousand7D}</Text>\n        </GridItem>\n        {/* 30 day row */}\n        <GridItem>\n          <Text>{t('%num%d', { num: 30 })}</Text>\n        </GridItem>\n        <GridItem>\n          <Text mr=\"12px\" ml=\"12px\">\n            {getRoi({\n              amountEarned: tokenEarnedPerThousand30D,\n              amountInvested: oneThousandDollarsWorthOfToken,\n            }).toFixed(roundingDecimals)}\n            %\n          </Text>\n        </GridItem>\n        <GridItem>\n          <Text>{tokenEarnedPerThousand30D}</Text>\n        </GridItem>\n        {/* 365 day / APY row */}\n        <GridItem style={{ maxWidth: '180px' }}>\n          <Text>{t('365d(APY)')}</Text>\n        </GridItem>\n        <GridItem>\n          <Text mr=\"12px\" ml=\"12px\">\n            {getRoi({\n              amountEarned: tokenEarnedPerThousand365D,\n              amountInvested: oneThousandDollarsWorthOfToken,\n            }).toFixed(roundingDecimals)}\n            %\n          </Text>\n        </GridItem>\n        <GridItem>\n          <Text>{tokenEarnedPerThousand365D}</Text>\n        </GridItem>\n      </Grid>\n      <Flex justifyContent=\"center\">\n        <Box mb=\"28px\" maxWidth=\"280px\">\n          <Text fontSize=\"12px\" textAlign=\"center\" color=\"textSubtle\">\n            {t(\n              'Calculated based on current rates. Compounding %freq%x daily. Rates are estimates provided for your convenience only, and by no means represent guaranteed returns.',\n              { freq: compoundFrequency.toLocaleString() },\n            )}\n          </Text>\n          {performanceFee > 0 && (\n            <Text mt=\"14px\" fontSize=\"12px\" textAlign=\"center\" color=\"textSubtle\">\n              {t('All estimated rates take into account this pool’s %fee%% performance fee', { fee: performanceFee })}\n            </Text>\n          )}\n        </Box>\n      </Flex>\n      <Flex justifyContent=\"center\">\n        <LinkExternal href={linkHref}>{linkLabel}</LinkExternal>\n      </Flex>\n    </Modal>\n  )\n}\n\nexport default ApyCalculatorModal\n","import React from 'react'\nimport { Flex, TooltipText, IconButton, useModal, CalculateIcon, Skeleton, useTooltip } from '@pancakeswap/uikit'\nimport { useTranslation } from 'contexts/Localization'\nimport Balance from 'components/Balance'\nimport ApyCalculatorModal from 'components/ApyCalculatorModal'\nimport { Pool } from 'state/types'\nimport { BASE_EXCHANGE_URL } from 'config'\nimport { getAprData } from 'views/Pools/helpers'\n\ninterface AprRowProps {\n  pool: Pool\n  performanceFee?: number\n}\n\nconst AprRow: React.FC<AprRowProps> = ({ pool, performanceFee = 0 }) => {\n  const { t } = useTranslation()\n  const { stakingToken, earningToken, isFinished, apr, earningTokenPrice, isAutoVault } = pool\n\n  const tooltipContent = isAutoVault\n    ? t('APY includes compounding, APR doesn’t. This pool’s CAKE is compounded automatically, so we show APY.')\n    : t('This pool’s rewards aren’t compounded automatically, so we show APR')\n\n  const { targetRef, tooltip, tooltipVisible } = useTooltip(tooltipContent, { placement: 'bottom-start' })\n\n  const { apr: earningsPercentageToDisplay, roundingDecimals, compoundFrequency } = getAprData(pool, performanceFee)\n\n  const apyModalLink =\n    stakingToken.address &&\n    `${BASE_EXCHANGE_URL}/#/swap?outputCurrency=${stakingToken.address[process.env.REACT_APP_CHAIN_ID]}`\n\n  const [onPresentApyModal] = useModal(\n    <ApyCalculatorModal\n      tokenPrice={earningTokenPrice}\n      apr={apr}\n      linkLabel={t('Get %symbol%', { symbol: stakingToken.symbol })}\n      linkHref={apyModalLink || BASE_EXCHANGE_URL}\n      earningTokenSymbol={earningToken.symbol}\n      roundingDecimals={roundingDecimals}\n      compoundFrequency={compoundFrequency}\n      performanceFee={performanceFee}\n    />,\n  )\n\n  return (\n    <Flex alignItems=\"center\" justifyContent=\"space-between\">\n      {tooltipVisible && tooltip}\n      <TooltipText ref={targetRef}>{isAutoVault ? `${t('APY')}:` : `${t('APR')}:`}</TooltipText>\n      {isFinished || !apr ? (\n        <Skeleton width=\"82px\" height=\"32px\" />\n      ) : (\n        <Flex alignItems=\"center\">\n          <Balance\n            fontSize=\"16px\"\n            isDisabled={isFinished}\n            value={earningsPercentageToDisplay}\n            decimals={2}\n            unit=\"%\"\n            bold\n          />\n          <IconButton onClick={onPresentApyModal} variant=\"text\" scale=\"sm\">\n            <CalculateIcon color=\"textSubtle\" width=\"18px\" />\n          </IconButton>\n        </Flex>\n      )}\n    </Flex>\n  )\n}\n\nexport default AprRow\n","import React from 'react'\nimport { Tag, VerifiedIcon, CommunityIcon, BinanceIcon, RefreshIcon, AutoRenewIcon, TagProps } from '@pancakeswap/uikit'\nimport { useTranslation } from 'contexts/Localization'\n\nconst CoreTag: React.FC<TagProps> = (props) => {\n  const { t } = useTranslation()\n  return (\n    <Tag variant=\"secondary\" outline startIcon={<VerifiedIcon width=\"18px\" color=\"secondary\" mr=\"4px\" />} {...props}>\n      {t('Core')}\n    </Tag>\n  )\n}\n\nconst CommunityTag: React.FC<TagProps> = (props) => {\n  const { t } = useTranslation()\n  return (\n    <Tag variant=\"failure\" outline startIcon={<CommunityIcon width=\"18px\" color=\"failure\" mr=\"4px\" />} {...props}>\n      {t('Community')}\n    </Tag>\n  )\n}\n\nconst BinanceTag: React.FC<TagProps> = (props) => {\n  return (\n    <Tag variant=\"binance\" outline startIcon={<BinanceIcon width=\"18px\" color=\"secondary\" mr=\"4px\" />} {...props}>\n      Binance\n    </Tag>\n  )\n}\n\nconst DualTag: React.FC<TagProps> = (props) => {\n  const { t } = useTranslation()\n  return (\n    <Tag variant=\"textSubtle\" outline {...props}>\n      {t('Dual')}\n    </Tag>\n  )\n}\n\nconst ManualPoolTag: React.FC<TagProps> = (props) => {\n  const { t } = useTranslation()\n  return (\n    <Tag variant=\"secondary\" outline startIcon={<RefreshIcon width=\"18px\" color=\"secondary\" mr=\"4px\" />} {...props}>\n      {t('Manual')}\n    </Tag>\n  )\n}\n\nconst CompoundingPoolTag: React.FC<TagProps> = (props) => {\n  const { t } = useTranslation()\n  return (\n    <Tag variant=\"success\" outline startIcon={<AutoRenewIcon width=\"18px\" color=\"success\" mr=\"4px\" />} {...props}>\n      {t('Auto')}\n    </Tag>\n  )\n}\n\nexport { CoreTag, CommunityTag, BinanceTag, DualTag, ManualPoolTag, CompoundingPoolTag }\n","import React from 'react'\nimport BigNumber from 'bignumber.js'\nimport styled from 'styled-components'\nimport { getBalanceNumber, getFullDisplayBalance } from 'utils/formatBalance'\nimport { useTranslation } from 'contexts/Localization'\nimport {\n  Flex,\n  MetamaskIcon,\n  Text,\n  TooltipText,\n  LinkExternal,\n  TimerIcon,\n  Skeleton,\n  useTooltip,\n  Button,\n  Link,\n  HelpIcon,\n} from '@pancakeswap/uikit'\nimport { BASE_BSC_SCAN_URL, BASE_URL } from 'config'\nimport { useBlock, useCakeVault } from 'state/hooks'\nimport { Pool } from 'state/types'\nimport { getAddress, getCakeVaultAddress } from 'utils/addressHelpers'\nimport { registerToken } from 'utils/wallet'\nimport { getBscScanBlockCountdownUrl } from 'utils/bscscan'\nimport Balance from 'components/Balance'\nimport { getPoolBlockInfo } from 'views/Pools/helpers'\n\ninterface ExpandedFooterProps {\n  pool: Pool\n  account: string\n}\n\nconst ExpandedWrapper = styled(Flex)`\n  svg {\n    height: 14px;\n    width: 14px;\n  }\n`\n\nconst ExpandedFooter: React.FC<ExpandedFooterProps> = ({ pool, account }) => {\n  const { t } = useTranslation()\n  const { currentBlock } = useBlock()\n  const {\n    totalCakeInVault,\n    fees: { performanceFee },\n  } = useCakeVault()\n\n  const {\n    stakingToken,\n    earningToken,\n    totalStaked,\n    startBlock,\n    endBlock,\n    stakingLimit,\n    contractAddress,\n    sousId,\n    isAutoVault,\n  } = pool\n\n  const tokenAddress = earningToken.address ? getAddress(earningToken.address) : ''\n  const poolContractAddress = getAddress(contractAddress)\n  const cakeVaultContractAddress = getCakeVaultAddress()\n  const imageSrc = `${BASE_URL}/images/tokens/${tokenAddress}.png`\n  const isMetaMaskInScope = !!(window as WindowChain).ethereum?.isMetaMask\n  const isManualCakePool = sousId === 0\n\n  const { shouldShowBlockCountdown, blocksUntilStart, blocksRemaining, hasPoolStarted, blocksToDisplay } =\n    getPoolBlockInfo(pool, currentBlock)\n\n  const { targetRef, tooltip, tooltipVisible } = useTooltip(\n    t('Subtracted automatically from each yield harvest and burned.'),\n    { placement: 'bottom-start' },\n  )\n\n  const getTotalStakedBalance = () => {\n    if (isAutoVault) {\n      return getBalanceNumber(totalCakeInVault, stakingToken.decimals)\n    }\n    if (isManualCakePool) {\n      const manualCakeTotalMinusAutoVault = new BigNumber(totalStaked).minus(totalCakeInVault)\n      return getBalanceNumber(manualCakeTotalMinusAutoVault, stakingToken.decimals)\n    }\n    return getBalanceNumber(totalStaked, stakingToken.decimals)\n  }\n\n  const {\n    targetRef: totalStakedTargetRef,\n    tooltip: totalStakedTooltip,\n    tooltipVisible: totalStakedTooltipVisible,\n  } = useTooltip(t('Total amount of %symbol% staked in this pool', { symbol: stakingToken.symbol }), {\n    placement: 'bottom',\n  })\n\n  return (\n    <ExpandedWrapper flexDirection=\"column\">\n      <Flex mb=\"2px\" justifyContent=\"space-between\" alignItems=\"center\">\n        <Text small>{t('Total staked')}:</Text>\n        <Flex alignItems=\"flex-start\">\n          {totalStaked && totalStaked.gte(0) ? (\n            <>\n              <Balance small value={getTotalStakedBalance()} decimals={0} unit={` ${stakingToken.symbol}`} />\n              <span ref={totalStakedTargetRef}>\n                <HelpIcon color=\"textSubtle\" width=\"20px\" ml=\"6px\" mt=\"4px\" />\n              </span>\n            </>\n          ) : (\n            <Skeleton width=\"90px\" height=\"21px\" />\n          )}\n          {totalStakedTooltipVisible && totalStakedTooltip}\n        </Flex>\n      </Flex>\n      {stakingLimit && stakingLimit.gt(0) && (\n        <Flex mb=\"2px\" justifyContent=\"space-between\">\n          <Text small>{t('Max. stake per user')}:</Text>\n          <Text small>{`${getFullDisplayBalance(stakingLimit, stakingToken.decimals, 0)} ${stakingToken.symbol}`}</Text>\n        </Flex>\n      )}\n      {shouldShowBlockCountdown && (\n        <Flex mb=\"2px\" justifyContent=\"space-between\" alignItems=\"center\">\n          <Text small>{hasPoolStarted ? t('Ends in') : t('Starts in')}:</Text>\n          {blocksRemaining || blocksUntilStart ? (\n            <Flex alignItems=\"center\">\n              <Link external href={getBscScanBlockCountdownUrl(hasPoolStarted ? endBlock : startBlock)}>\n                <Balance small value={blocksToDisplay} decimals={0} color=\"primary\" />\n                <Text small ml=\"4px\" color=\"primary\" textTransform=\"lowercase\">\n                  {t('Blocks')}\n                </Text>\n                <TimerIcon ml=\"4px\" color=\"primary\" />\n              </Link>\n            </Flex>\n          ) : (\n            <Skeleton width=\"54px\" height=\"21px\" />\n          )}\n        </Flex>\n      )}\n      {isAutoVault && (\n        <Flex mb=\"2px\" justifyContent=\"space-between\" alignItems=\"center\">\n          {tooltipVisible && tooltip}\n          <TooltipText ref={targetRef} small>\n            {t('Performance Fee')}\n          </TooltipText>\n          <Flex alignItems=\"center\">\n            <Text ml=\"4px\" small>\n              {performanceFee / 100}%\n            </Text>\n          </Flex>\n        </Flex>\n      )}\n      <Flex mb=\"2px\" justifyContent=\"flex-end\">\n        <LinkExternal href={`https://pancakeswap.info/token/${getAddress(earningToken.address)}`} bold={false} small>\n          {t('Info site')}\n        </LinkExternal>\n      </Flex>\n      <Flex mb=\"2px\" justifyContent=\"flex-end\">\n        <LinkExternal href={earningToken.projectLink} bold={false} small>\n          {t('View Project Site')}\n        </LinkExternal>\n      </Flex>\n      {poolContractAddress && (\n        <Flex mb=\"2px\" justifyContent=\"flex-end\">\n          <LinkExternal\n            href={`${BASE_BSC_SCAN_URL}/address/${isAutoVault ? cakeVaultContractAddress : poolContractAddress}`}\n            bold={false}\n            small\n          >\n            {t('View Contract')}\n          </LinkExternal>\n        </Flex>\n      )}\n      {account && isMetaMaskInScope && tokenAddress && (\n        <Flex justifyContent=\"flex-end\">\n          <Button\n            variant=\"text\"\n            p=\"0\"\n            height=\"auto\"\n            onClick={() => registerToken(tokenAddress, earningToken.symbol, earningToken.decimals, imageSrc)}\n          >\n            <Text color=\"primary\" fontSize=\"14px\">\n              {t('Add to Metamask')}\n            </Text>\n            <MetamaskIcon ml=\"4px\" />\n          </Button>\n        </Flex>\n      )}\n    </ExpandedWrapper>\n  )\n}\n\nexport default React.memo(ExpandedFooter)\n","import React, { useState } from 'react'\nimport BigNumber from 'bignumber.js'\nimport styled from 'styled-components'\nimport { useTranslation } from 'contexts/Localization'\nimport { Flex, CardFooter, ExpandableLabel, HelpIcon, useTooltip } from '@pancakeswap/uikit'\nimport { Pool } from 'state/types'\nimport { CompoundingPoolTag, ManualPoolTag } from 'components/Tags'\nimport ExpandedFooter from './ExpandedFooter'\n\ninterface FooterProps {\n  pool: Pool\n  account: string\n  totalCakeInVault?: BigNumber\n}\n\nconst ExpandableButtonWrapper = styled(Flex)`\n  align-items: center;\n  justify-content: space-between;\n  button {\n    padding: 0;\n  }\n`\n\nconst Footer: React.FC<FooterProps> = ({ pool, account }) => {\n  const { isAutoVault } = pool\n  const { t } = useTranslation()\n  const [isExpanded, setIsExpanded] = useState(false)\n\n  const manualTooltipText = t('You must harvest and compound your earnings from this pool manually.')\n  const autoTooltipText = t(\n    'Any funds you stake in this pool will be automagically harvested and restaked (compounded) for you.',\n  )\n\n  const { targetRef, tooltip, tooltipVisible } = useTooltip(isAutoVault ? autoTooltipText : manualTooltipText, {\n    placement: 'bottom',\n  })\n\n  return (\n    <CardFooter>\n      <ExpandableButtonWrapper>\n        <Flex alignItems=\"center\">\n          {isAutoVault ? <CompoundingPoolTag /> : <ManualPoolTag />}\n          {tooltipVisible && tooltip}\n          <Flex ref={targetRef}>\n            <HelpIcon ml=\"4px\" width=\"20px\" height=\"20px\" color=\"textSubtle\" />\n          </Flex>\n        </Flex>\n        <ExpandableLabel expanded={isExpanded} onClick={() => setIsExpanded(!isExpanded)}>\n          {isExpanded ? t('Hide') : t('Details')}\n        </ExpandableLabel>\n      </ExpandableButtonWrapper>\n      {isExpanded && <ExpandedFooter pool={pool} account={account} />}\n    </CardFooter>\n  )\n}\n\nexport default Footer\n","import React from 'react'\nimport { Button, AutoRenewIcon, Skeleton } from '@pancakeswap/uikit'\nimport { useTranslation } from 'contexts/Localization'\nimport { useVaultApprove } from 'hooks/useApprove'\n\ninterface ApprovalActionProps {\n  setLastUpdated: () => void\n  isLoading?: boolean\n}\n\nconst VaultApprovalAction: React.FC<ApprovalActionProps> = ({ isLoading = false, setLastUpdated }) => {\n  const { t } = useTranslation()\n\n  const { handleApprove, requestedApproval } = useVaultApprove(setLastUpdated)\n\n  return (\n    <>\n      {isLoading ? (\n        <Skeleton width=\"100%\" height=\"52px\" />\n      ) : (\n        <Button\n          isLoading={requestedApproval}\n          endIcon={requestedApproval ? <AutoRenewIcon spin color=\"currentColor\" /> : null}\n          disabled={requestedApproval}\n          onClick={handleApprove}\n          width=\"100%\"\n        >\n          {t('Enable')}\n        </Button>\n      )}\n    </>\n  )\n}\n\nexport default VaultApprovalAction\n","import BigNumber from 'bignumber.js'\nimport { useEffect, useState } from 'react'\n\nconst useWithdrawalFeeTimer = (lastDepositedTime: number, userShares: BigNumber, withdrawalFeePeriod = 259200) => {\n  const [secondsRemaining, setSecondsRemaining] = useState(null)\n  const [hasUnstakingFee, setHasUnstakingFee] = useState(false)\n  const [currentSeconds, setCurrentSeconds] = useState(Math.floor(Date.now() / 1000))\n\n  useEffect(() => {\n    const feeEndTime = lastDepositedTime + withdrawalFeePeriod\n    const secondsRemainingCalc = feeEndTime - currentSeconds\n    const doesUnstakingFeeApply = userShares.gt(0) && secondsRemainingCalc > 0\n\n    const tick = () => {\n      setCurrentSeconds((prevSeconds) => prevSeconds + 1)\n    }\n    const timerInterval = setInterval(() => tick(), 1000)\n    if (doesUnstakingFeeApply) {\n      setSecondsRemaining(secondsRemainingCalc)\n      setHasUnstakingFee(true)\n    } else {\n      setHasUnstakingFee(false)\n      clearInterval(timerInterval)\n    }\n\n    return () => clearInterval(timerInterval)\n  }, [lastDepositedTime, withdrawalFeePeriod, setSecondsRemaining, currentSeconds, userShares])\n\n  return { hasUnstakingFee, secondsRemaining }\n}\n\nexport default useWithdrawalFeeTimer\n","const MINUTE_IN_SECONDS = 60\nconst HOUR_IN_SECONDS = 3600\nconst DAY_IN_SECONDS = 86400\nconst MONTH_IN_SECONDS = 2629800\nconst YEAR_IN_SECONDS = 31557600\n\n/**\n * Format number of seconds into year, month, day, hour, minute, seconds\n *\n * @param seconds\n */\nconst getTimePeriods = (seconds: number) => {\n  let delta = Math.abs(seconds)\n  const timeLeft = {\n    years: 0,\n    months: 0,\n    days: 0,\n    hours: 0,\n    minutes: 0,\n    seconds: 0,\n  }\n\n  if (delta >= YEAR_IN_SECONDS) {\n    timeLeft.years = Math.floor(delta / YEAR_IN_SECONDS)\n    delta -= timeLeft.years * YEAR_IN_SECONDS\n  }\n\n  if (delta >= MONTH_IN_SECONDS) {\n    timeLeft.months = Math.floor(delta / MONTH_IN_SECONDS)\n    delta -= timeLeft.months * MONTH_IN_SECONDS\n  }\n\n  if (delta >= DAY_IN_SECONDS) {\n    timeLeft.days = Math.floor(delta / DAY_IN_SECONDS)\n    delta -= timeLeft.days * DAY_IN_SECONDS\n  }\n\n  if (delta >= HOUR_IN_SECONDS) {\n    timeLeft.hours = Math.floor(delta / HOUR_IN_SECONDS)\n    delta -= timeLeft.hours * HOUR_IN_SECONDS\n  }\n\n  if (delta >= MINUTE_IN_SECONDS) {\n    timeLeft.minutes = Math.floor(delta / MINUTE_IN_SECONDS)\n    delta -= timeLeft.minutes * MINUTE_IN_SECONDS\n  }\n\n  timeLeft.seconds = delta\n\n  return timeLeft\n}\n\nexport default getTimePeriods\n","import React from 'react'\nimport { Text } from '@pancakeswap/uikit'\nimport getTimePeriods from 'utils/getTimePeriods'\nimport { useTranslation } from 'contexts/Localization'\n\nconst WithdrawalFeeTimer: React.FC<{ secondsRemaining: number }> = ({ secondsRemaining }) => {\n  const { t } = useTranslation()\n  const { days, hours, minutes } = getTimePeriods(secondsRemaining)\n\n  return <Text fontSize=\"14px\">{t('%day%d : %hour%h : %minute%m', { day: days, hour: hours, minute: minutes })}</Text>\n}\n\nexport default WithdrawalFeeTimer\n","import React from 'react'\nimport { Flex, Text, TooltipText, useTooltip } from '@pancakeswap/uikit'\nimport { useTranslation } from 'contexts/Localization'\nimport { useWeb3React } from '@web3-react/core'\nimport useWithdrawalFeeTimer from 'hooks/cakeVault/useWithdrawalFeeTimer'\nimport { useCakeVault } from 'state/hooks'\nimport WithdrawalFeeTimer from './WithdrawalFeeTimer'\n\ninterface UnstakingFeeCountdownRowProps {\n  isTableVariant?: boolean\n}\n\nconst UnstakingFeeCountdownRow: React.FC<UnstakingFeeCountdownRowProps> = ({ isTableVariant }) => {\n  const { t } = useTranslation()\n  const { account } = useWeb3React()\n  const {\n    userData: { lastDepositedTime, userShares },\n    fees: { withdrawalFee, withdrawalFeePeriod },\n  } = useCakeVault()\n  const feeAsDecimal = withdrawalFee / 100 || '-'\n  const { targetRef, tooltip, tooltipVisible } = useTooltip(\n    <>\n      <Text bold mb=\"4px\">\n        {t('Unstaking fee: %fee%%', { fee: feeAsDecimal })}\n      </Text>\n      <Text>\n        {t(\n          'Only applies within 3 days of staking. Unstaking after 3 days will not include a fee. Timer resets every time you stake new CAKE in the pool.',\n        )}\n      </Text>\n    </>,\n    { placement: 'bottom-start' },\n  )\n\n  const { secondsRemaining, hasUnstakingFee } = useWithdrawalFeeTimer(\n    parseInt(lastDepositedTime, 10),\n    userShares,\n    withdrawalFeePeriod,\n  )\n\n  // The user has made a deposit, but has no fee\n  const noFeeToPay = lastDepositedTime && !hasUnstakingFee && userShares.gt(0)\n\n  // Show the timer if a user is connected, has deposited, and has an unstaking fee\n  const shouldShowTimer = account && lastDepositedTime && hasUnstakingFee\n\n  const getRowText = () => {\n    if (noFeeToPay) {\n      return t('Unstaking Fee').toLowerCase()\n    }\n    if (shouldShowTimer) {\n      return t('unstaking fee until')\n    }\n    return t('unstaking fee if withdrawn within 72h')\n  }\n\n  return (\n    <Flex\n      alignItems={isTableVariant ? 'flex-start' : 'center'}\n      justifyContent=\"space-between\"\n      flexDirection={isTableVariant ? 'column' : 'row'}\n    >\n      {tooltipVisible && tooltip}\n      <TooltipText ref={targetRef} small>\n        {noFeeToPay ? '0' : feeAsDecimal}% {getRowText()}\n      </TooltipText>\n      {shouldShowTimer && <WithdrawalFeeTimer secondsRemaining={secondsRemaining} />}\n    </Flex>\n  )\n}\n\nexport default UnstakingFeeCountdownRow\n","import React from 'react'\nimport { Text, Flex, useTooltip, TooltipText } from '@pancakeswap/uikit'\nimport { useTranslation } from 'contexts/Localization'\nimport { useCakeVault } from 'state/hooks'\nimport UnstakingFeeCountdownRow from './UnstakingFeeCountdownRow'\n\ninterface FeeSummaryProps {\n  stakingTokenSymbol: string\n  stakeAmount: string\n}\n\nconst FeeSummary: React.FC<FeeSummaryProps> = ({ stakingTokenSymbol, stakeAmount }) => {\n  const { t } = useTranslation()\n  const {\n    fees: { withdrawalFee },\n  } = useCakeVault()\n  const feeAsDecimal = withdrawalFee / 100\n  const feeInCake = (parseFloat(stakeAmount) * (feeAsDecimal / 100)).toFixed(4)\n  const { targetRef, tooltip, tooltipVisible } = useTooltip(\n    <>\n      <Text bold mb=\"4px\">\n        {t('Unstaking fee: %fee%%', { fee: feeAsDecimal })}\n      </Text>\n      <Text>\n        {t(\n          'Only applies within 3 days of staking. Unstaking after 3 days will not include a fee. Timer resets every time you stake new CAKE in the pool.',\n        )}\n      </Text>\n    </>,\n    { placement: 'top-start' },\n  )\n\n  return (\n    <>\n      <Flex mt=\"24px\" alignItems=\"center\" justifyContent=\"space-between\">\n        {tooltipVisible && tooltip}\n        <TooltipText ref={targetRef} small>\n          {t('Unstaking Fee')}\n        </TooltipText>\n        <Text fontSize=\"14px\">\n          {stakeAmount ? feeInCake : '-'} {stakingTokenSymbol}\n        </Text>\n      </Flex>\n      <UnstakingFeeCountdownRow />\n    </>\n  )\n}\n\nexport default FeeSummary\n","import React, { useState } from 'react'\nimport styled from 'styled-components'\nimport { Modal, Text, Flex, Image, Button, Slider, BalanceInput, AutoRenewIcon } from '@pancakeswap/uikit'\nimport { useTranslation } from 'contexts/Localization'\nimport { useWeb3React } from '@web3-react/core'\nimport { BASE_EXCHANGE_URL } from 'config'\nimport { useAppDispatch } from 'state'\nimport { BIG_TEN } from 'utils/bigNumber'\nimport { useCakeVault, usePriceCakeBusd } from 'state/hooks'\nimport { useCakeVaultContract } from 'hooks/useContract'\nimport useTheme from 'hooks/useTheme'\nimport useWithdrawalFeeTimer from 'hooks/cakeVault/useWithdrawalFeeTimer'\nimport BigNumber from 'bignumber.js'\nimport { getFullDisplayBalance, formatNumber, getDecimalAmount } from 'utils/formatBalance'\nimport useToast from 'hooks/useToast'\nimport { fetchCakeVaultUserData } from 'state/pools'\nimport { Pool } from 'state/types'\nimport { getAddress } from 'utils/addressHelpers'\nimport { convertCakeToShares } from '../../helpers'\nimport FeeSummary from './FeeSummary'\n\ninterface VaultStakeModalProps {\n  pool: Pool\n  stakingMax: BigNumber\n  isRemovingStake?: boolean\n  onDismiss?: () => void\n}\n\nconst StyledButton = styled(Button)`\n  flex-grow: 1;\n`\n\nconst VaultStakeModal: React.FC<VaultStakeModalProps> = ({ pool, stakingMax, isRemovingStake = false, onDismiss }) => {\n  const dispatch = useAppDispatch()\n  const { stakingToken } = pool\n  const { account } = useWeb3React()\n  const cakeVaultContract = useCakeVaultContract()\n  const {\n    userData: { lastDepositedTime, userShares },\n    pricePerFullShare,\n  } = useCakeVault()\n  const { t } = useTranslation()\n  const { theme } = useTheme()\n  const { toastSuccess, toastError } = useToast()\n  const [pendingTx, setPendingTx] = useState(false)\n  const [stakeAmount, setStakeAmount] = useState('')\n  const [percent, setPercent] = useState(0)\n  const { hasUnstakingFee } = useWithdrawalFeeTimer(parseInt(lastDepositedTime, 10), userShares)\n  const cakePriceBusd = usePriceCakeBusd()\n  const usdValueStaked =\n    cakePriceBusd.gt(0) && stakeAmount ? formatNumber(new BigNumber(stakeAmount).times(cakePriceBusd).toNumber()) : ''\n\n  const handleStakeInputChange = (input: string) => {\n    if (input) {\n      const convertedInput = new BigNumber(input).multipliedBy(BIG_TEN.pow(stakingToken.decimals))\n      const percentage = Math.floor(convertedInput.dividedBy(stakingMax).multipliedBy(100).toNumber())\n      setPercent(percentage > 100 ? 100 : percentage)\n    } else {\n      setPercent(0)\n    }\n    setStakeAmount(input)\n  }\n\n  const handleChangePercent = (sliderPercent: number) => {\n    if (sliderPercent > 0) {\n      const percentageOfStakingMax = stakingMax.dividedBy(100).multipliedBy(sliderPercent)\n      const amountToStake = getFullDisplayBalance(percentageOfStakingMax, stakingToken.decimals, stakingToken.decimals)\n      setStakeAmount(amountToStake)\n    } else {\n      setStakeAmount('')\n    }\n    setPercent(sliderPercent)\n  }\n\n  const handleWithdrawal = async (convertedStakeAmount: BigNumber) => {\n    setPendingTx(true)\n    const shareStakeToWithdraw = convertCakeToShares(convertedStakeAmount, pricePerFullShare)\n    // trigger withdrawAll function if the withdrawal will leave 0.000001 CAKE or less\n    const triggerWithdrawAllThreshold = new BigNumber(1000000000000)\n    const sharesRemaining = userShares.minus(shareStakeToWithdraw.sharesAsBigNumber)\n    const isWithdrawingAll = sharesRemaining.lte(triggerWithdrawAllThreshold)\n\n    if (isWithdrawingAll) {\n      cakeVaultContract.methods\n        .withdrawAll()\n        .send({ from: account })\n        .on('sending', () => {\n          setPendingTx(true)\n        })\n        .on('receipt', () => {\n          toastSuccess(t('Unstaked!'), t('Your earnings have also been harvested to your wallet'))\n          setPendingTx(false)\n          onDismiss()\n          dispatch(fetchCakeVaultUserData({ account }))\n        })\n        .on('error', (error) => {\n          console.error(error)\n          // Remove message from toast before prod\n          toastError(t('Error'), t('%error% - Please try again.', { error: error.message }))\n          setPendingTx(false)\n        })\n    } else {\n      cakeVaultContract.methods\n        .withdraw(shareStakeToWithdraw.sharesAsBigNumber.toString())\n        // .toString() being called to fix a BigNumber error in prod\n        // as suggested here https://github.com/ChainSafe/web3.js/issues/2077\n        .send({ from: account })\n        .on('sending', () => {\n          setPendingTx(true)\n        })\n        .on('receipt', () => {\n          toastSuccess(t('Unstaked!'), t('Your earnings have also been harvested to your wallet'))\n          setPendingTx(false)\n          onDismiss()\n          dispatch(fetchCakeVaultUserData({ account }))\n        })\n        .on('error', (error) => {\n          console.error(error)\n          // Remove message from toast before prod\n          toastError(t('Error'), t('%error% - Please try again.', { error: error.message }))\n          setPendingTx(false)\n        })\n    }\n  }\n\n  const handleDeposit = async (convertedStakeAmount: BigNumber) => {\n    cakeVaultContract.methods\n      .deposit(convertedStakeAmount.toString())\n      // .toString() being called to fix a BigNumber error in prod\n      // as suggested here https://github.com/ChainSafe/web3.js/issues/2077\n      .send({ from: account })\n      .on('sending', () => {\n        setPendingTx(true)\n      })\n      .on('receipt', () => {\n        toastSuccess(t('Staked!'), t('Your funds have been staked in the pool'))\n        setPendingTx(false)\n        onDismiss()\n        dispatch(fetchCakeVaultUserData({ account }))\n      })\n      .on('error', (error) => {\n        console.error(error)\n        // Remove message from toast before prod\n        toastError(t('Error'), t('%error% - Please try again.', { error: error.message }))\n        setPendingTx(false)\n      })\n  }\n\n  const handleConfirmClick = async () => {\n    const convertedStakeAmount = getDecimalAmount(new BigNumber(stakeAmount), stakingToken.decimals)\n    setPendingTx(true)\n    // unstaking\n    if (isRemovingStake) {\n      handleWithdrawal(convertedStakeAmount)\n      // staking\n    } else {\n      handleDeposit(convertedStakeAmount)\n    }\n  }\n\n  return (\n    <Modal title={isRemovingStake ? t('Unstake') : t('Stake in Pool')} onDismiss={onDismiss}>\n      <Flex alignItems=\"center\" justifyContent=\"space-between\" mb=\"8px\">\n        <Text bold>{isRemovingStake ? t('Unstake') : t('Stake')}:</Text>\n        <Flex alignItems=\"center\" minWidth=\"70px\">\n          <Image\n            src={`/images/tokens/${getAddress(stakingToken.address)}.png`}\n            width={24}\n            height={24}\n            alt={stakingToken.symbol}\n          />\n          <Text ml=\"4px\" bold>\n            {stakingToken.symbol}\n          </Text>\n        </Flex>\n      </Flex>\n      <BalanceInput\n        value={stakeAmount}\n        onUserInput={handleStakeInputChange}\n        currencyValue={cakePriceBusd.gt(0) && `~${usdValueStaked || 0} USD`}\n        decimals={stakingToken.decimals}\n      />\n      <Text mt=\"8px\" ml=\"auto\" color=\"textSubtle\" fontSize=\"12px\" mb=\"8px\">\n        {t('Balance: %balance%', { balance: getFullDisplayBalance(stakingMax, stakingToken.decimals) })}\n      </Text>\n      <Slider\n        min={0}\n        max={100}\n        value={percent}\n        onValueChanged={handleChangePercent}\n        name=\"stake\"\n        valueLabel={`${percent}%`}\n        step={1}\n      />\n      <Flex alignItems=\"center\" justifyContent=\"space-between\" mt=\"8px\">\n        <StyledButton scale=\"xs\" mx=\"2px\" p=\"4px 16px\" variant=\"tertiary\" onClick={() => handleChangePercent(25)}>\n          25%\n        </StyledButton>\n        <StyledButton scale=\"xs\" mx=\"2px\" p=\"4px 16px\" variant=\"tertiary\" onClick={() => handleChangePercent(50)}>\n          50%\n        </StyledButton>\n        <StyledButton scale=\"xs\" mx=\"2px\" p=\"4px 16px\" variant=\"tertiary\" onClick={() => handleChangePercent(75)}>\n          75%\n        </StyledButton>\n        <StyledButton scale=\"xs\" mx=\"2px\" p=\"4px 16px\" variant=\"tertiary\" onClick={() => handleChangePercent(100)}>\n          {t('Max')}\n        </StyledButton>\n      </Flex>\n      {isRemovingStake && hasUnstakingFee && (\n        <FeeSummary stakingTokenSymbol={stakingToken.symbol} stakeAmount={stakeAmount} />\n      )}\n      <Button\n        isLoading={pendingTx}\n        endIcon={pendingTx ? <AutoRenewIcon spin color=\"currentColor\" /> : null}\n        onClick={handleConfirmClick}\n        disabled={!stakeAmount || parseFloat(stakeAmount) === 0}\n        mt=\"24px\"\n      >\n        {pendingTx ? t('Confirming') : t('Confirm')}\n      </Button>\n      {!isRemovingStake && (\n        <Button mt=\"8px\" as=\"a\" external href={BASE_EXCHANGE_URL} variant=\"secondary\">\n          {t('Get %symbol%', { symbol: stakingToken.symbol })}\n        </Button>\n      )}\n    </Modal>\n  )\n}\n\nexport default VaultStakeModal\n","import React from 'react'\nimport { Flex, Text, IconButton, AddIcon, MinusIcon, useModal, Skeleton } from '@pancakeswap/uikit'\nimport BigNumber from 'bignumber.js'\nimport { getBalanceNumber } from 'utils/formatBalance'\nimport { Pool } from 'state/types'\nimport { useCakeVault, usePriceCakeBusd } from 'state/hooks'\nimport Balance from 'components/Balance'\nimport NotEnoughTokensModal from '../../PoolCard/Modals/NotEnoughTokensModal'\nimport { convertSharesToCake } from '../../../helpers'\nimport VaultStakeModal from '../VaultStakeModal'\n\ninterface HasStakeActionProps {\n  pool: Pool\n  stakingTokenBalance: BigNumber\n}\n\nconst HasSharesActions: React.FC<HasStakeActionProps> = ({ pool, stakingTokenBalance }) => {\n  const {\n    userData: { userShares },\n    pricePerFullShare,\n  } = useCakeVault()\n  const { stakingToken } = pool\n  const { cakeAsBigNumber, cakeAsNumberBalance } = convertSharesToCake(userShares, pricePerFullShare)\n  const cakePriceBusd = usePriceCakeBusd()\n  const stakedDollarValue = cakePriceBusd.gt(0)\n    ? getBalanceNumber(cakeAsBigNumber.multipliedBy(cakePriceBusd), stakingToken.decimals)\n    : 0\n\n  const [onPresentTokenRequired] = useModal(<NotEnoughTokensModal tokenSymbol={stakingToken.symbol} />)\n  const [onPresentStake] = useModal(<VaultStakeModal stakingMax={stakingTokenBalance} pool={pool} />)\n  const [onPresentUnstake] = useModal(<VaultStakeModal stakingMax={cakeAsBigNumber} pool={pool} isRemovingStake />)\n\n  return (\n    <Flex justifyContent=\"space-between\" alignItems=\"center\">\n      <Flex flexDirection=\"column\">\n        <Balance fontSize=\"20px\" bold value={cakeAsNumberBalance} decimals={5} />\n        <Text fontSize=\"12px\" color=\"textSubtle\">\n          {cakePriceBusd.gt(0) ? (\n            <Balance value={stakedDollarValue} fontSize=\"12px\" color=\"textSubtle\" decimals={2} prefix=\"~\" unit=\" USD\" />\n          ) : (\n            <Skeleton mt=\"1px\" height={16} width={64} />\n          )}\n        </Text>\n      </Flex>\n      <Flex>\n        <IconButton variant=\"secondary\" onClick={onPresentUnstake} mr=\"6px\">\n          <MinusIcon color=\"primary\" width=\"24px\" />\n        </IconButton>\n        <IconButton variant=\"secondary\" onClick={stakingTokenBalance.gt(0) ? onPresentStake : onPresentTokenRequired}>\n          <AddIcon color=\"primary\" width=\"24px\" height=\"24px\" />\n        </IconButton>\n      </Flex>\n    </Flex>\n  )\n}\n\nexport default HasSharesActions\n","import React from 'react'\nimport { Flex, Button, useModal, Skeleton } from '@pancakeswap/uikit'\nimport BigNumber from 'bignumber.js'\nimport { useTranslation } from 'contexts/Localization'\nimport { Pool } from 'state/types'\nimport NotEnoughTokensModal from '../../PoolCard/Modals/NotEnoughTokensModal'\nimport VaultStakeModal from '../VaultStakeModal'\nimport HasSharesActions from './HasSharesActions'\n\ninterface VaultStakeActionsProps {\n  pool: Pool\n  stakingTokenBalance: BigNumber\n  accountHasSharesStaked: boolean\n  isLoading?: boolean\n}\n\nconst VaultStakeActions: React.FC<VaultStakeActionsProps> = ({\n  pool,\n  stakingTokenBalance,\n  accountHasSharesStaked,\n  isLoading = false,\n}) => {\n  const { stakingToken } = pool\n  const { t } = useTranslation()\n  const [onPresentTokenRequired] = useModal(<NotEnoughTokensModal tokenSymbol={stakingToken.symbol} />)\n  const [onPresentStake] = useModal(<VaultStakeModal stakingMax={stakingTokenBalance} pool={pool} />)\n\n  const renderStakeAction = () => {\n    return accountHasSharesStaked ? (\n      <HasSharesActions pool={pool} stakingTokenBalance={stakingTokenBalance} />\n    ) : (\n      <Button onClick={stakingTokenBalance.gt(0) ? onPresentStake : onPresentTokenRequired}>{t('Stake')}</Button>\n    )\n  }\n\n  return <Flex flexDirection=\"column\">{isLoading ? <Skeleton width=\"100%\" height=\"52px\" /> : renderStakeAction()}</Flex>\n}\n\nexport default VaultStakeActions\n","import BigNumber from 'bignumber.js'\nimport React from 'react'\nimport styled from 'styled-components'\nimport { Flex, Text, Box } from '@pancakeswap/uikit'\nimport { useTranslation } from 'contexts/Localization'\nimport { useCheckVaultApprovalStatus } from 'hooks/useApprove'\nimport { Pool } from 'state/types'\nimport { BIG_ZERO } from 'utils/bigNumber'\nimport VaultApprovalAction from './VaultApprovalAction'\nimport VaultStakeActions from './VaultStakeActions'\n\nconst InlineText = styled(Text)`\n  display: inline;\n`\n\nconst CakeVaultCardActions: React.FC<{\n  pool: Pool\n  accountHasSharesStaked: boolean\n  isLoading: boolean\n}> = ({ pool, accountHasSharesStaked, isLoading }) => {\n  const { stakingToken, userData } = pool\n  const { t } = useTranslation()\n  const stakingTokenBalance = userData?.stakingTokenBalance ? new BigNumber(userData.stakingTokenBalance) : BIG_ZERO\n\n  const { isVaultApproved, setLastUpdated } = useCheckVaultApprovalStatus()\n\n  return (\n    <Flex flexDirection=\"column\">\n      <Flex flexDirection=\"column\">\n        <Box display=\"inline\">\n          <InlineText\n            color={accountHasSharesStaked ? 'secondary' : 'textSubtle'}\n            textTransform=\"uppercase\"\n            bold\n            fontSize=\"12px\"\n          >\n            {accountHasSharesStaked ? stakingToken.symbol : t('Stake')}{' '}\n          </InlineText>\n          <InlineText\n            color={accountHasSharesStaked ? 'textSubtle' : 'secondary'}\n            textTransform=\"uppercase\"\n            bold\n            fontSize=\"12px\"\n          >\n            {accountHasSharesStaked ? t('Staked (compounding)') : `${stakingToken.symbol}`}\n          </InlineText>\n        </Box>\n        {isVaultApproved ? (\n          <VaultStakeActions\n            isLoading={isLoading}\n            pool={pool}\n            stakingTokenBalance={stakingTokenBalance}\n            accountHasSharesStaked={accountHasSharesStaked}\n          />\n        ) : (\n          <VaultApprovalAction isLoading={isLoading} setLastUpdated={setLastUpdated} />\n        )}\n      </Flex>\n    </Flex>\n  )\n}\n\nexport default CakeVaultCardActions\n","import React from 'react'\nimport { Text, TooltipText, useTooltip } from '@pancakeswap/uikit'\nimport { useTranslation } from 'contexts/Localization'\nimport Balance from 'components/Balance'\n\ninterface RecentCakeProfitBalanceProps {\n  cakeToDisplay: number\n  dollarValueToDisplay: number\n  dateStringToDisplay: string\n}\n\nconst RecentCakeProfitBalance: React.FC<RecentCakeProfitBalanceProps> = ({\n  cakeToDisplay,\n  dollarValueToDisplay,\n  dateStringToDisplay,\n}) => {\n  const { t } = useTranslation()\n\n  const { targetRef, tooltip, tooltipVisible } = useTooltip(\n    <>\n      <Balance fontSize=\"16px\" value={cakeToDisplay} decimals={3} bold unit=\" CAKE\" />\n      <Balance fontSize=\"16px\" value={dollarValueToDisplay} decimals={2} bold prefix=\"~$\" />\n      {t('Earned since your last action')}\n      <Text>{dateStringToDisplay}</Text>\n    </>,\n    {\n      placement: 'bottom-end',\n    },\n  )\n\n  return (\n    <>\n      {tooltipVisible && tooltip}\n      <TooltipText ref={targetRef} small>\n        <Balance fontSize=\"14px\" value={cakeToDisplay} />\n      </TooltipText>\n    </>\n  )\n}\n\nexport default RecentCakeProfitBalance\n","import React from 'react'\nimport { Flex, Text } from '@pancakeswap/uikit'\nimport { useWeb3React } from '@web3-react/core'\nimport { useTranslation } from 'contexts/Localization'\nimport { useCakeVault, usePriceCakeBusd } from 'state/hooks'\nimport { getCakeVaultEarnings } from 'views/Pools/helpers'\nimport RecentCakeProfitBalance from './RecentCakeProfitBalance'\n\nconst RecentCakeProfitCountdownRow = () => {\n  const { t } = useTranslation()\n  const { account } = useWeb3React()\n  const {\n    pricePerFullShare,\n    userData: { cakeAtLastUserAction, userShares, lastUserActionTime },\n  } = useCakeVault()\n  const cakePriceBusd = usePriceCakeBusd()\n  const { hasAutoEarnings, autoCakeToDisplay, autoUsdToDisplay } = getCakeVaultEarnings(\n    account,\n    cakeAtLastUserAction,\n    userShares,\n    pricePerFullShare,\n    cakePriceBusd.toNumber(),\n  )\n\n  const lastActionInMs = lastUserActionTime && parseInt(lastUserActionTime) * 1000\n  const dateTimeLastAction = new Date(lastActionInMs)\n  const dateStringToDisplay = dateTimeLastAction.toLocaleString()\n\n  return (\n    <Flex alignItems=\"center\" justifyContent=\"space-between\">\n      <Text fontSize=\"14px\">{`${t('Recent CAKE profit')}:`}</Text>\n      {hasAutoEarnings && (\n        <RecentCakeProfitBalance\n          cakeToDisplay={autoCakeToDisplay}\n          dollarValueToDisplay={autoUsdToDisplay}\n          dateStringToDisplay={dateStringToDisplay}\n        />\n      )}\n    </Flex>\n  )\n}\n\nexport default RecentCakeProfitCountdownRow\n","import React from 'react'\nimport styled from 'styled-components'\nimport { Flex, Text, useMatchBreakpoints } from '@sparkpointio/sparkswap-uikit'\nimport { Box, CardBody } from '@pancakeswap/uikit'\nimport { useTranslation } from 'contexts/Localization'\nimport { useWeb3React } from '@web3-react/core'\nimport UnlockButton from 'components/UnlockButton'\nimport tokens from 'config/constants/tokens'\nimport { useCakeVault } from 'state/hooks'\nimport { Pool } from 'state/types'\nimport AprRow from '../PoolCard/AprRow'\nimport { StyledCard, StyledCardInner } from '../PoolCard/StyledCard'\nimport CardFooter from '../PoolCard/CardFooter'\nimport StyledCardHeader from '../PoolCard/StyledCardHeader'\nimport VaultCardActions from './VaultCardActions'\nimport UnstakingFeeCountdownRow from './UnstakingFeeCountdownRow'\nimport RecentCakeProfitRow from './RecentCakeProfitRow'\n\nconst StyledCardBody = styled(CardBody)<{ isLoading: boolean }>`\n  min-height: ${({ isLoading }) => (isLoading ? '0' : '254px')};\n`\n\ninterface CakeVaultProps {\n  pool: Pool\n  showStakedOnly: boolean\n}\n\nconst CakeVaultCard: React.FC<CakeVaultProps> = ({ pool, showStakedOnly }) => {\n  const { t } = useTranslation()\n  const { isXl } = useMatchBreakpoints()\n  const { account } = useWeb3React()\n  const {\n    userData: { userShares, isLoading: isVaultUserDataLoading },\n    fees: { performanceFee },\n  } = useCakeVault()\n\n  const accountHasSharesStaked = userShares && userShares.gt(0)\n  const isLoading = !pool.userData || isVaultUserDataLoading\n  const performanceFeeAsDecimal = performanceFee && performanceFee / 100\n\n  if (showStakedOnly && !accountHasSharesStaked) {\n    return null\n  }\n\n  return (\n    <StyledCard>\n      <StyledCardInner>\n        <StyledCardHeader\n          isStaking={accountHasSharesStaked}\n          isAutoVault\n          earningToken={tokens.cake}\n          stakingToken={tokens.cake}\n        />\n        <StyledCardBody isLoading={isLoading}>\n          <AprRow pool={pool} performanceFee={performanceFeeAsDecimal} />\n          <Box mt=\"24px\">\n            <RecentCakeProfitRow />\n          </Box>\n          <Box mt=\"8px\">\n            <UnstakingFeeCountdownRow />\n          </Box>\n          <Flex mt=\"32px\" flexDirection=\"column\">\n            {account ? (\n              <VaultCardActions pool={pool} accountHasSharesStaked={accountHasSharesStaked} isLoading={isLoading} />\n            ) : (\n              <>\n                <Text mb=\"10px\" textTransform=\"uppercase\" fontSize=\"12px\" color=\"textSubtle\" bold>\n                  {t('Start earning')}\n                </Text>\n                <UnlockButton />\n              </>\n            )}\n          </Flex>\n        </StyledCardBody>\n        <CardFooter pool={pool} account={account} />\n      </StyledCardInner>\n    </StyledCard>\n  )\n}\n\nexport default CakeVaultCard\n","import { Flex, Text } from '@pancakeswap/uikit'\nimport styled from 'styled-components'\n\nconst BaseCell = styled.div`\n  color: black;\n\n  padding: 24px 8px;\n\n  display: flex;\n  flex-direction: column;\n  justify-content: flex-start;\n`\n\nexport const CellContent = styled(Flex)`\n  flex-direction: column;\n  justify-content: center;\n  max-height: 40px;\n  ${Text} {\n    line-height: 1;\n  }\n`\n\nexport default BaseCell\n","import React from 'react'\nimport styled, { keyframes, css } from 'styled-components'\nimport {\n  Box,\n  Button,\n  Flex,\n  HelpIcon,\n  Link,\n  LinkExternal,\n  MetamaskIcon,\n  Skeleton,\n  Text,\n  TimerIcon,\n  useTooltip,\n} from '@pancakeswap/uikit'\nimport { BASE_BSC_SCAN_URL, BASE_URL } from 'config'\nimport { getBscScanBlockCountdownUrl } from 'utils/bscscan'\nimport { useBlock, useCakeVault } from 'state/hooks'\nimport BigNumber from 'bignumber.js'\nimport { Pool } from 'state/types'\nimport { useTranslation } from 'contexts/Localization'\nimport Balance from 'components/Balance'\nimport { CompoundingPoolTag, ManualPoolTag } from 'components/Tags'\nimport { getAddress, getCakeVaultAddress } from 'utils/addressHelpers'\nimport { registerToken } from 'utils/wallet'\nimport { getBalanceNumber, getFullDisplayBalance } from 'utils/formatBalance'\nimport { getPoolBlockInfo } from 'views/Pools/helpers'\nimport Harvest from './Harvest'\nimport Stake from './Stake'\nimport Apr from '../Apr'\n\nconst expandAnimation = keyframes`\n  from {\n    max-height: 0px;\n  }\n  to {\n    max-height: 700px;\n  }\n`\n\nconst collapseAnimation = keyframes`\n  from {\n    max-height: 700px;\n  }\n  to {\n    max-height: 0px;\n  }\n`\n\nconst StyledActionPanel = styled.div<{ expanded: boolean }>`\n  animation: ${({ expanded }) =>\n    expanded\n      ? css`\n          ${expandAnimation} 300ms linear forwards\n        `\n      : css`\n          ${collapseAnimation} 300ms linear forwards\n        `};\n  overflow: hidden;\n  display: flex;\n  flex-direction: column-reverse;\n  justify-content: center;\n  padding: 12px;\n\n  ${({ theme }) => theme.mediaQueries.lg} {\n    flex-direction: row;\n    padding: 16px 32px;\n  }\n`\n\nconst ActionContainer = styled.div`\n  display: flex;\n  flex-direction: column;\n\n  ${({ theme }) => theme.mediaQueries.sm} {\n    flex-direction: row;\n    align-items: center;\n    flex-grow: 1;\n    flex-basis: 0;\n  }\n`\n\ntype MediaBreakpoints = {\n  isXs: boolean\n  isSm: boolean\n  isMd: boolean\n  isLg: boolean\n  isXl: boolean\n}\n\ninterface ActionPanelProps {\n  account: string\n  pool: Pool\n  userDataLoaded: boolean\n  expanded: boolean\n  breakpoints: MediaBreakpoints\n}\n\nconst InfoSection = styled(Box)`\n  flex-grow: 0;\n  flex-shrink: 0;\n  flex-basis: auto;\n  padding: 8px 8px;\n  ${({ theme }) => theme.mediaQueries.lg} {\n    padding: 0;\n    flex-basis: 230px;\n  }\n`\n\nconst ActionPanel: React.FC<ActionPanelProps> = ({ account, pool, userDataLoaded, expanded, breakpoints }) => {\n  const {\n    sousId,\n    stakingToken,\n    earningToken,\n    totalStaked,\n    startBlock,\n    endBlock,\n    stakingLimit,\n    contractAddress,\n    isAutoVault,\n  } = pool\n  const { t } = useTranslation()\n  const poolContractAddress = getAddress(contractAddress)\n  const cakeVaultContractAddress = getCakeVaultAddress()\n  const { currentBlock } = useBlock()\n  const { isXs, isSm, isMd } = breakpoints\n  const showSubtitle = (isXs || isSm) && sousId === 0\n\n  const { shouldShowBlockCountdown, blocksUntilStart, blocksRemaining, hasPoolStarted, blocksToDisplay } =\n    getPoolBlockInfo(pool, currentBlock)\n\n  const isMetaMaskInScope = !!(window as WindowChain).ethereum?.isMetaMask\n  const tokenAddress = earningToken.address ? getAddress(earningToken.address) : ''\n  const imageSrc = `${BASE_URL}/images/tokens/${tokenAddress}.png`\n\n  const {\n    totalCakeInVault,\n    fees: { performanceFee },\n  } = useCakeVault()\n\n  const performanceFeeAsDecimal = performanceFee && performanceFee / 100\n  const isManualCakePool = sousId === 0\n\n  const getTotalStakedBalance = () => {\n    if (isAutoVault) {\n      return getBalanceNumber(totalCakeInVault, stakingToken.decimals)\n    }\n    if (isManualCakePool) {\n      const manualCakeTotalMinusAutoVault = new BigNumber(totalStaked).minus(totalCakeInVault)\n      return getBalanceNumber(manualCakeTotalMinusAutoVault, stakingToken.decimals)\n    }\n    return getBalanceNumber(totalStaked, stakingToken.decimals)\n  }\n\n  const {\n    targetRef: totalStakedTargetRef,\n    tooltip: totalStakedTooltip,\n    tooltipVisible: totalStakedTooltipVisible,\n  } = useTooltip(t('Total amount of %symbol% staked in this pool', { symbol: stakingToken.symbol }), {\n    placement: 'bottom',\n  })\n\n  const manualTooltipText = t('You must harvest and compound your earnings from this pool manually.')\n  const autoTooltipText = t(\n    'Any funds you stake in this pool will be automagically harvested and restaked (compounded) for you.',\n  )\n\n  const {\n    targetRef: tagTargetRef,\n    tooltip: tagTooltip,\n    tooltipVisible: tagTooltipVisible,\n  } = useTooltip(isAutoVault ? autoTooltipText : manualTooltipText, {\n    placement: 'bottom-start',\n  })\n\n  const maxStakeRow = stakingLimit.gt(0) ? (\n    <Flex mb=\"8px\" justifyContent=\"space-between\">\n      <Text>{t('Max. stake per user')}:</Text>\n      <Text>{`${getFullDisplayBalance(stakingLimit, stakingToken.decimals, 0)} ${stakingToken.symbol}`}</Text>\n    </Flex>\n  ) : null\n\n  const blocksRow =\n    blocksRemaining || blocksUntilStart ? (\n      <Flex mb=\"8px\" justifyContent=\"space-between\">\n        <Text>{hasPoolStarted ? t('Ends in') : t('Starts in')}:</Text>\n        <Flex>\n          <Link external href={getBscScanBlockCountdownUrl(hasPoolStarted ? endBlock : startBlock)}>\n            <Balance fontSize=\"16px\" value={blocksToDisplay} decimals={0} color=\"primary\" />\n            <Text ml=\"4px\" color=\"primary\" textTransform=\"lowercase\">\n              {t('Blocks')}\n            </Text>\n            <TimerIcon ml=\"4px\" color=\"primary\" />\n          </Link>\n        </Flex>\n      </Flex>\n    ) : (\n      <Skeleton width=\"56px\" height=\"16px\" />\n    )\n\n  const aprRow = (\n    <Flex justifyContent=\"space-between\" alignItems=\"center\" mb=\"8px\">\n      <Text>{isAutoVault ? t('APY') : t('APR')}:</Text>\n      <Apr pool={pool} showIcon performanceFee={isAutoVault ? performanceFeeAsDecimal : 0} />\n    </Flex>\n  )\n\n  const totalStakedRow = (\n    <Flex justifyContent=\"space-between\" alignItems=\"center\" mb=\"8px\">\n      <Text maxWidth={['50px', '100%']}>{t('Total staked')}:</Text>\n      <Flex alignItems=\"center\">\n        {totalStaked && totalStaked.gte(0) ? (\n          <>\n            <Balance fontSize=\"16px\" value={getTotalStakedBalance()} decimals={0} unit={` ${stakingToken.symbol}`} />\n            <span ref={totalStakedTargetRef}>\n              <HelpIcon color=\"textSubtle\" width=\"20px\" ml=\"6px\" />\n            </span>\n          </>\n        ) : (\n          <Skeleton width=\"56px\" height=\"16px\" />\n        )}\n        {totalStakedTooltipVisible && totalStakedTooltip}\n      </Flex>\n    </Flex>\n  )\n\n  return (\n    <StyledActionPanel expanded={expanded}>\n      <InfoSection>\n        {maxStakeRow}\n        {(isXs || isSm) && aprRow}\n        {(isXs || isSm || isMd) && totalStakedRow}\n        {shouldShowBlockCountdown && blocksRow}\n        <Flex mb=\"8px\" justifyContent={['flex-end', 'flex-end', 'flex-start']}>\n          <LinkExternal href={`https://pancakeswap.info/token/${getAddress(earningToken.address)}`} bold={false}>\n            {t('Info site')}\n          </LinkExternal>\n        </Flex>\n        <Flex mb=\"8px\" justifyContent={['flex-end', 'flex-end', 'flex-start']}>\n          <LinkExternal href={earningToken.projectLink} bold={false}>\n            {t('View Project Site')}\n          </LinkExternal>\n        </Flex>\n        {poolContractAddress && (\n          <Flex mb=\"8px\" justifyContent={['flex-end', 'flex-end', 'flex-start']}>\n            <LinkExternal\n              href={`${BASE_BSC_SCAN_URL}/address/${isAutoVault ? cakeVaultContractAddress : poolContractAddress}`}\n              bold={false}\n            >\n              {t('View Contract')}\n            </LinkExternal>\n          </Flex>\n        )}\n        {account && isMetaMaskInScope && tokenAddress && (\n          <Flex mb=\"8px\" justifyContent={['flex-end', 'flex-end', 'flex-start']}>\n            <Button\n              variant=\"text\"\n              p=\"0\"\n              height=\"auto\"\n              onClick={() => registerToken(tokenAddress, earningToken.symbol, earningToken.decimals, imageSrc)}\n            >\n              <Text color=\"primary\">{t('Add to Metamask')}</Text>\n              <MetamaskIcon ml=\"4px\" />\n            </Button>\n          </Flex>\n        )}\n        {isAutoVault ? <CompoundingPoolTag /> : <ManualPoolTag />}\n        {tagTooltipVisible && tagTooltip}\n        <span ref={tagTargetRef}>\n          <HelpIcon ml=\"4px\" width=\"20px\" height=\"20px\" color=\"textSubtle\" />\n        </span>\n      </InfoSection>\n      <ActionContainer>\n        {showSubtitle && (\n          <Text mt=\"4px\" mb=\"16px\" color=\"textSubtle\">\n            {isAutoVault ? t('Automatic restaking') : `${t('Earn')} CAKE ${t('Stake').toLocaleLowerCase()} CAKE`}\n          </Text>\n        )}\n        <Harvest {...pool} userDataLoaded={userDataLoaded} />\n        <Stake pool={pool} userDataLoaded={userDataLoaded} />\n      </ActionContainer>\n    </StyledActionPanel>\n  )\n}\n\nexport default ActionPanel\n","import React from 'react'\nimport styled from 'styled-components'\nimport BigNumber from 'bignumber.js'\nimport { Text, useMatchBreakpoints } from '@pancakeswap/uikit'\nimport { useTranslation } from 'contexts/Localization'\nimport { useCakeVault } from 'state/hooks'\nimport { Pool } from 'state/types'\nimport { BIG_ZERO } from 'utils/bigNumber'\nimport TokenPairImage from 'components/TokenPairImage'\nimport CakeVaultTokenPairImage from '../../CakeVaultCard/CakeVaultTokenPairImage'\nimport BaseCell, { CellContent } from './BaseCell'\n\ninterface NameCellProps {\n  pool: Pool\n}\n\nconst StyledCell = styled(BaseCell)`\n  flex: 5;\n  flex-direction: row;\n  padding-left: 12px;\n  ${({ theme }) => theme.mediaQueries.sm} {\n    flex: 1 0 150px;\n    padding-left: 32px;\n  }\n`\n\nconst NameCell: React.FC<NameCellProps> = ({ pool }) => {\n  const { t } = useTranslation()\n  const { isXs, isSm } = useMatchBreakpoints()\n  const { sousId, stakingToken, earningToken, userData, isFinished, isAutoVault } = pool\n  const {\n    userData: { userShares },\n  } = useCakeVault()\n  const hasVaultShares = userShares && userShares.gt(0)\n\n  const stakingTokenSymbol = stakingToken.symbol\n  const earningTokenSymbol = earningToken.symbol\n\n  const stakedBalance = userData?.stakedBalance ? new BigNumber(userData.stakedBalance) : BIG_ZERO\n  const isStaked = stakedBalance.gt(0)\n  const isManualCakePool = sousId === 0\n\n  const showStakedTag = isAutoVault ? hasVaultShares : isStaked\n\n  let title = `${t('Earn')} ${earningTokenSymbol}`\n  let subtitle = `${t('Stake')} ${stakingTokenSymbol}`\n  const showSubtitle = sousId !== 0 || (sousId === 0 && !isXs && !isSm)\n\n  if (isAutoVault) {\n    title = t('Auto CAKE')\n    subtitle = t('Automatic restaking')\n  } else if (isManualCakePool) {\n    title = t('Manual CAKE')\n    subtitle = `${t('Earn')} CAKE ${t('Stake').toLocaleLowerCase()} CAKE`\n  }\n\n  return (\n    <StyledCell role=\"cell\">\n      {isAutoVault ? (\n        <CakeVaultTokenPairImage mr=\"8px\" width={40} height={40} />\n      ) : (\n        <TokenPairImage primaryToken={earningToken} secondaryToken={stakingToken} mr=\"8px\" width={40} height={40} />\n      )}\n      <CellContent>\n        {showStakedTag && (\n          <Text fontSize=\"12px\" bold color={isFinished ? 'failure' : 'secondary'} textTransform=\"uppercase\">\n            {t('Staked')}\n          </Text>\n        )}\n        <Text bold={!isXs && !isSm} small={isXs || isSm}>\n          {title}\n        </Text>\n        {showSubtitle && (\n          <Text fontSize=\"12px\" color=\"textSubtle\">\n            {subtitle}\n          </Text>\n        )}\n      </CellContent>\n    </StyledCell>\n  )\n}\n\nexport default NameCell\n","import React from 'react'\nimport styled from 'styled-components'\nimport { Skeleton, Text, useTooltip, HelpIcon, Flex, Box, useModal, useMatchBreakpoints } from '@pancakeswap/uikit'\nimport { Pool } from 'state/types'\nimport BigNumber from 'bignumber.js'\nimport { PoolCategory } from 'config/constants/types'\nimport { BIG_ZERO } from 'utils/bigNumber'\nimport { formatNumber, getBalanceNumber, getFullDisplayBalance } from 'utils/formatBalance'\nimport Balance from 'components/Balance'\nimport { useCakeVault } from 'state/hooks'\nimport { useTranslation } from 'contexts/Localization'\nimport { getCakeVaultEarnings } from 'views/Pools/helpers'\nimport BaseCell, { CellContent } from './BaseCell'\nimport CollectModal from '../../PoolCard/Modals/CollectModal'\n\ninterface EarningsCellProps {\n  pool: Pool\n  account: string\n  userDataLoaded: boolean\n}\n\nconst StyledCell = styled(BaseCell)`\n  flex: 4.5;\n  ${({ theme }) => theme.mediaQueries.sm} {\n    flex: 1 0 120px;\n  }\n`\n\nconst HelpIconWrapper = styled.div`\n  align-self: center;\n`\n\nconst EarningsCell: React.FC<EarningsCellProps> = ({ pool, account, userDataLoaded }) => {\n  const { t } = useTranslation()\n  const { isXs, isSm } = useMatchBreakpoints()\n  const { sousId, earningToken, poolCategory, userData, earningTokenPrice, isAutoVault } = pool\n  const isManualCakePool = sousId === 0\n\n  const earnings = userData?.pendingReward ? new BigNumber(userData.pendingReward) : BIG_ZERO\n  // These will be reassigned later if its Auto CAKE vault\n  let earningTokenBalance = getBalanceNumber(earnings, earningToken.decimals)\n  let earningTokenDollarBalance = getBalanceNumber(earnings.multipliedBy(earningTokenPrice), earningToken.decimals)\n  let hasEarnings = account && earnings.gt(0)\n  const fullBalance = getFullDisplayBalance(earnings, earningToken.decimals)\n  const formattedBalance = formatNumber(earningTokenBalance, 3, 3)\n  const earningsDollarValue = formatNumber(earningTokenDollarBalance)\n  const isBnbPool = poolCategory === PoolCategory.BINANCE\n\n  // Auto CAKE vault calculations\n  const {\n    userData: { cakeAtLastUserAction, userShares, lastUserActionTime },\n    pricePerFullShare,\n  } = useCakeVault()\n  const { hasAutoEarnings, autoCakeToDisplay, autoUsdToDisplay } = getCakeVaultEarnings(\n    account,\n    cakeAtLastUserAction,\n    userShares,\n    pricePerFullShare,\n    earningTokenPrice,\n  )\n\n  const lastActionInMs = lastUserActionTime && parseInt(lastUserActionTime) * 1000\n  const dateTimeLastAction = new Date(lastActionInMs)\n  const dateStringToDisplay = dateTimeLastAction.toLocaleString()\n\n  const labelText = isAutoVault ? t('Recent CAKE profit') : t('%asset% Earned', { asset: earningToken.symbol })\n  earningTokenBalance = isAutoVault ? autoCakeToDisplay : earningTokenBalance\n  hasEarnings = isAutoVault ? hasAutoEarnings : hasEarnings\n  earningTokenDollarBalance = isAutoVault ? autoUsdToDisplay : earningTokenDollarBalance\n\n  const { targetRef, tooltip, tooltipVisible } = useTooltip(\n    <>\n      <Balance fontSize=\"16px\" value={autoCakeToDisplay} decimals={3} bold unit=\" CAKE\" />\n      <Balance fontSize=\"16px\" value={autoUsdToDisplay} decimals={2} bold prefix=\"~$\" />\n      {t('Earned since your last action')}\n      <Text>{dateStringToDisplay}</Text>\n    </>,\n    { placement: 'bottom' },\n  )\n\n  const [onPresentCollect] = useModal(\n    <CollectModal\n      formattedBalance={formattedBalance}\n      fullBalance={fullBalance}\n      earningToken={earningToken}\n      earningsDollarValue={earningsDollarValue}\n      sousId={sousId}\n      isBnbPool={isBnbPool}\n      isCompoundPool={isManualCakePool}\n    />,\n  )\n\n  const handleEarningsClick = (event: React.MouseEvent<HTMLElement>) => {\n    event.stopPropagation()\n    onPresentCollect()\n  }\n\n  return (\n    <StyledCell role=\"cell\">\n      <CellContent>\n        <Text fontSize=\"12px\" color=\"textSubtle\" textAlign=\"left\">\n          {labelText}\n        </Text>\n        {!userDataLoaded && account ? (\n          <Skeleton width=\"80px\" height=\"16px\" />\n        ) : (\n          <>\n            {tooltipVisible && tooltip}\n            <Flex>\n              <Box mr=\"8px\" height=\"32px\" onClick={!isAutoVault && hasEarnings ? handleEarningsClick : undefined}>\n                <Balance\n                  mt=\"4px\"\n                  bold={!isXs && !isSm}\n                  fontSize={isXs || isSm ? '14px' : '16px'}\n                  color={hasEarnings ? 'primary' : 'textDisabled'}\n                  decimals={hasEarnings ? 5 : 1}\n                  value={hasEarnings ? earningTokenBalance : 0}\n                />\n                {hasEarnings ? (\n                  <Balance\n                    display=\"inline\"\n                    fontSize=\"12px\"\n                    color={hasEarnings ? 'textSubtle' : 'textDisabled'}\n                    decimals={2}\n                    value={earningTokenDollarBalance}\n                    unit=\" USD\"\n                    prefix=\"~\"\n                  />\n                ) : (\n                  <Text mt=\"4px\" fontSize=\"12px\" color={hasEarnings ? 'textSubtle' : 'textDisabled'}>\n                    0 USD\n                  </Text>\n                )}\n              </Box>\n              {isAutoVault && hasEarnings && !isXs && !isSm && (\n                <HelpIconWrapper ref={targetRef}>\n                  <HelpIcon color=\"textSubtle\" />\n                </HelpIconWrapper>\n              )}\n            </Flex>\n          </>\n        )}\n      </CellContent>\n    </StyledCell>\n  )\n}\n\nexport default EarningsCell\n","import React from 'react'\nimport styled from 'styled-components'\nimport { Text, useMatchBreakpoints } from '@pancakeswap/uikit'\nimport { Pool } from 'state/types'\nimport { useTranslation } from 'contexts/Localization'\nimport BaseCell, { CellContent } from './BaseCell'\nimport Apr from '../Apr'\n\ninterface AprCellProps {\n  pool: Pool\n  performanceFee: number\n}\n\nconst StyledCell = styled(BaseCell)`\n  flex: 1 0 50px;\n  ${({ theme }) => theme.mediaQueries.md} {\n    flex: 0 0 120px;\n  }\n`\n\nconst AprCell: React.FC<AprCellProps> = ({ pool, performanceFee }) => {\n  const { t } = useTranslation()\n  const { isXs, isSm } = useMatchBreakpoints()\n  const { isAutoVault } = pool\n  return (\n    <StyledCell role=\"cell\">\n      <CellContent>\n        <Text fontSize=\"12px\" color=\"textSubtle\" textAlign=\"left\">\n          {isAutoVault ? t('APY') : t('APR')}\n        </Text>\n        <Apr\n          pool={pool}\n          performanceFee={isAutoVault ? performanceFee : 0}\n          showIcon={!isXs && !isSm}\n          alignItems=\"flex-start\"\n        />\n      </CellContent>\n    </StyledCell>\n  )\n}\n\nexport default AprCell\n","import React, { useMemo } from 'react'\nimport { Flex, Skeleton, Text } from '@pancakeswap/uikit'\nimport styled from 'styled-components'\nimport { useTranslation } from 'contexts/Localization'\nimport BigNumber from 'bignumber.js'\nimport Balance from 'components/Balance'\nimport { Pool } from 'state/types'\nimport { useCakeVault } from 'state/hooks'\nimport { getBalanceNumber } from 'utils/formatBalance'\nimport BaseCell, { CellContent } from './BaseCell'\n\ninterface TotalStakedCellProps {\n  pool: Pool\n}\n\nconst StyledCell = styled(BaseCell)`\n  flex: 2 0 100px;\n`\n\nconst TotalStakedCell: React.FC<TotalStakedCellProps> = ({ pool }) => {\n  const { t } = useTranslation()\n  const { sousId, stakingToken, totalStaked, isAutoVault } = pool\n  const { totalCakeInVault } = useCakeVault()\n\n  const isManualCakePool = sousId === 0\n\n  const totalStakedBalance = useMemo(() => {\n    if (isAutoVault) {\n      return getBalanceNumber(totalCakeInVault, stakingToken.decimals)\n    }\n    if (isManualCakePool) {\n      const manualCakeTotalMinusAutoVault = new BigNumber(totalStaked).minus(totalCakeInVault)\n      return getBalanceNumber(manualCakeTotalMinusAutoVault, stakingToken.decimals)\n    }\n    return getBalanceNumber(totalStaked, stakingToken.decimals)\n  }, [isAutoVault, totalCakeInVault, isManualCakePool, totalStaked, stakingToken.decimals])\n\n  return (\n    <StyledCell role=\"cell\">\n      <CellContent>\n        <Text fontSize=\"12px\" color=\"textSubtle\" textAlign=\"left\">\n          {t('Total staked')}\n        </Text>\n        {totalStaked && totalStaked.gte(0) ? (\n          <Flex height=\"100%\" alignItems=\"center\">\n            <Balance fontSize=\"16px\" value={totalStakedBalance} decimals={0} unit={` ${stakingToken.symbol}`} />\n          </Flex>\n        ) : (\n          <Skeleton width=\"80px\" height=\"16px\" />\n        )}\n      </CellContent>\n    </StyledCell>\n  )\n}\n\nexport default TotalStakedCell\n","import React from 'react'\nimport styled from 'styled-components'\nimport { Flex, Link, Skeleton, Text, TimerIcon } from '@pancakeswap/uikit'\nimport { getBscScanBlockCountdownUrl } from 'utils/bscscan'\nimport { Pool } from 'state/types'\nimport { useBlock } from 'state/hooks'\nimport Balance from 'components/Balance'\nimport { useTranslation } from 'contexts/Localization'\nimport { getPoolBlockInfo } from 'views/Pools/helpers'\nimport BaseCell, { CellContent } from './BaseCell'\n\ninterface FinishCellProps {\n  pool: Pool\n}\n\nconst StyledCell = styled(BaseCell)`\n  flex: 2 0 100px;\n`\n\nconst EndsInCell: React.FC<FinishCellProps> = ({ pool }) => {\n  const { sousId, totalStaked, startBlock, endBlock, isFinished } = pool\n  const { currentBlock } = useBlock()\n  const { t } = useTranslation()\n\n  const { shouldShowBlockCountdown, blocksUntilStart, blocksRemaining, hasPoolStarted, blocksToDisplay } =\n    getPoolBlockInfo(pool, currentBlock)\n\n  const isCakePool = sousId === 0\n\n  const renderBlocks = shouldShowBlockCountdown ? (\n    <Flex alignItems=\"center\">\n      <Flex flex=\"1.3\">\n        <Balance fontSize=\"16px\" value={blocksToDisplay} decimals={0} />\n        <Text ml=\"4px\" textTransform=\"lowercase\">\n          {t('Blocks')}\n        </Text>\n      </Flex>\n      <Flex flex=\"1\">\n        <Link\n          external\n          href={getBscScanBlockCountdownUrl(hasPoolStarted ? endBlock : startBlock)}\n          onClick={(e) => e.stopPropagation()}\n        >\n          <TimerIcon ml=\"4px\" />\n        </Link>\n      </Flex>\n    </Flex>\n  ) : (\n    <Text>-</Text>\n  )\n\n  // A bit hacky way to determine if public data is loading relying on totalStaked\n  // Opted to go for this since we don't really need a separate publicDataLoaded flag\n  // anywhere else\n  const isLoadingPublicData = !totalStaked.gt(0) || !currentBlock || (!blocksRemaining && !blocksUntilStart)\n  const showLoading = isLoadingPublicData && !isCakePool && !isFinished\n  return (\n    <StyledCell role=\"cell\">\n      <CellContent>\n        <Text fontSize=\"12px\" color=\"textSubtle\" textAlign=\"left\">\n          {hasPoolStarted || !shouldShowBlockCountdown ? t('Ends in') : t('Starts in')}\n        </Text>\n        {showLoading ? <Skeleton width=\"80px\" height=\"16px\" /> : renderBlocks}\n      </CellContent>\n    </StyledCell>\n  )\n}\n\nexport default EndsInCell\n","import React from 'react'\nimport styled from 'styled-components'\nimport { Text, ChevronDownIcon } from '@pancakeswap/uikit'\nimport { useTranslation } from 'contexts/Localization'\nimport BaseCell from './BaseCell'\n\ninterface ExpandActionCellProps {\n  expanded: boolean\n  isFullLayout: boolean\n}\n\nconst StyledCell = styled(BaseCell)`\n  flex-direction: row;\n  justify-content: flex-end;\n  align-items: center;\n  flex: 1;\n  padding-right: 12px;\n  padding-left: 0px;\n  ${({ theme }) => theme.mediaQueries.md} {\n    flex: 0 0 120px;\n    padding-right: 32px;\n    padding-left: 8px;\n  }\n`\n\nconst ArrowIcon = styled(ChevronDownIcon)<{ toggled: boolean }>`\n  transform: ${({ toggled }) => (toggled ? 'rotate(180deg)' : 'rotate(0)')};\n  height: 24px;\n`\n\nconst TotalStakedCell: React.FC<ExpandActionCellProps> = ({ expanded, isFullLayout }) => {\n  const { t } = useTranslation()\n  return (\n    <StyledCell role=\"cell\">\n      {isFullLayout && (\n        <Text color=\"primary\" bold>\n          {expanded ? t('Hide') : t('Details')}\n        </Text>\n      )}\n      <ArrowIcon color=\"primary\" toggled={expanded} />\n    </StyledCell>\n  )\n}\n\nexport default TotalStakedCell\n","import styled from 'styled-components'\n\nexport const ActionContainer = styled.div`\n  padding: 16px;\n  border: 2px solid ${({ theme }) => theme.colors.input};\n  border-radius: 16px;\n  flex-grow: 1;\n  flex-basis: 0;\n  margin-bottom: 16px;\n\n  ${({ theme }) => theme.mediaQueries.sm} {\n    margin-left: 12px;\n    margin-right: 12px;\n    margin-bottom: 0;\n    height: 130px;\n    max-height: 130px;\n  }\n\n  ${({ theme }) => theme.mediaQueries.xl} {\n    margin-left: 32px;\n    margin-right: 0;\n    margin-bottom: 0;\n    height: 130px;\n    max-height: 130px;\n  }\n`\n\nexport const ActionTitles = styled.div`\n  font-weight: 600;\n  font-size: 12px;\n`\n\nexport const ActionContent = styled.div`\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n`\n","import React from 'react'\nimport styled from 'styled-components'\nimport BigNumber from 'bignumber.js'\nimport { Button, useModal, IconButton, AddIcon, MinusIcon, Skeleton, useTooltip, Flex, Text } from '@pancakeswap/uikit'\nimport UnlockButton from 'components/UnlockButton'\nimport { useWeb3React } from '@web3-react/core'\nimport { useCakeVault } from 'state/hooks'\nimport { Pool } from 'state/types'\nimport Balance from 'components/Balance'\nimport { useTranslation } from 'contexts/Localization'\nimport { useCheckVaultApprovalStatus, useSousApprove, useVaultApprove } from 'hooks/useApprove'\nimport { getBalanceNumber } from 'utils/formatBalance'\nimport { PoolCategory } from 'config/constants/types'\nimport { BIG_ZERO } from 'utils/bigNumber'\nimport { getAddress } from 'utils/addressHelpers'\nimport { useERC20 } from 'hooks/useContract'\nimport { convertSharesToCake } from 'views/Pools/helpers'\nimport { ActionContainer, ActionTitles, ActionContent } from './styles'\nimport NotEnoughTokensModal from '../../PoolCard/Modals/NotEnoughTokensModal'\nimport StakeModal from '../../PoolCard/Modals/StakeModal'\nimport VaultStakeModal from '../../CakeVaultCard/VaultStakeModal'\n\nconst IconButtonWrapper = styled.div`\n  display: flex;\n`\n\ninterface StackedActionProps {\n  pool: Pool\n  userDataLoaded: boolean\n}\n\nconst Staked: React.FunctionComponent<StackedActionProps> = ({ pool, userDataLoaded }) => {\n  const {\n    sousId,\n    stakingToken,\n    earningToken,\n    stakingLimit,\n    isFinished,\n    poolCategory,\n    userData,\n    stakingTokenPrice,\n    isAutoVault,\n  } = pool\n  const { t } = useTranslation()\n  const { account } = useWeb3React()\n\n  const stakingTokenContract = useERC20(stakingToken.address ? getAddress(stakingToken.address) : '')\n  const { handleApprove: handlePoolApprove, requestedApproval: requestedPoolApproval } = useSousApprove(\n    stakingTokenContract,\n    sousId,\n    earningToken.symbol,\n  )\n\n  const { isVaultApproved, setLastUpdated } = useCheckVaultApprovalStatus()\n  const { handleApprove: handleVaultApprove, requestedApproval: requestedVaultApproval } =\n    useVaultApprove(setLastUpdated)\n\n  const handleApprove = isAutoVault ? handleVaultApprove : handlePoolApprove\n  const requestedApproval = isAutoVault ? requestedVaultApproval : requestedPoolApproval\n\n  const isBnbPool = poolCategory === PoolCategory.BINANCE\n  const allowance = userData?.allowance ? new BigNumber(userData.allowance) : BIG_ZERO\n  const stakedBalance = userData?.stakedBalance ? new BigNumber(userData.stakedBalance) : BIG_ZERO\n  const isNotVaultAndHasStake = !isAutoVault && stakedBalance.gt(0)\n\n  const stakingTokenBalance = userData?.stakingTokenBalance ? new BigNumber(userData.stakingTokenBalance) : BIG_ZERO\n\n  const stakedTokenBalance = getBalanceNumber(stakedBalance, stakingToken.decimals)\n  const stakedTokenDollarBalance = getBalanceNumber(\n    stakedBalance.multipliedBy(stakingTokenPrice),\n    stakingToken.decimals,\n  )\n\n  const {\n    userData: { userShares },\n    pricePerFullShare,\n  } = useCakeVault()\n\n  const { cakeAsBigNumber, cakeAsNumberBalance } = convertSharesToCake(userShares, pricePerFullShare)\n  const hasSharesStaked = userShares && userShares.gt(0)\n  const isVaultWithShares = isAutoVault && hasSharesStaked\n  const stakedAutoDollarValue = getBalanceNumber(cakeAsBigNumber.multipliedBy(stakingTokenPrice), stakingToken.decimals)\n\n  const needsApproval = isAutoVault ? !isVaultApproved : !allowance.gt(0) && !isBnbPool\n\n  const [onPresentTokenRequired] = useModal(<NotEnoughTokensModal tokenSymbol={stakingToken.symbol} />)\n\n  const [onPresentStake] = useModal(\n    <StakeModal\n      isBnbPool={isBnbPool}\n      pool={pool}\n      stakingTokenBalance={stakingTokenBalance}\n      stakingTokenPrice={stakingTokenPrice}\n    />,\n  )\n\n  const [onPresentVaultStake] = useModal(<VaultStakeModal stakingMax={stakingTokenBalance} pool={pool} />)\n\n  const [onPresentUnstake] = useModal(\n    <StakeModal\n      stakingTokenBalance={stakingTokenBalance}\n      isBnbPool={isBnbPool}\n      pool={pool}\n      stakingTokenPrice={stakingTokenPrice}\n      isRemovingStake\n    />,\n  )\n\n  const [onPresentVaultUnstake] = useModal(<VaultStakeModal stakingMax={cakeAsBigNumber} pool={pool} isRemovingStake />)\n\n  const onStake = () => {\n    if (isAutoVault) {\n      onPresentVaultStake()\n    } else {\n      onPresentStake()\n    }\n  }\n\n  const onUnstake = () => {\n    if (isAutoVault) {\n      onPresentVaultUnstake()\n    } else {\n      onPresentUnstake()\n    }\n  }\n\n  const { targetRef, tooltip, tooltipVisible } = useTooltip(\n    t(\"You've already staked the maximum amount you can stake in this pool!\"),\n    { placement: 'bottom' },\n  )\n\n  const reachStakingLimit = stakingLimit.gt(0) && userData.stakedBalance.gte(stakingLimit)\n\n  if (!account) {\n    return (\n      <ActionContainer>\n        <ActionTitles>\n          <Text fontSize=\"12px\" bold color=\"textSubtle\" as=\"span\" textTransform=\"uppercase\">\n            {t('Start staking')}\n          </Text>\n        </ActionTitles>\n        <ActionContent>\n          <UnlockButton width=\"100%\" />\n        </ActionContent>\n      </ActionContainer>\n    )\n  }\n\n  if (!userDataLoaded) {\n    return (\n      <ActionContainer>\n        <ActionTitles>\n          <Text fontSize=\"12px\" bold color=\"textSubtle\" as=\"span\" textTransform=\"uppercase\">\n            {t('Start staking')}\n          </Text>\n        </ActionTitles>\n        <ActionContent>\n          <Skeleton width={180} height=\"32px\" marginTop={14} />\n        </ActionContent>\n      </ActionContainer>\n    )\n  }\n\n  if (needsApproval) {\n    return (\n      <ActionContainer>\n        <ActionTitles>\n          <Text fontSize=\"12px\" bold color=\"textSubtle\" as=\"span\" textTransform=\"uppercase\">\n            {t('Enable pool')}\n          </Text>\n        </ActionTitles>\n        <ActionContent>\n          <Button width=\"100%\" disabled={requestedApproval} onClick={handleApprove} variant=\"secondary\">\n            {t('Enable')}\n          </Button>\n        </ActionContent>\n      </ActionContainer>\n    )\n  }\n\n  // Wallet connected, user data loaded and approved\n  if (isNotVaultAndHasStake || isVaultWithShares) {\n    return (\n      <ActionContainer>\n        <ActionTitles>\n          <Text fontSize=\"12px\" bold color=\"secondary\" as=\"span\" textTransform=\"uppercase\">\n            {stakingToken.symbol}{' '}\n          </Text>\n          <Text fontSize=\"12px\" bold color=\"textSubtle\" as=\"span\" textTransform=\"uppercase\">\n            {isAutoVault ? t('Staked (compounding)') : t('Staked')}\n          </Text>\n        </ActionTitles>\n        <ActionContent>\n          <Flex flex=\"1\" pt=\"16px\" flexDirection=\"column\" alignSelf=\"flex-start\">\n            <Balance\n              lineHeight=\"1\"\n              bold\n              fontSize=\"20px\"\n              decimals={5}\n              value={isAutoVault ? cakeAsNumberBalance : stakedTokenBalance}\n            />\n            <Balance\n              fontSize=\"12px\"\n              display=\"inline\"\n              color=\"textSubtle\"\n              decimals={2}\n              value={isAutoVault ? stakedAutoDollarValue : stakedTokenDollarBalance}\n              unit=\" USD\"\n              prefix=\"~\"\n            />\n          </Flex>\n          <IconButtonWrapper>\n            <IconButton variant=\"secondary\" onClick={onUnstake} mr=\"6px\">\n              <MinusIcon color=\"primary\" width=\"14px\" />\n            </IconButton>\n            {reachStakingLimit ? (\n              <span ref={targetRef}>\n                <IconButton variant=\"secondary\" disabled>\n                  <AddIcon color=\"textDisabled\" width=\"24px\" height=\"24px\" />\n                </IconButton>\n              </span>\n            ) : (\n              <IconButton\n                variant=\"secondary\"\n                onClick={stakingTokenBalance.gt(0) ? onStake : onPresentTokenRequired}\n                disabled={isFinished}\n              >\n                <AddIcon color=\"primary\" width=\"14px\" />\n              </IconButton>\n            )}\n          </IconButtonWrapper>\n          {tooltipVisible && tooltip}\n        </ActionContent>\n      </ActionContainer>\n    )\n  }\n\n  return (\n    <ActionContainer>\n      <ActionTitles>\n        <Text fontSize=\"12px\" bold color=\"secondary\" as=\"span\" textTransform=\"uppercase\">\n          {t('Stake')}{' '}\n        </Text>\n        <Text fontSize=\"12px\" bold color=\"textSubtle\" as=\"span\" textTransform=\"uppercase\">\n          {stakingToken.symbol}\n        </Text>\n      </ActionTitles>\n      <ActionContent>\n        <Button\n          width=\"100%\"\n          onClick={stakingTokenBalance.gt(0) ? onStake : onPresentTokenRequired}\n          variant=\"secondary\"\n          disabled={isFinished}\n        >\n          {t('Stake')}\n        </Button>\n      </ActionContent>\n    </ActionContainer>\n  )\n}\n\nexport default Staked\n","import React, { useState } from 'react'\nimport styled from 'styled-components'\nimport { useMatchBreakpoints } from '@pancakeswap/uikit'\nimport { Pool } from 'state/types'\nimport { useCakeVault } from 'state/hooks'\nimport useDelayedUnmount from 'hooks/useDelayedUnmount'\nimport NameCell from './Cells/NameCell'\nimport EarningsCell from './Cells/EarningsCell'\nimport AprCell from './Cells/AprCell'\nimport TotalStakedCell from './Cells/TotalStakedCell'\nimport EndsInCell from './Cells/EndsInCell'\nimport ExpandActionCell from './Cells/ExpandActionCell'\nimport ActionPanel from './ActionPanel/ActionPanel'\n\ninterface PoolRowProps {\n  pool: Pool\n  account: string\n  userDataLoaded: boolean\n}\n\nconst StyledRow = styled.div`\n  background-color: transparent;\n  display: flex;\n  cursor: pointer;\n`\n\nconst PoolRow: React.FC<PoolRowProps> = ({ pool, account, userDataLoaded }) => {\n  const { isXs, isSm, isMd, isLg, isXl } = useMatchBreakpoints()\n  const [expanded, setExpanded] = useState(false)\n  const shouldRenderActionPanel = useDelayedUnmount(expanded, 300)\n\n  const toggleExpanded = () => {\n    setExpanded((prev) => !prev)\n  }\n\n  const {\n    fees: { performanceFee },\n  } = useCakeVault()\n  const performanceFeeAsDecimal = performanceFee && performanceFee / 100\n\n  return (\n    <>\n      <StyledRow role=\"row\" onClick={toggleExpanded}>\n        <NameCell pool={pool} />\n        <EarningsCell pool={pool} account={account} userDataLoaded={userDataLoaded} />\n        <AprCell pool={pool} performanceFee={performanceFeeAsDecimal} />\n        {(isLg || isXl) && <TotalStakedCell pool={pool} />}\n        {isXl && <EndsInCell pool={pool} />}\n        <ExpandActionCell expanded={expanded} isFullLayout={isMd || isLg || isXl} />\n      </StyledRow>\n      {shouldRenderActionPanel && (\n        <ActionPanel\n          account={account}\n          pool={pool}\n          userDataLoaded={userDataLoaded}\n          expanded={expanded}\n          breakpoints={{ isXs, isSm, isMd, isLg, isXl }}\n        />\n      )}\n    </>\n  )\n}\n\nexport default PoolRow\n","import React, { useRef } from 'react'\nimport styled from 'styled-components'\nimport { Button, ChevronUpIcon } from '@pancakeswap/uikit'\nimport { useTranslation } from 'contexts/Localization'\nimport { Pool } from 'state/types'\nimport PoolRow from './PoolRow'\n\ninterface PoolsTableProps {\n  pools: Pool[]\n  userDataLoaded: boolean\n  account: string\n}\n\nconst StyledTable = styled.div`\n  border-radius: ${({ theme }) => theme.radii.card};\n\n  background-color: ${({ theme }) => theme.card.background};\n  > div:not(:last-child) {\n    border-bottom: 2px solid ${({ theme }) => theme.colors.textDisabled};\n  }\n`\n\nconst StyledTableBorder = styled.div`\n  border-radius: ${({ theme }) => theme.radii.card};\n  padding: 1px 1px 3px 1px;\n  background-size: 400% 400%;\n`\n\nconst ScrollButtonContainer = styled.div`\n  display: flex;\n  justify-content: center;\n  padding-top: 5px;\n  padding-bottom: 5px;\n`\n\nconst PoolsTable: React.FC<PoolsTableProps> = ({ pools, userDataLoaded, account }) => {\n  const { t } = useTranslation()\n  const tableWrapperEl = useRef<HTMLDivElement>(null)\n  const scrollToTop = (): void => {\n    tableWrapperEl.current.scrollIntoView({\n      behavior: 'smooth',\n    })\n  }\n  return (\n    <StyledTableBorder>\n      <StyledTable role=\"table\" ref={tableWrapperEl}>\n        {pools.map((pool) => (\n          <PoolRow\n            key={pool.isAutoVault ? 'auto-cake' : pool.sousId}\n            pool={pool}\n            account={account}\n            userDataLoaded={userDataLoaded}\n          />\n        ))}\n        <ScrollButtonContainer>\n          <Button variant=\"text\" onClick={scrollToTop}>\n            {t('To Top')}\n            <ChevronUpIcon color=\"primary\" />\n          </Button>\n        </ScrollButtonContainer>\n      </StyledTable>\n    </StyledTableBorder>\n  )\n}\n\nexport default PoolsTable\n","import React, { useEffect, useMemo, useRef, useState, useContext } from 'react'\nimport { useLocation, Route, useRouteMatch } from 'react-router-dom'\nimport styled, { ThemeContext } from 'styled-components'\nimport BigNumber from 'bignumber.js'\nimport { useWeb3React } from '@web3-react/core'\nimport { Heading, Flex, Image } from '@pancakeswap/uikit'\nimport { Text } from '@sparkpointio/sparkswap-uikit'\nimport { Oval } from 'react-loading-icons'\nimport orderBy from 'lodash/orderBy'\nimport partition from 'lodash/partition'\nimport { SvgIcon } from '@material-ui/core'\nimport { useTranslation } from 'contexts/Localization'\nimport usePersistState from 'hooks/usePersistState'\nimport { usePoolPrice } from 'hooks/price'\nimport { usePools, useFetchCakeVault, useFetchPublicPoolsData, usePollFarmsData, useCakeVault } from 'state/hooks'\nimport { latinise } from 'utils/latinise'\nimport { getPoolApr } from 'utils/apr'\nimport usePrevious from 'utils/refHelpers'\nimport { getBalanceAmount, getBalanceNumber } from 'utils/formatBalance'\nimport FlexLayout from 'components/layout/Flex'\nimport Page from 'components/layout/Page'\nimport PageHeader from 'components/PageHeader'\nimport { StyledHr } from 'views/Farms/components/Divider'\nimport SearchInput from 'components/SearchInput'\nimport Select, { OptionProps } from 'components/Select/Select'\nimport { Pool } from 'state/types'\nimport useMedia from 'use-media'\nimport PoolCard from './components/PoolCard'\nimport CakeVaultCard from './components/CakeVaultCard'\nimport PoolTabButtons from './components/PoolTabButtons'\nimport BountyCard from './components/BountyCard'\nimport HelpButton from './components/HelpButton'\nimport PoolsTable from './components/PoolsTable/PoolsTable'\nimport { ViewMode } from './components/ToggleView/ToggleView'\nimport { getAprData, getCakeVaultEarnings } from './helpers'\nimport { ReactComponent as FarmsDarkLogo } from './components/assets/farm-dark.svg'\nimport { ReactComponent as FarmsLightLogo } from './components/assets/farm-light.svg'\n\nconst CardLayout = styled(FlexLayout)`\n  justify-content: center;\n  margin: 25px 0px;\n`\n\nconst PoolControls = styled(Flex)`\n  flex-direction: column;\n  margin-bottom: 24px;\n  ${({ theme }) => theme.mediaQueries.md} {\n    flex-direction: row;\n  }\n`\n\nconst SearchSortContainer = styled(Flex)`\n  gap: 10px;\n  justify-content: space-between;\n`\n\nconst ControlStretch = styled(Flex)`\n  > div {\n    flex: 1;\n  }\n`\nconst InfoBox = styled(Flex)`\n  @media (max-width: 1024px) {\n    flex-direction: column;\n    & > * {\n      margin: 10px 0px;\n    }\n  }\n`\n\nconst NUMBER_OF_POOLS_VISIBLE = 12\n\nconst Pools: React.FC = () => {\n  const theme = useContext(ThemeContext)\n  const location = useLocation()\n  const { t } = useTranslation()\n  const { account, chainId } = useWeb3React()\n  const { pools: poolsWithoutAutoVault, userDataLoaded } = usePools(account)\n  const userDataReady = !account || (!!account && userDataLoaded)\n  const [stakedOnly, setStakedOnly] = usePersistState(false, { localStorageKey: 'pancake_pool_staked' })\n  const [numberOfPoolsVisible, setNumberOfPoolsVisible] = useState(NUMBER_OF_POOLS_VISIBLE)\n  const [observerIsSet, setObserverIsSet] = useState(false)\n  const loadMoreRef = useRef<HTMLDivElement>(null)\n  const [viewMode, setViewMode] = usePersistState(ViewMode.TABLE, { localStorageKey: 'pancake_farm_view' })\n  const [searchQuery, setSearchQuery] = useState('')\n  const [sortOption, setSortOption] = useState('hot')\n  const isMobile = useMedia({ maxWidth: 500 })\n  const {\n    userData: { cakeAtLastUserAction, userShares },\n    fees: { performanceFee },\n    pricePerFullShare,\n    totalCakeInVault,\n  } = useCakeVault()\n  const accountHasVaultShares = userShares && userShares.gt(0)\n  const performanceFeeAsDecimal = performanceFee && performanceFee / 100\n\n  const pools = useMemo(() => {\n    const cakePool = poolsWithoutAutoVault.map((pool) => pool.sousId === 0)\n    const cakeAutoVault = { ...cakePool, isAutoVault: true }\n\n    return [...poolsWithoutAutoVault]\n  }, [poolsWithoutAutoVault])\n\n  // TODO aren't arrays in dep array checked just by reference, i.e. it will rerender every time reference changes?\n  // const [finishedPools, openPools] = useMemo(() => partition(pools, (pool) => pool.isFinished), [pools])\n  const [upcomingPools, notUpcomingPools] = useMemo(() => partition(pools, (pool) => pool.isComingSoon), [pools])\n  // const stakedOnlyFinishedPools = useMemo(\n  //   () =>\n  //     finishedPools.filter((pool) => {\n  //       if (pool.isAutoVault) {\n  //         return accountHasVaultShares\n  //       }\n  //       return pool.userData && new BigNumber(pool.userData.stakedBalance).isGreaterThan(0)\n  //     }),\n  //   [finishedPools, accountHasVaultShares],\n  // )\n  // const stakedOnlyOpenPools = useMemo(\n  //   () =>\n  //     openPools.filter((pool) => {\n  //       if (pool.isAutoVault) {\n  //         return accountHasVaultShares\n  //       }\n  //       return pool.userData && new BigNumber(pool.userData.stakedBalance).isGreaterThan(0)\n  //     }),\n  //   [openPools, accountHasVaultShares],\n  // )\n  // const hasStakeInFinishedPools = stakedOnlyFinishedPools.length > 0\n\n  usePollFarmsData()\n  useFetchCakeVault()\n  useFetchPublicPoolsData()\n\n  useEffect(() => {\n    const showMorePools = (entries) => {\n      const [entry] = entries\n      if (entry.isIntersecting) {\n        setNumberOfPoolsVisible((poolsCurrentlyVisible) => poolsCurrentlyVisible + NUMBER_OF_POOLS_VISIBLE)\n      }\n    }\n\n    if (!observerIsSet) {\n      const loadMoreObserver = new IntersectionObserver(showMorePools, {\n        rootMargin: '0px',\n        threshold: 1,\n      })\n      loadMoreObserver.observe(loadMoreRef.current)\n      setObserverIsSet(true)\n    }\n  }, [observerIsSet])\n\n  const showFinishedPools = location.pathname.includes('history')\n  const showUpcomingPools = location.pathname.includes('upcoming')\n\n  const handleChangeSearchQuery = (event: React.ChangeEvent<HTMLInputElement>) => {\n    setSearchQuery(event.target.value)\n  }\n\n  const handleSortOptionChange = (option: OptionProps): void => {\n    setSortOption(option.value)\n  }\n\n  const sortPools = (poolsToSort: Pool[]) => {\n    switch (sortOption) {\n      case 'apr':\n        // Ternary is needed to prevent pools without APR (like MIX) getting top spot\n        return orderBy(\n          poolsToSort,\n          (pool: Pool) => (pool.apr ? getAprData(pool, performanceFeeAsDecimal).apr : 0),\n          'desc',\n        )\n      case 'earned':\n        return orderBy(\n          poolsToSort,\n          (pool: Pool) => {\n            if (!pool.userData || !pool.earningTokenPrice) {\n              return 0\n            }\n            return pool.isAutoVault\n              ? getCakeVaultEarnings(\n                  account,\n                  cakeAtLastUserAction,\n                  userShares,\n                  pricePerFullShare,\n                  pool.earningTokenPrice,\n                ).autoUsdToDisplay\n              : pool.userData.pendingReward.times(pool.earningTokenPrice).toNumber()\n          },\n          'desc',\n        )\n      case 'totalStaked':\n        return orderBy(\n          poolsToSort,\n          (pool: Pool) => (pool.isAutoVault ? totalCakeInVault.toNumber() : pool.totalStaked.toNumber()),\n          'desc',\n        )\n      default:\n        return poolsToSort\n    }\n  }\n\n  const poolsToShow = () => {\n    let chosenPools = pools\n    // if (showUpcomingPools) {\n    //   chosenPools = stakedOnly ? stakedOnlyFinishedPools : finishedPools\n    // } else if (showFinishedPools) {\n    //   chosenPools = stakedOnly ? stakedOnlyFinishedPools : finishedPools\n    // } else {\n    //   chosenPools = stakedOnly ? stakedOnlyOpenPools : openPools\n    // }\n\n    if (searchQuery) {\n      const lowercaseQuery = latinise(searchQuery.toLowerCase())\n      chosenPools = chosenPools.filter((pool) =>\n        latinise(pool.earningToken.symbol.toLowerCase()).includes(lowercaseQuery),\n      )\n    }\n\n    return sortPools(chosenPools).slice(0, numberOfPoolsVisible)\n  }\n\n  const cardLayout = (\n    <CardLayout>\n      {poolsToShow().map((pool) =>\n        pool.isAutoVault ? (\n          <CakeVaultCard key=\"auto-cake\" pool={pool} showStakedOnly={stakedOnly} />\n        ) : (\n          <PoolCard key={pool.sousId} pool={pool} account={account} userDataReady={userDataReady} />\n        ),\n      )}\n    </CardLayout>\n  )\n\n  const tableLayout = <PoolsTable pools={poolsToShow()} account={account} userDataLoaded={userDataLoaded} />\n  const { path, url, isExact } = useRouteMatch()\n\n  const [isFetchData, setFetchData] = useState<boolean | null>(true)\n  const mggPool = pools.filter((pool) => pool.isMain)[0]\n  const totalStaked = mggPool.totalStaked\n    ? getBalanceNumber(new BigNumber(mggPool.totalStaked.toString()), mggPool.stakingToken.decimals)\n    : 0\n  const rewardPerBlock = mggPool?.tokenPerBlock\n    ? getBalanceNumber(new BigNumber(mggPool.tokenPerBlock.toString()), mggPool.earningToken.decimals)\n    : 0\n  const { stakingPrice, rewardPrice } = usePoolPrice(\n    mggPool.stakingToken.address[56],\n    mggPool.earningToken.address[56],\n    isFetchData,\n  )\n\n  const prevStakingPrice = usePrevious(stakingPrice)\n  const prevRewardPrice = usePrevious(rewardPrice)\n\n  useEffect(() => {\n    if (stakingPrice > 0 || rewardPrice > 0) {\n      setFetchData(false)\n    }\n    setTimeout(() => {\n      setFetchData(true)\n      if (stakingPrice !== prevStakingPrice || rewardPrice !== prevRewardPrice) {\n        setFetchData(true)\n      } else {\n        setFetchData(false)\n      }\n    }, 60000)\n    if (prevStakingPrice === stakingPrice || prevRewardPrice === rewardPrice) {\n      setFetchData(false)\n    }\n  }, [stakingPrice, rewardPrice, setFetchData, prevStakingPrice, prevRewardPrice])\n\n  useEffect(() => {\n    return setFetchData(null)\n  }, [])\n  const poolApr = getPoolApr(stakingPrice, rewardPrice, totalStaked, rewardPerBlock) ?? 0\n  const apr = poolApr > 0 ? `${poolApr.toFixed(2)} %` : <Oval width=\"20px\" height=\"20px\" />\n  const tvr = useMemo(() => new BigNumber(totalStaked).times(stakingPrice).toFixed(4), [totalStaked, stakingPrice])\n  return (\n    <>\n      <PageHeader>\n        <Flex\n          alignItems=\"center\"\n          justifyContent=\"space-around\"\n          flexDirection={['column', null, 'row']}\n          style={isMobile ? { flexDirection: 'column-reverse' } : { minHeight: '20vh', marginLeft: '-16px' }}\n          padding=\"24px\"\n        >\n          <Flex flexDirection=\"column\" flex=\"2\">\n            <Flex\n              justifyContent=\"space-around\"\n              flexDirection=\"column\"\n              padding=\"25px 25px 25px 0px\"\n              mr={['8px', 0]}\n              style={{ borderBottom: `1px solid ${theme.colors.MGG_active}` }}\n            >\n              <Text color={theme.colors.primary} fontSize=\"60px\" bold>\n                Pool Staking\n              </Text>\n              <Text color=\"text\" bold style={isMobile ? { fontSize: '17px' } : { fontSize: '27px' }}>\n                Earn MGG and other tokens by staking!\n              </Text>\n            </Flex>\n            <InfoBox style={{ width: '100%' }} margin=\"20px 0px 0px 0px\" justifyContent=\"space-between\">\n              <Flex flexDirection=\"column\">\n                <Text fontSize=\"17px\" bold color={theme.colors.MGG_accent2}>\n                  Total MGG Staked\n                </Text>\n                <Text fontSize=\"20px\">\n                  {' '}\n                  {totalStaked ? `${totalStaked} MGG` : <Oval width=\"20px\" height=\"20px\" />}{' '}\n                </Text>\n              </Flex>\n              <Flex flexDirection=\"column\">\n                <Text fontSize=\"17px\" bold color={theme.colors.MGG_accent2}>\n                  Total Value Locked\n                </Text>\n                <Text fontSize=\"20px\">{Number(tvr) > 0 ? `${tvr} USD` : <Oval width=\"20px\" height=\"20px\" />}</Text>\n              </Flex>\n              <Flex flexDirection=\"column\">\n                <Text fontSize=\"17px\" bold color={theme.colors.MGG_accent2}>\n                  APR\n                </Text>\n                <Text fontSize=\"20px\"> {apr} </Text>\n              </Flex>\n            </InfoBox>\n          </Flex>\n          {/* <Flex\n            style={\n              isMobile\n                ? {\n                    fontSize: '150px',\n                    margin: 'auto',\n                    marginTop: '20px',\n                    marginBottom: '20px',\n                  }\n                : { fontSize: '240px', marginRight: '-118px' }\n            }\n          >\n            <SvgIcon\n              component={theme.isDark ? FarmsDarkLogo : FarmsLightLogo}\n              viewBox=\"0  0 384 512\"\n              style={isMobile ? { width: '200px' } : { width: '500px' }}\n              fontSize=\"inherit\"\n            />\n          </Flex> */}\n        </Flex>\n      </PageHeader>\n      <Page>\n        {/* {!showFinishedPools && !showUpcomingPools && (\n          <div>\n            <Text bold fontSize=\"20px\" marginLeft=\"24px\" paddingBottom=\"24px\">\n            {' '}\n            Stake tokens to earn{' '}\n          </Text>\n            <StyledHr style={{ marginTop: '35px', width: '100%' }} />\n\n           // Header title for Active Pools\n\n            <Flex justifyContent=\"space-between\" style={{ margin: '20px' }}>\n              <Flex flexDirection=\"column\" mr={['8px', 0]}>\n                <Heading scale=\"md\" color=\"text\">\n                  {t('Stake tokens to earn')}\n                </Heading>\n              </Flex>\n            </Flex>\n          </div>\n        )} */}\n\n        {/* UPCOMING  */}\n        {showUpcomingPools && (\n          <>\n            <StyledHr style={{ marginTop: '35px' }} />\n\n            <Flex justifyContent=\"space-between\" style={{ margin: '20px' }}>\n              <Flex flexDirection=\"column\" mr={['8px', 0]}>\n                <Heading scale=\"md\" color=\"text\">\n                  {t('These pools are coming in the near future. Stay tuned.')}\n                </Heading>\n              </Flex>\n            </Flex>\n          </>\n        )}\n\n        {/* ENDED  */}\n        {showFinishedPools && (\n          <>\n            <StyledHr style={{ marginTop: '35px' }} />\n\n            <Flex justifyContent=\"space-between\" style={{ margin: '20px' }}>\n              <Flex flexDirection=\"column\" mr={['8px', 0]}>\n                <Heading scale=\"md\" color=\"text\">\n                  {t('These pools are no longer distributing rewards. Please unstake your tokens.')}\n                </Heading>\n              </Flex>\n            </Flex>\n          </>\n        )}\n\n        {/* viewMode === ViewMode.CARD ? cardLayout : tableLayout */}\n\n        {cardLayout}\n\n        <div ref={loadMoreRef} />\n        {/* <Image\n          mx=\"auto\"\n          mt=\"12px\"\n          src=\"/images/3d-syrup-bunnies.png\"\n          alt=\"Pancake illustration\"\n          width={192}\n          height={184.5}\n        /> */}\n      </Page>\n    </>\n  )\n}\n\nexport default Pools\n"],"sourceRoot":""}