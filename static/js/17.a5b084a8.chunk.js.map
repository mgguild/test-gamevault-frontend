{"version":3,"sources":["hooks/useContract.ts","hooks/useWeb3.ts","components/UnlockButton.tsx","utils/callHelpers.ts","components/Balance.tsx","hooks/usePreviousValue.ts","hooks/useLastUpdated.ts","hooks/useApprove.ts","hooks/useTokenBalance.ts","utils/bscscan.ts","hooks/useUnstake.ts","hooks/chainHelpers.ts","hooks/price.ts","hooks/useStake.ts","hooks/usePersistState.ts","utils/refHelpers.ts","utils/latinise.ts","hooks/useHarvest.ts","components/TokenPairImage/index.tsx","components/layout/Flex.tsx","views/Farms/components/Divider.tsx","views/Farms/components/FarmTable/Actions/styles.ts","views/Farms/components/FarmCard/DetailsSection.tsx","components/PageHeader/PageHeader.tsx","components/ModalInput/ModalInput.tsx","utils/getLiquidityUrlPathParts.ts","views/Farms/components/FarmCard/CardHeading.tsx","components/Loading.tsx","views/Farms/components/types.ts","views/Farms/components/WithdrawModal.tsx","views/Farms/components/Styled.tsx","views/Farms/components/Modals/Styled.tsx","views/Farms/components/Modals/Stake.tsx","views/Farms/components/Modals/ClaimModal.tsx","views/Farms/components/DepositModal.tsx","views/Farms/components/FarmCard/StakeAction.tsx","views/Farms/components/FarmCard/CardActionsContainer.tsx","views/Farms/components/FarmTable/Actions/HarvestAction.tsx","views/Farms/components/FarmCard/FarmCard.tsx","views/Farms/Farms.tsx"],"names":["useInoContract","address","web3","useWeb3","useMemo","getInoContract","useIgoContract","getIgoContract","useVestingContract","getVestingContract","useFixedAprPoolContract","getFixedAprPoolContract","useERC20","getBep20Contract","useLPStakingContract","getLpStakingContract","useCake","getCakeContract","useLottery","getLotteryContract","useMasterchef","getMasterchefContract","useSousChef","id","getSouschefContract","useCakeVaultContract","getCakeVaultContract","library","useWeb3React","refEth","useRef","useState","Web3","web3NoAccount","setweb3","useEffect","current","UnlockButton","props","customTitle","useTranslation","t","useAuth","login","logout","onPresentConnectModal","useWalletModal","onClick","fullWidth","approve","lpContract","masterChefContract","account","a","methods","options","ethers","constants","MaxUint256","send","from","approveContract","tokenContract","spender","buyBox","inoContract","rarity","amount","buy","value","getDecimalAmount","buyIgo","igoContract","buyTokens","toString","claimVesting","vestingContract","claimAll","stakeFixedAprPool","contract","tier","stake","unstakeFixedAprPool","unstake","approveWithAmount","pid","BigNumber","times","DEFAULT_TOKEN_DECIMAL","gas","DEFAULT_GAS_LIMIT","on","tx","transactionHash","enterStaking","deposit","sousStake","sousChefContract","decimals","BIG_TEN","pow","sousStakeBnb","leaveStaking","withdraw","exit","sousUnstake","sousEmergencyUnstake","emergencyWithdraw","claim","getReward","harvest","soushHarvest","soushHarvestBnb","BIG_ZERO","parseInt","process","farms","find","farm","Balance","color","isDisabled","unit","prefix","previousValue","start","end","duration","separator","usePreviousValue","ref","useLastUpdated","Date","now","lastUpdated","setStateLastUpdated","previousLastUpdated","setLastUpdated","useCallback","useApprove","contractAddress","onApprove","useApproveGuildpad","tokenContractAddress","useSousApprove","sousId","earningTokenSymbol","requestedApproval","setRequestedApproval","useToast","toastSuccess","toastError","dispatch","useAppDispatch","chainId","handleApprove","chain","MAINNET_CHAIN_ID","updateUserAllowance","symbol","console","error","message","useSousApproveWithAmount","stakingAmount","useVaultApprove","cakeVaultContract","cakeContract","useCheckVaultApprovalStatus","isVaultApproved","setIsVaultApproved","allowance","call","response","currentAllowance","gt","checkApprovalStatus","useLotteryApprove","lotteryContract","FetchStatus","useTokenAllowance","tokenAddress","allowedAddress","NOT_FETCHED","SUCCESS","FAILED","balance","fetchStatus","balanceState","setBalanceState","fastRefresh","useRefresh","res","prev","fetchBalance","useTokenBalance","customAccount","acct","getWeb3NoAccount","balanceOf","getBscScanAddressUrl","BASE_BSC_SCAN_URL","getBscScanBlockCountdownUrl","block","useExit","stakingContract","onUnstake","txHash","info","useSousUnstake","enableEmergencyWithdraw","handleUnstake","updateUserStakedBalance","updateUserBalance","updateUserPendingReward","useFixedAprPoolUnstake","fixedAprPoolContract","onFixedAprUnstake","updateUserFixedAprDetails","useChainFinder","usePoolPrice","stakingTokenAddress","rewardTokenAddress","isFetchData","chainName","MoralisWeb3Api","useMoralisWeb3Api","_stakingTokenAddress","_rewardTokenAddress","stakingPrice","setStakingPrice","rewardPrice","setRewardPrice","utils","toChecksumAddress","token","getTokenPrice","result","_stakingTokenPrice","usdPrice","_rewardTokenPrice","fetchData","useFarmPrice","LPPrice","setLPPrice","_token1Address","_token2Address","_lpAddress","lpTotalSupply","getBalanceNumber","totalDeposits","token1Address","token2Address","pairToken","quoteToken","lpAddress","lpAddresses","findPrice","price","_token1Price","_token2Price","getTokenBalances","token_addresses","Promise","all","data","token_address","toLowerCase","_totalToken1InPool","Number","_totalToken2InPool","useSousStake","isUsingBnb","handleStake","onStake","useFixedAprPoolStake","onFixedAprPoolStake","useStake","defaultOptions","hydrate","identity","dehydrate","usePersistState","initialValue","userOptions","localStorageKey","valueFromLS","localStorage","getItem","JSON","parse","setValue","setItem","stringify","usePrevious","React","Latinise","latin_map","τ","Τ","latinise","input","replace","x","useClaim","onReward","useSousHarvest","handleHarvest","StyledLogo","styled","img","PairLogoImg","Flex","getImageUrlFromToken","getAddress","tokens","wbnb","iconExtension","TokenPairImage","primaryToken","secondaryToken","src","alt","FlexLayout","div","StyledHr","theme","colors","textSubtle","primary","ModalHr","hr","ActionContainer","MGG_active","mediaQueries","sm","xl","ActionTitles","ActionContent","Earned","text","Wrapper","StyledLinkExternal","LinkExternal","DetailsSection","stakingAddress","lpInfoAddress","href","Outer","Box","background","isDark","modal","Inner","Container","PageHeader","children","StyledTokenInput","isWarning","shadows","warning","inset","StyledInput","Input","xs","ModalInput","max","onChange","onSelectMax","isBalanceZero","style","position","margin","alignItems","justifyContent","pattern","inputMode","step","min","placeholder","size","mr","mb","getLiquidityUrlPathParts","mainTokenAddress","pairTokenAddress","wBNBAddressString","getWbnbAddress","mainTokenAddressString","pairTokenAddressString","secondPart","CardHeading","Tag","lpLabel","rewardToken","multiplier","isCommunityFarm","farmImage","tokenSymbol","farmSymbol","flexDirection","textAlign","split","variant","width","height","CircularIndeterminate","sx","display","CircularProgress","ViewMode","WithdrawModal","staked","earnings","onConfirm","onDismiss","tokenName","val","setVal","pendingTx","setPendingTx","fullBalance","getFullDisplayBalance","e","currentTarget","validity","valid","title","marginTop","fontSize","bold","lpSymbol","padding","disabled","DetailsCont","ActionDiv","ModalFooter","StyledFlex","CancelButton","Button","DepositButton","Stake","addLiquidityUrl","inputTitle","lpStakingContract","valNumber","fullBalanceNumber","handleChange","fetchFarmUserDataAsync","pids","handleSelectMax","isFinite","eq","ClaimModal","DepositModal","addTokenUrl","maxStake","setActiveSelect","userData","tokenBalance","stakedBalance","userRate","calculateUserRewardRate","RewardTokenBalance","formatTokenBalance","getBalanceAmount","toFormat","formatLPTokenBalance","formatStakedTokenBalance","formatTokenEarnings","isGreaterThanOrEqualTo","isApproved","setIsApproved","lpStakingAddress","stakingAddresses","useModal","onPresentStake","onPresentWithdraw","paddingBottom","as","target","hasEnded","onMouseEnter","onMouseLeave","StakeAction","userDataReady","useLocation","useLpTokenPrice","stakedBalanceBigNumber","lt","toLocaleString","toFixed","ROUND_DOWN","onPresentDeposit","formatStakedBalance","buttonTxt","isGreaterThan","parseFloat","renderStakingButtons","Action","CardActions","tokenBalanceAsString","stakedBalanceAsString","mt","HarvestAction","tokenRewardSymbol","earningsBigNumber","cakePrice","usePriceCakeBusd","earningsBusd","displayBalance","isZero","multipliedBy","toNumber","useContext","ThemeContext","textTransform","MGG_accent2","pr","borderRadius","ml","AccentGradient","keyframes","StyledCardAccent","primaryBright","secondary","FCard","MGG_container","isPromotedFarm","radii","card","FarmCard","expanded","removed","toLocaleLowerCase","formatTotalRewardRate","totalRewardRate","toUpperCase","earnLabel","liquidityUrlPathParts","apr","maximumFractionDigits","liquidityUrl","BASE_ADD_LIQUIDITY_URL","AddTokenUrl","BASE_SWAP_URL","isCommunity","remainingDays","CardActionsContainer","infoURL","BASE_INFO_URL","InfoBox","Text","Farms","Image","path","useRouteMatch","pathname","useFarms","farmsLP","userDataLoaded","query","CARD","sortOption","isArchived","includes","isActive","isMobile","useMedia","maxWidth","usePollFarmsData","stakedOnly","setStakedOnly","activeFarms","filter","farmCategory","FarmCategory","VAULT","stakedOnlyFarms","farmsList","farmsToDisplay","farmsToDisplayWithAPR","map","lpTotalInQuoteToken","busdPrice","totalLiquidity","getFarmApr","poolWeight","liquidity","lowercaseQuery","loadMoreRef","numberOfFarmsVisible","setNumberOfFarmsVisible","observerIsSet","setObserverIsSet","farmsStakedMemoized","orderBy","slice","sortFarms","IntersectionObserver","entries","isIntersecting","farmsCurrentlyVisible","rootMargin","threshold","observe","quoteTokenAddress","originalValue","label","earned","details","setFetchData","mggFarm","isMain","prevLPPrice","prevRewardPrice","setTimeout","rewardRate","farmV2Apr","getFarmV2Apr","totalStaked","tvr","minHeight","marginLeft","flex","borderBottom","Infinity","Page","paddingTop","exact"],"mappings":"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","file":"static/js/17.a5b084a8.chunk.js","sourcesContent":["import { useMemo } from 'react'\nimport useWeb3 from 'hooks/useWeb3'\nimport {\n  getBep20Contract,\n  getCakeContract,\n  getBunnyFactoryContract,\n  getBunnySpecialContract,\n  getPancakeRabbitContract,\n  getProfileContract,\n  getIfoV1Contract,\n  getIfoV2Contract,\n  getLotteryContract,\n  getLotteryTicketContract,\n  getMasterchefContract,\n  getPointCenterIfoContract,\n  getSouschefContract,\n  getClaimRefundContract,\n  getTradingCompetitionContract,\n  getEasterNftContract,\n  getErc721Contract,\n  getCakeVaultContract,\n  getPredictionsContract,\n  getChainlinkOracleContract,\n  getSouschefV2Contract,\n  getLotteryV2Contract,\n  getLpStakingContract,\n  getInoContract,\n  getIgoContract,\n  getVestingContract,\n  getFixedAprPoolContract,\n} from 'utils/contractHelpers'\n\n/**\n * Helper hooks to get specific contracts (by ABI)\n */\n\nexport const useInoContract = (address: string) => {\n  const web3 = useWeb3()\n  return useMemo(() => getInoContract(address, web3), [address, web3])\n}\n\nexport const useIgoContract = (address: string) => {\n  const web3 = useWeb3()\n  return useMemo(() => getIgoContract(address, web3), [address, web3])\n}\n\nexport const useVestingContract = (address: string) => {\n  const web3 = useWeb3()\n  return useMemo(() => getVestingContract(address, web3), [address, web3])\n}\n\nexport const useFixedAprPoolContract = (address: string) => {\n  const web3 = useWeb3()\n  return useMemo(() => getFixedAprPoolContract(address, web3), [address, web3])\n}\n\nexport const useIfoV1Contract = (address: string) => {\n  const web3 = useWeb3()\n  return useMemo(() => getIfoV1Contract(address, web3), [address, web3])\n}\n\nexport const useIfoV2Contract = (address: string) => {\n  const web3 = useWeb3()\n  return useMemo(() => getIfoV2Contract(address, web3), [address, web3])\n}\n\nexport const useERC20 = (address: string) => {\n  const web3 = useWeb3()\n  return useMemo(() => getBep20Contract(address, web3), [address, web3])\n}\n\nexport const useLPStakingContract = (address: string) => {\n  const web3 = useWeb3()\n  return useMemo(() => getLpStakingContract(address, web3), [address, web3])\n}\n\n/**\n * @see https://docs.openzeppelin.com/contracts/3.x/api/token/erc721\n */\nexport const useERC721 = (address: string) => {\n  const web3 = useWeb3()\n  return useMemo(() => getErc721Contract(address, web3), [address, web3])\n}\n\nexport const useCake = () => {\n  const web3 = useWeb3()\n  return useMemo(() => getCakeContract(web3), [web3])\n}\n\nexport const useBunnyFactory = () => {\n  const web3 = useWeb3()\n  return useMemo(() => getBunnyFactoryContract(web3), [web3])\n}\n\nexport const usePancakeRabbits = () => {\n  const web3 = useWeb3()\n  return useMemo(() => getPancakeRabbitContract(web3), [web3])\n}\n\nexport const useProfile = () => {\n  const web3 = useWeb3()\n  return useMemo(() => getProfileContract(web3), [web3])\n}\n\nexport const useLottery = () => {\n  const web3 = useWeb3()\n  return useMemo(() => getLotteryContract(web3), [web3])\n}\n\nexport const useLotteryTicket = () => {\n  const web3 = useWeb3()\n  return useMemo(() => getLotteryTicketContract(web3), [web3])\n}\n\nexport const useLotteryV2Contract = () => {\n  const web3 = useWeb3()\n  return useMemo(() => getLotteryV2Contract(web3), [web3])\n}\n\nexport const useMasterchef = () => {\n  const web3 = useWeb3()\n  return useMemo(() => getMasterchefContract(web3), [web3])\n}\n\nexport const useSousChef = (id) => {\n  const web3 = useWeb3()\n  return useMemo(() => getSouschefContract(id, web3), [id, web3])\n}\n\nexport const useSousChefV2 = (id) => {\n  const web3 = useWeb3()\n  return useMemo(() => getSouschefV2Contract(id, web3), [id, web3])\n}\n\nexport const usePointCenterIfoContract = () => {\n  const web3 = useWeb3()\n  return useMemo(() => getPointCenterIfoContract(web3), [web3])\n}\n\nexport const useBunnySpecialContract = () => {\n  const web3 = useWeb3()\n  return useMemo(() => getBunnySpecialContract(web3), [web3])\n}\n\nexport const useClaimRefundContract = () => {\n  const web3 = useWeb3()\n  return useMemo(() => getClaimRefundContract(web3), [web3])\n}\n\nexport const useTradingCompetitionContract = () => {\n  const web3 = useWeb3()\n  return useMemo(() => getTradingCompetitionContract(web3), [web3])\n}\n\nexport const useEasterNftContract = () => {\n  const web3 = useWeb3()\n  return useMemo(() => getEasterNftContract(web3), [web3])\n}\n\nexport const useCakeVaultContract = () => {\n  const web3 = useWeb3()\n  return useMemo(() => getCakeVaultContract(web3), [web3])\n}\n\nexport const usePredictionsContract = () => {\n  const web3 = useWeb3()\n  return useMemo(() => getPredictionsContract(web3), [web3])\n}\n\nexport const useChainlinkOracleContract = () => {\n  const web3 = useWeb3()\n  return useMemo(() => getChainlinkOracleContract(web3), [web3])\n}\n","import { useEffect, useState, useRef } from 'react'\nimport Web3 from 'web3'\nimport { useWeb3React } from '@web3-react/core'\nimport web3NoAccount from 'utils/web3'\n\n/**\n * Provides a web3 instance using the provider provided by useWallet\n * with a fallback of an httpProver\n * Recreate web3 instance only if the provider change\n */\nconst useWeb3 = () => {\n  const { library } = useWeb3React()\n  const refEth = useRef(library)\n  const [web3, setweb3] = useState(library ? new Web3(library) : web3NoAccount)\n\n  useEffect(() => {\n    if (library !== refEth.current) {\n      setweb3(library ? new Web3(library) : web3NoAccount)\n      refEth.current = library\n    }\n  }, [library])\n\n  return web3\n}\n\nexport default useWeb3\n","import React from 'react'\nimport { Button, useWalletModal } from '@metagg/mgg-uikit'\nimport useAuth from 'hooks/useAuth'\nimport { useTranslation } from 'contexts/Localization'\n\nconst UnlockButton = (props) => {\n  const { customTitle } = props\n  const { t } = useTranslation()\n  const { login, logout } = useAuth()\n  const { onPresentConnectModal } = useWalletModal(login, logout)\n\n  return (\n    <Button onClick={onPresentConnectModal} {...props} fullWidth>\n      {!customTitle ? 'Connect Wallet' : customTitle}\n    </Button>\n  )\n}\n\nexport default UnlockButton\n","import BigNumber from 'bignumber.js'\nimport { DEFAULT_GAS_LIMIT, DEFAULT_TOKEN_DECIMAL } from 'config'\nimport { ethers } from 'ethers'\nimport { Pair, Token, TokenAmount } from '@pancakeswap-libs/sdk'\nimport { Contract } from 'web3-eth-contract'\nimport { getLpContract, getLpStakingContract, getMasterchefContract } from 'utils/contractHelpers'\nimport farms from 'config/constants/farms'\nimport { getAddress, getCakeAddress } from 'utils/addressHelpers'\nimport tokens from 'config/constants/tokens'\nimport { web3WithArchivedNodeProvider } from './web3'\nimport { getBalanceAmount, getDecimalAmount } from './formatBalance'\nimport { BIG_TEN, BIG_ZERO } from './bigNumber'\nimport { useERC20 } from '../hooks/useContract'\n\nexport const approve = async (lpContract, masterChefContract, account) => {\n  return lpContract.methods\n    .approve(masterChefContract.options.address, ethers.constants.MaxUint256)\n    .send({ from: account })\n}\n\nexport const approveContract = async (tokenContract: Contract, spender: string, account) => {\n  return tokenContract.methods.approve(spender, ethers.constants.MaxUint256).send({ from: account })\n}\n\nexport const buyBox = async (inoContract, rarity, account, amount) => {\n  return inoContract.methods.buy(rarity).send({ from: account, value: getDecimalAmount(amount) })\n}\n\nexport const buyIgo = async (igoContract, account, amount) => {\n  return igoContract.methods.buyTokens(getDecimalAmount(amount).toString()).send({ from: account })\n}\n\nexport const claimVesting = async (vestingContract, account) => {\n  return vestingContract.methods.claimAll().send({ from: account })\n}\n\nexport const stakeFixedAprPool = async (contract, account, tier, amount) => {\n  return contract.methods.stake(tier, getDecimalAmount(amount).toString()).send({ from: account })\n}\n\nexport const unstakeFixedAprPool = async (contract, account, id) => {\n  return contract.methods.unstake(id).send({ from: account })\n}\n\nexport const approveWithAmount = async (lpContract, masterChefContract, account, amount) => {\n  return lpContract.methods.approve(masterChefContract.options.address, amount).send({ from: account })\n}\n\nexport const stake = async (masterChefContract, pid, amount, account, useV2 = false) => {\n  if (useV2) {\n    return masterChefContract.methods\n      .stake(new BigNumber(amount).times(DEFAULT_TOKEN_DECIMAL).toString())\n      .send({ from: account, gas: DEFAULT_GAS_LIMIT })\n      .on('transactionHash', (tx) => {\n        return tx.transactionHash\n      })\n  }\n  if (pid === 0) {\n    return masterChefContract.methods\n      .enterStaking(new BigNumber(amount).times(DEFAULT_TOKEN_DECIMAL).toString())\n      .send({ from: account, gas: DEFAULT_GAS_LIMIT })\n      .on('transactionHash', (tx) => {\n        return tx.transactionHash\n      })\n  }\n\n  return masterChefContract.methods\n    .deposit(pid, new BigNumber(amount).times(DEFAULT_TOKEN_DECIMAL).toString())\n    .send({ from: account, gas: DEFAULT_GAS_LIMIT })\n    .on('transactionHash', (tx) => {\n      return tx.transactionHash\n    })\n}\n\nexport const sousStake = async (sousChefContract, amount, decimals = 18, account) => {\n  return sousChefContract.methods\n    .deposit(new BigNumber(amount).times(BIG_TEN.pow(decimals)).toString())\n    .send({ from: account, gas: DEFAULT_GAS_LIMIT })\n    .on('transactionHash', (tx) => {\n      return tx.transactionHash\n    })\n}\n\nexport const sousStakeBnb = async (sousChefContract, amount, account) => {\n  return sousChefContract.methods\n    .deposit()\n    .send({\n      from: account,\n      gas: DEFAULT_GAS_LIMIT,\n      value: new BigNumber(amount).times(DEFAULT_TOKEN_DECIMAL).toString(),\n    })\n    .on('transactionHash', (tx) => {\n      return tx.transactionHash\n    })\n}\n\nexport const unstake = async (masterChefContract, pid, amount, account) => {\n  if (pid === 0) {\n    return masterChefContract.methods\n      .leaveStaking(new BigNumber(amount).times(DEFAULT_TOKEN_DECIMAL).toString())\n      .send({ from: account, gas: DEFAULT_GAS_LIMIT })\n      .on('transactionHash', (tx) => {\n        return tx.transactionHash\n      })\n  }\n\n  return masterChefContract.methods\n    .withdraw(pid, new BigNumber(amount).times(DEFAULT_TOKEN_DECIMAL).toString())\n    .send({ from: account, gas: DEFAULT_GAS_LIMIT })\n    .on('transactionHash', (tx) => {\n      return tx.transactionHash\n    })\n}\n\nexport const exit = async (contract: Contract, account) => {\n  return contract.methods\n    .exit()\n    .send({ from: account, gas: DEFAULT_GAS_LIMIT })\n    .on('transactionHash', (tx) => {\n      return tx.transactionHash\n    })\n}\n\nexport const sousUnstake = async (sousChefContract, amount, decimals, account) => {\n  return sousChefContract.methods\n    .withdraw(new BigNumber(amount).times(BIG_TEN.pow(decimals)).toString())\n    .send({ from: account, gas: DEFAULT_GAS_LIMIT })\n    .on('transactionHash', (tx) => {\n      return tx.transactionHash\n    })\n}\n\nexport const sousEmergencyUnstake = async (sousChefContract, account) => {\n  return sousChefContract.methods\n    .emergencyWithdraw()\n    .send({ from: account })\n    .on('transactionHash', (tx) => {\n      return tx.transactionHash\n    })\n}\n\nexport const claim = async (contract, account) => {\n  return contract.methods\n    .getReward()\n    .send({ from: account, gas: DEFAULT_GAS_LIMIT })\n    .on('transactionHash', (tx) => {\n      return tx.transactionHash\n    })\n}\n\nexport const harvest = async (masterChefContract, pid, account) => {\n  if (pid === 0) {\n    return masterChefContract.methods\n      .leaveStaking('0')\n      .send({ from: account, gas: DEFAULT_GAS_LIMIT })\n      .on('transactionHash', (tx) => {\n        return tx.transactionHash\n      })\n  }\n\n  return masterChefContract.methods\n    .deposit(pid, '0')\n    .send({ from: account, gas: DEFAULT_GAS_LIMIT })\n    .on('transactionHash', (tx) => {\n      return tx.transactionHash\n    })\n}\n\nexport const soushHarvest = async (sousChefContract, account) => {\n  return sousChefContract.methods\n    .deposit('0')\n    .send({ from: account, gas: DEFAULT_GAS_LIMIT })\n    .on('transactionHash', (tx) => {\n      return tx.transactionHash\n    })\n}\n\nexport const soushHarvestBnb = async (sousChefContract, account) => {\n  return sousChefContract.methods\n    .deposit()\n    .send({ from: account, gas: DEFAULT_GAS_LIMIT, value: BIG_ZERO })\n    .on('transactionHash', (tx) => {\n      return tx.transactionHash\n    })\n}\n\nconst chainId = parseInt(process.env.REACT_APP_CHAIN_ID, 10)\nconst cakeBnbPid = 251\nconst cakeBnbFarm = farms.find((farm) => farm.pid === cakeBnbPid)\n\n// const CAKE_TOKEN = new Token(chainId, getCakeAddress(), 18)\n// const WBNB_TOKEN = new Token(chainId, tokens.wbnb.address[chainId], 18)\n// const CAKE_BNB_TOKEN = new Token(chainId, getAddress(cakeBnbFarm.lpAddresses), 18)\n//\n// /**\n//  * Returns the total CAKE staked in the CAKE-BNB LP\n//  */\n// export const getUserStakeInCakeBnbLp = async (account: string, block?: number) => {\n//   try {\n//     const masterContract = getMasterchefContract(web3WithArchivedNodeProvider)\n//     const cakeBnbContract = getLpContract(getAddress(cakeBnbFarm.lpAddresses), web3WithArchivedNodeProvider)\n//     const totalSupplyLP = await cakeBnbContract.methods.totalSupply().call(undefined, block)\n//     const reservesLP = await cakeBnbContract.methods.getReserves().call(undefined, block)\n//     const cakeBnbBalance = await masterContract.methods.userInfo(cakeBnbPid, account).call(undefined, block)\n//\n//     const pair: Pair = new Pair(\n//       new TokenAmount(CAKE_TOKEN, reservesLP._reserve0.toString()),\n//       new TokenAmount(WBNB_TOKEN, reservesLP._reserve1.toString()),\n//     )\n//     const cakeLPBalance = pair.getLiquidityValue(\n//       pair.token0,\n//       new TokenAmount(CAKE_BNB_TOKEN, totalSupplyLP.toString()),\n//       new TokenAmount(CAKE_BNB_TOKEN, cakeBnbBalance.amount.toString()),\n//       false,\n//     )\n//\n//     return new BigNumber(cakeLPBalance.toSignificant(18))\n//   } catch (error) {\n//     console.error(`CAKE-BNB LP error: ${error}`)\n//     return BIG_ZERO\n//   }\n// }\n\nexport const getLPStakingDetails = async (stakingAddresses, account: string) => {\n  try {\n    const contract = getLpStakingContract(getAddress(stakingAddresses))\n\n    return {\n      stakedTokens: await contract.methods.balanceOf(account).call(),\n      totalDeposits: await contract.methods.totalSupply().call(),\n      rewardRate: await contract.methods.rewardRate().call(),\n    }\n  } catch (error) {\n    console.error(`LP Staking error: ${error}`)\n    return {\n      totalDeposits: '-',\n    }\n  }\n}\n\n/**\n * Gets the cake staked in the main pool\n */\nexport const getUserStakeInCakePool = async (account: string, block?: number) => {\n  try {\n    const masterContract = getMasterchefContract(web3WithArchivedNodeProvider)\n    const response = await masterContract.methods.userInfo(0, account).call(undefined, block)\n\n    return getBalanceAmount(new BigNumber(response.amount))\n  } catch (error) {\n    console.error('Error getting stake in CAKE pool', error)\n    return BIG_ZERO\n  }\n}\n","import React, { useEffect, useRef } from 'react'\nimport CountUp from 'react-countup'\nimport { Text, TextProps } from '@pancakeswap/uikit'\n\ninterface BalanceProps extends TextProps {\n  value: number\n  decimals?: number\n  unit?: string\n  isDisabled?: boolean\n  prefix?: string\n  onClick?: (event: React.MouseEvent<HTMLElement>) => void\n}\n\nconst Balance: React.FC<BalanceProps> = ({\n  value,\n  color = 'text',\n  decimals = 3,\n  isDisabled = false,\n  unit,\n  prefix,\n  onClick,\n  ...props\n}) => {\n  const previousValue = useRef(0)\n\n  useEffect(() => {\n    previousValue.current = value\n  }, [value])\n  return (\n    <Text color={isDisabled ? 'textDisabled' : color} onClick={onClick} {...props}>\n      {prefix && <span>{prefix}</span>}\n      <CountUp start={previousValue.current} end={value} decimals={decimals} duration={1} separator=\",\" />\n      {unit && <span>{unit}</span>}\n    </Text>\n  )\n}\n\nexport default Balance\n","import { useEffect, useRef } from 'react'\n\n/**\n * Returns the previous value of the given value\n *\n * @see https://reactjs.org/docs/hooks-faq.html#how-to-get-the-previous-props-or-state\n */\nconst usePreviousValue = (value: any) => {\n  const ref = useRef()\n\n  useEffect(() => {\n    ref.current = value\n  })\n\n  return ref.current\n}\n\nexport default usePreviousValue\n","import { useCallback, useState } from 'react'\nimport usePreviousValue from './usePreviousValue'\n\n/**\n * A helper hook to keep track of the time between events\n * Can also be used to force an effect to re-run\n */\nconst useLastUpdated = () => {\n  const [lastUpdated, setStateLastUpdated] = useState(Date.now())\n  const previousLastUpdated = usePreviousValue(lastUpdated)\n\n  const setLastUpdated = useCallback(() => {\n    setStateLastUpdated(Date.now())\n  }, [setStateLastUpdated])\n\n  return { lastUpdated, previousLastUpdated, setLastUpdated }\n}\n\nexport default useLastUpdated\n","import { useCallback, useEffect, useState } from 'react'\nimport { useWeb3React } from '@web3-react/core'\nimport { Contract } from 'web3-eth-contract'\nimport { ethers } from 'ethers'\nimport BigNumber from 'bignumber.js'\nimport { useAppDispatch } from 'state'\nimport { MAINNET_CHAIN_ID } from 'config'\nimport { updateUserAllowance } from 'state/actions'\nimport { approve, approveContract, approveWithAmount } from 'utils/callHelpers'\nimport { useTranslation } from 'contexts/Localization'\nimport { useCake, useCakeVaultContract, useERC20, useLottery, useSousChef } from './useContract'\nimport useToast from './useToast'\nimport useLastUpdated from './useLastUpdated'\n\n// Approve a Farm\nexport const useApprove = (lpContract: Contract, contractAddress: Contract) => {\n  const { account } = useWeb3React()\n  const handleApprove = useCallback(async () => {\n    try {\n      return await approve(lpContract, contractAddress, account)\n    } catch (e) {\n      return false\n    }\n  }, [account, lpContract, contractAddress])\n\n  return { onApprove: handleApprove }\n}\n\n// Approve a Guildpad\nexport const useApproveGuildpad = (tokenContractAddress: string, contractAddress: string) => {\n  const { account } = useWeb3React()\n  const tokenContract = useERC20(tokenContractAddress)\n  const handleApprove = useCallback(async () => {\n    try {\n      return await approveContract(tokenContract, contractAddress, account)\n    } catch (e) {\n      return false\n    }\n  }, [account, tokenContract, contractAddress])\n\n  return { onApprove: handleApprove }\n}\n\n// Approve a Pool\nexport const useSousApprove = (lpContract: Contract, sousId, earningTokenSymbol) => {\n  const [requestedApproval, setRequestedApproval] = useState(false)\n  const { toastSuccess, toastError } = useToast()\n  const { t } = useTranslation()\n  const dispatch = useAppDispatch()\n  const { account, chainId } = useWeb3React()\n  const sousChefContract = useSousChef(sousId)\n\n  const handleApprove = useCallback(async () => {\n    try {\n      setRequestedApproval(true)\n      const tx = await approve(lpContract, sousChefContract, account)\n      const chain = chainId ? chainId.toString() : MAINNET_CHAIN_ID\n      dispatch(updateUserAllowance(sousId, account, chain))\n      if (tx) {\n        toastSuccess(\n          t('Contract Enabled'),\n          t('You can now stake in the %symbol% pool!', { symbol: earningTokenSymbol }),\n        )\n        setRequestedApproval(false)\n      } else {\n        // user rejected tx or didn't go thru\n        toastError(t('Error'), t('Please try again. Confirm the transaction and make sure you are paying enough gas!'))\n        setRequestedApproval(false)\n      }\n    } catch (e) {\n      console.error(e)\n      toastError(t('Error'), e?.message)\n      setRequestedApproval(false)\n    }\n  }, [\n    account,\n    chainId,\n    dispatch,\n    lpContract,\n    sousChefContract,\n    sousId,\n    earningTokenSymbol,\n    t,\n    toastError,\n    toastSuccess,\n  ])\n\n  return { handleApprove, requestedApproval }\n}\n\nexport const useSousApproveWithAmount = (lpContract: Contract, sousId, earningTokenSymbol, stakingAmount) => {\n  const [requestedApproval, setRequestedApproval] = useState(false)\n  const { toastSuccess, toastError } = useToast()\n  const { t } = useTranslation()\n  const dispatch = useAppDispatch()\n  const { account, chainId } = useWeb3React()\n  const sousChefContract = useSousChef(sousId)\n\n  const handleApprove = useCallback(async () => {\n    try {\n      setRequestedApproval(true)\n      const tx = await approveWithAmount(lpContract, sousChefContract, account, stakingAmount.toString())\n      const chain = chainId ? chainId.toString() : MAINNET_CHAIN_ID\n      dispatch(updateUserAllowance(sousId, account, chain))\n      if (tx) {\n        toastSuccess(\n          t('Contract Enabled'),\n          t('You can now stake in the %symbol% pool!', { symbol: earningTokenSymbol }),\n        )\n        setRequestedApproval(false)\n      } else {\n        // user rejected tx or didn't go thru\n        toastError(t('Error'), t('Please try again. Confirm the transaction and make sure you are paying enough gas!'))\n        setRequestedApproval(false)\n      }\n    } catch (e) {\n      console.error(e)\n      toastError(t('Error'), e?.message)\n      setRequestedApproval(false)\n    }\n  }, [\n    account,\n    chainId,\n    dispatch,\n    lpContract,\n    sousChefContract,\n    sousId,\n    earningTokenSymbol,\n    stakingAmount,\n    t,\n    toastError,\n    toastSuccess,\n  ])\n\n  return { handleApprove, requestedApproval }\n}\n\n// Approve CAKE auto pool\nexport const useVaultApprove = (setLastUpdated: () => void) => {\n  const { account } = useWeb3React()\n  const [requestedApproval, setRequestedApproval] = useState(false)\n  const { t } = useTranslation()\n  const { toastSuccess, toastError } = useToast()\n  const cakeVaultContract = useCakeVaultContract()\n  const cakeContract = useCake()\n\n  const handleApprove = () => {\n    cakeContract.methods\n      .approve(cakeVaultContract.options.address, ethers.constants.MaxUint256)\n      .send({ from: account })\n      .on('sending', () => {\n        setRequestedApproval(true)\n      })\n      .on('receipt', () => {\n        toastSuccess(t('Contract Enabled'), t('You can now stake in the %symbol% vault!', { symbol: 'CAKE' }))\n        setLastUpdated()\n        setRequestedApproval(false)\n      })\n      .on('error', (error) => {\n        console.error(error)\n        toastError(t('Error'), t('Please try again. Confirm the transaction and make sure you are paying enough gas!'))\n        setRequestedApproval(false)\n      })\n  }\n\n  return { handleApprove, requestedApproval }\n}\n\nexport const useCheckVaultApprovalStatus = () => {\n  const [isVaultApproved, setIsVaultApproved] = useState(false)\n  const { account } = useWeb3React()\n  const cakeContract = useCake()\n  const cakeVaultContract = useCakeVaultContract()\n  const { lastUpdated, setLastUpdated } = useLastUpdated()\n  useEffect(() => {\n    const checkApprovalStatus = async () => {\n      try {\n        const response = await cakeContract.methods.allowance(account, cakeVaultContract.options.address).call()\n        const currentAllowance = new BigNumber(response)\n        setIsVaultApproved(currentAllowance.gt(0))\n      } catch (error) {\n        setIsVaultApproved(false)\n      }\n    }\n\n    checkApprovalStatus()\n  }, [account, cakeContract, cakeVaultContract, lastUpdated])\n\n  return { isVaultApproved, setLastUpdated }\n}\n\n// Approve the lottery\nexport const useLotteryApprove = () => {\n  const { account } = useWeb3React()\n  const cakeContract = useCake()\n  const lotteryContract = useLottery()\n\n  const handleApprove = useCallback(async () => {\n    try {\n      return await approve(cakeContract, lotteryContract, account)\n    } catch (e) {\n      return false\n    }\n  }, [account, cakeContract, lotteryContract])\n\n  return { onApprove: handleApprove }\n}\n\n// Approve an IFO\nexport const useIfoApprove = (tokenContract: Contract, spenderAddress: string) => {\n  const { account } = useWeb3React()\n  const onApprove = useCallback(async () => {\n    const tx = await tokenContract.methods.approve(spenderAddress, ethers.constants.MaxUint256).send({ from: account })\n    return tx\n  }, [account, spenderAddress, tokenContract])\n\n  return onApprove\n}\n","import { useEffect, useState } from 'react'\nimport BigNumber from 'bignumber.js'\nimport { useWeb3React } from '@web3-react/core'\nimport { getBep20Contract, getCakeContract } from 'utils/contractHelpers'\nimport { BIG_ZERO } from 'utils/bigNumber'\nimport useWeb3 from './useWeb3'\nimport useRefresh from './useRefresh'\nimport useLastUpdated from './useLastUpdated'\nimport { MAINNET_CHAIN_ID } from '../config'\nimport { getWeb3NoAccount } from '../utils/web3'\n\ntype UseTokenBalanceState = {\n  balance: BigNumber\n  fetchStatus: FetchStatus\n}\n\nexport enum FetchStatus {\n  NOT_FETCHED = 'not-fetched',\n  SUCCESS = 'success',\n  FAILED = 'failed',\n}\n\nconst useTokenBalance = (tokenAddress: string, customAccount = '0x0000') => {\n  const { NOT_FETCHED, SUCCESS, FAILED } = FetchStatus\n  const [balanceState, setBalanceState] = useState<UseTokenBalanceState>({\n    balance: BIG_ZERO,\n    fetchStatus: NOT_FETCHED,\n  })\n  const { account, chainId } = useWeb3React()\n  const chain = chainId ? chainId.toString() : MAINNET_CHAIN_ID\n  let acct = account\n  const { fastRefresh } = useRefresh()\n  if (customAccount !== '0x0000') {\n    acct = customAccount\n  }\n  useEffect(() => {\n    const fetchBalance = async () => {\n      const contract = getBep20Contract(tokenAddress, getWeb3NoAccount(chain))\n      try {\n        const res = await contract.methods.balanceOf(acct).call()\n        setBalanceState({ balance: new BigNumber(res), fetchStatus: SUCCESS })\n      } catch (e) {\n        console.error(e)\n        setBalanceState((prev) => ({\n          ...prev,\n          fetchStatus: FAILED,\n        }))\n      }\n    }\n\n    if (acct) {\n      fetchBalance()\n    }\n  }, [acct, chain, tokenAddress, fastRefresh, SUCCESS, FAILED])\n\n  return balanceState\n}\n\nexport const useTokenAllowance = (tokenAddress: string, allowedAddress: string) => {\n  const { NOT_FETCHED, SUCCESS, FAILED } = FetchStatus\n  const [balanceState, setBalanceState] = useState<UseTokenBalanceState>({\n    balance: BIG_ZERO,\n    fetchStatus: NOT_FETCHED,\n  })\n  const { account } = useWeb3React()\n  const { fastRefresh } = useRefresh()\n\n  useEffect(() => {\n    const fetchBalance = async () => {\n      const contract = getBep20Contract(tokenAddress)\n      try {\n        const res = await contract.methods.allowance(account, allowedAddress).call()\n        setBalanceState({ balance: new BigNumber(res), fetchStatus: SUCCESS })\n      } catch (e) {\n        console.error(e)\n        setBalanceState((prev) => ({\n          ...prev,\n          fetchStatus: FAILED,\n        }))\n      }\n    }\n\n    if (account) {\n      fetchBalance()\n    }\n  }, [account, tokenAddress, allowedAddress, fastRefresh, SUCCESS, FAILED])\n\n  return balanceState\n}\n\nexport const useTotalSupply = () => {\n  const { slowRefresh } = useRefresh()\n  const [totalSupply, setTotalSupply] = useState<BigNumber>()\n\n  useEffect(() => {\n    async function fetchTotalSupply() {\n      const cakeContract = getCakeContract()\n      const supply = await cakeContract.methods.totalSupply().call()\n      setTotalSupply(new BigNumber(supply))\n    }\n\n    fetchTotalSupply()\n  }, [slowRefresh])\n\n  return totalSupply\n}\n\nexport const useBurnedBalance = (tokenAddress: string) => {\n  const [balance, setBalance] = useState(BIG_ZERO)\n  const { slowRefresh } = useRefresh()\n\n  useEffect(() => {\n    const fetchBalance = async () => {\n      const contract = getBep20Contract(tokenAddress)\n      const res = await contract.methods.balanceOf('0x000000000000000000000000000000000000dEaD').call()\n      setBalance(new BigNumber(res))\n    }\n\n    fetchBalance()\n  }, [tokenAddress, slowRefresh])\n\n  return balance\n}\n\nexport const useGetBnbBalance = () => {\n  const [balance, setBalance] = useState(BIG_ZERO)\n  const { account } = useWeb3React()\n  const { lastUpdated, setLastUpdated } = useLastUpdated()\n  const web3 = useWeb3()\n\n  useEffect(() => {\n    const fetchBalance = async () => {\n      const walletBalance = await web3.eth.getBalance(account)\n      setBalance(new BigNumber(walletBalance))\n    }\n\n    if (account) {\n      fetchBalance()\n    }\n  }, [account, web3, lastUpdated, setBalance])\n\n  return { balance, refresh: setLastUpdated }\n}\n\nexport default useTokenBalance\n","import { BASE_BSC_SCAN_URL } from 'config'\n\nexport const getExplorerAddressUrl = (address: string) => {\n  return `${BASE_BSC_SCAN_URL}/address/${address}`\n}\n\nexport const getExplorerTransactionUrl = (address: string) => {\n  return `${BASE_BSC_SCAN_URL}/address/${address}`\n}\n\nexport const getBscScanAddressUrl = (address: string) => {\n  return `${BASE_BSC_SCAN_URL}/address/${address}`\n}\n\nexport const getBscScanTransactionUrl = (transactionHash: string) => {\n  return `${BASE_BSC_SCAN_URL}/tx/${transactionHash}`\n}\n\nexport const getBscScanBlockNumberUrl = (block: string | number) => {\n  return `${BASE_BSC_SCAN_URL}/block/${block}`\n}\n\nexport const getBscScanBlockCountdownUrl = (block: string | number) => {\n  return `${BASE_BSC_SCAN_URL}/block/countdown/${block}`\n}\n","import { useCallback } from 'react'\nimport { useWeb3React } from '@web3-react/core'\nimport { useAppDispatch } from 'state'\nimport { MAINNET_CHAIN_ID } from 'config'\nimport {\n  updateUserBalance,\n  updateUserPendingReward,\n  updateUserStakedBalance,\n  updateUserFixedAprDetails,\n} from 'state/actions'\nimport { exit, sousEmergencyUnstake, sousUnstake, unstake, unstakeFixedAprPool } from 'utils/callHelpers'\nimport { useLPStakingContract, useMasterchef, useSousChef, useFixedAprPoolContract } from './useContract'\n\nexport const useExit = (contract: string) => {\n  const { account } = useWeb3React()\n  const stakingContract = useLPStakingContract(contract)\n\n  const handleUnstake = useCallback(\n    async (amount: string) => {\n      const txHash = await exit(stakingContract, account)\n      console.info(txHash)\n    },\n    [account, stakingContract],\n  )\n\n  return { onUnstake: handleUnstake }\n}\n\nconst useUnstake = (pid: number) => {\n  const { account } = useWeb3React()\n  const masterChefContract = useMasterchef()\n\n  const handleUnstake = useCallback(\n    async (amount: string) => {\n      const txHash = await unstake(masterChefContract, pid, amount, account)\n      console.info(txHash)\n    },\n    [account, masterChefContract, pid],\n  )\n\n  return { onUnstake: handleUnstake }\n}\n\nexport const useSousUnstake = (sousId, enableEmergencyWithdraw = false) => {\n  const dispatch = useAppDispatch()\n  const { account, chainId } = useWeb3React()\n  const masterChefContract = useMasterchef()\n  const sousChefContract = useSousChef(sousId)\n\n  const handleUnstake = useCallback(\n    async (amount: string, decimals: number) => {\n      if (sousId === 0) {\n        const txHash = await unstake(masterChefContract, 0, amount, account)\n        console.info(txHash)\n      } else if (enableEmergencyWithdraw) {\n        const txHash = await sousEmergencyUnstake(sousChefContract, account)\n        console.info(txHash)\n      } else {\n        const txHash = await sousUnstake(sousChefContract, amount, decimals, account)\n        console.info(txHash)\n      }\n      const chain = chainId ? chainId.toString() : MAINNET_CHAIN_ID\n      dispatch(updateUserStakedBalance(sousId, account, chain))\n      dispatch(updateUserBalance(sousId, account, chain))\n      dispatch(updateUserPendingReward(sousId, account, chain))\n    },\n    [account, chainId, dispatch, enableEmergencyWithdraw, masterChefContract, sousChefContract, sousId],\n  )\n\n  return { onUnstake: handleUnstake }\n}\n\nexport const useFixedAprPoolUnstake = (sousId: number, contractAddress: string) => {\n  const dispatch = useAppDispatch()\n  const { account, chainId } = useWeb3React()\n  const fixedAprPoolContract = useFixedAprPoolContract(contractAddress)\n\n  const handleUnstake = useCallback(\n    async (id: number) => {\n      const txHash = await unstakeFixedAprPool(fixedAprPoolContract, account, id)\n      console.info(txHash)\n\n      const chain = chainId ? chainId.toString() : MAINNET_CHAIN_ID\n      dispatch(updateUserStakedBalance(sousId, account, chain))\n      dispatch(updateUserBalance(sousId, account, chain))\n      dispatch(updateUserFixedAprDetails(sousId, account, chain))\n\n      return txHash\n    },\n    [account, chainId, fixedAprPoolContract, sousId, dispatch],\n  )\n\n  return { onFixedAprUnstake: handleUnstake }\n}\n\nexport default useUnstake\n","const useChainFinder = (chainId: number) => {\n  switch (chainId) {\n    case 1:\n      return 'eth'\n    case 3:\n      return 'ropsten'\n    case 56:\n      return 'bsc'\n    case 97:\n      return 'bsc testnet'\n    default:\n      return 'bsc'\n  }\n}\n\nexport default useChainFinder\n","import { useEffect, useState } from 'react'\nimport { SPARKSWAP_API, API_ASSETS, API_SUMMARY, API_LIQUIDITY, API_LASTPRICE, API_DATA } from 'config'\nimport useWeb3 from 'hooks/useWeb3'\nimport BigNumber from 'bignumber.js/bignumber'\nimport { getBalanceNumber } from 'utils/formatBalance'\nimport { useMoralisWeb3Api } from 'react-moralis'\nimport { useWeb3React } from '@web3-react/core'\nimport useChainFinder from './chainHelpers'\n\nexport const useTokenPrice = (tokenAddress: string) => {\n  const MoralisWeb3Api = useMoralisWeb3Api()\n  const { chainId } = useWeb3React()\n\n  const chainName = useChainFinder(chainId)\n\n  const [tokenPrice, setTokenPrice] = useState(0)\n  const web3 = useWeb3()\n\n  let _tokenAddress\n  try {\n    if (tokenAddress === undefined) throw new Error('Token address undefined')\n    _tokenAddress = web3.utils.toChecksumAddress(tokenAddress)\n  } catch {\n    console.error('Invalid staking and reward address')\n  }\n\n  useEffect(() => {\n    const fetchData = async () => {\n      try {\n        const result = await MoralisWeb3Api.token.getTokenPrice({ chain: chainName, address: _tokenAddress })\n        const _tokenPrice = result.usdPrice\n\n        setTokenPrice(_tokenPrice)\n      } catch (error) {\n        console.error('Unable to fetch data:', error)\n      }\n    }\n\n    fetchData()\n  }, [setTokenPrice, _tokenAddress, MoralisWeb3Api, chainName])\n\n  return { tokenPrice }\n}\n\nexport const usePoolPrice = (stakingTokenAddress: string, rewardTokenAddress: string, isFetchData?: boolean) => {\n  const MoralisWeb3Api = useMoralisWeb3Api()\n  const { chainId } = useWeb3React()\n  let chainName: 'eth' | 'ropsten' | 'bsc' | 'bsc testnet' = 'eth'\n  chainName = useChainFinder(chainId)\n  const [stakingPrice, setStakingPrice] = useState(0)\n  const [rewardPrice, setRewardPrice] = useState(0)\n\n  const web3 = useWeb3()\n  let _stakingTokenAddress\n  let _rewardTokenAddress\n  try {\n    _stakingTokenAddress = web3.utils.toChecksumAddress(stakingTokenAddress)\n    _rewardTokenAddress = web3.utils.toChecksumAddress(rewardTokenAddress)\n  } catch {\n    console.error('Invalid staking and reward address')\n  }\n\n  useEffect(() => {\n    const fetchData = async () => {\n      try {\n        let result\n        result = await MoralisWeb3Api.token.getTokenPrice({ chain: chainName, address: _stakingTokenAddress })\n        const _stakingTokenPrice = result.usdPrice\n\n        result = await MoralisWeb3Api.token.getTokenPrice({ chain: chainName, address: _rewardTokenAddress })\n        const _rewardTokenPrice = result.usdPrice\n\n        setStakingPrice(_stakingTokenPrice)\n        setRewardPrice(_rewardTokenPrice)\n      } catch (error) {\n        console.error('Unable to fetch data:', error)\n      }\n    }\n    if (isFetchData) {\n      fetchData()\n    }\n  }, [\n    setStakingPrice,\n    setRewardPrice,\n    _stakingTokenAddress,\n    _rewardTokenAddress,\n    MoralisWeb3Api,\n    chainName,\n    isFetchData,\n  ])\n\n  return { stakingPrice, rewardPrice }\n}\n\nexport const useFarmPrice = (farm: any, chain: any, isFetchData?: boolean) => {\n  const MoralisWeb3Api = useMoralisWeb3Api()\n  let chainName: 'eth' | 'ropsten' | 'bsc' | 'bsc testnet' = 'eth'\n  chainName = useChainFinder(chain)\n  const [LPPrice, setLPPrice] = useState(0)\n  const [rewardPrice, setRewardPrice] = useState(0)\n  const web3 = useWeb3()\n\n  useEffect(() => {\n    if (!farm) {\n      return\n    }\n    const lpTotalSupply = getBalanceNumber(new BigNumber(farm.totalDeposits ?? 0))\n    const token1Address = farm.token.address[chain]\n    const token2Address = farm.pairToken.address[chain]\n    const rewardTokenAddress = farm.quoteToken.address[chain]\n    const lpAddress = farm.lpAddresses[chain]\n\n    let _token1Address\n    let _token2Address\n    let _rewardTokenAddress\n    let _lpAddress\n    try {\n      _token1Address = web3.utils.toChecksumAddress(token1Address)\n      _token2Address = web3.utils.toChecksumAddress(token2Address)\n      _rewardTokenAddress = web3.utils.toChecksumAddress(rewardTokenAddress)\n      _lpAddress = web3.utils.toChecksumAddress(lpAddress)\n    } catch {\n      console.error('Invalid staking and reward address')\n    }\n\n    const findPrice = async (tokenAddress: string) => {\n      const result = await MoralisWeb3Api.token.getTokenPrice({ chain: chainName, address: tokenAddress })\n      const price = result.usdPrice\n      return price\n    }\n\n    const fetchData = async () => {\n      try {\n        let _totalToken1InPool\n        let _totalToken2InPool\n        // result = await MoralisWeb3Api.token.getTokenPrice({chain: chainName, address: _token1Address})\n        // result = await MoralisWeb3Api.token.getTokenPrice({chain: chainName, address: _token2Address})\n        // result = await MoralisWeb3Api.token.getTokenPrice({chain: chainName, address: _rewardTokenAddress})\n        const _token1Price = findPrice(_token1Address)\n        const _token2Price = findPrice(_token2Address)\n        const _rewardTokenPrice = findPrice(_rewardTokenAddress)\n        const res = MoralisWeb3Api.account.getTokenBalances({\n          chain: chainName,\n          address: _lpAddress,\n          token_addresses: [_token1Address, _token2Address],\n        })\n        const data = await Promise.all([_token1Price, _token2Price, _rewardTokenPrice, res])\n        const result = data[3]\n        if (result[0].token_address.toLowerCase() === _token1Address.toLowerCase()) {\n          _totalToken1InPool = getBalanceNumber(new BigNumber(result[0].balance), Number(result[0].decimals))\n        } else {\n          _totalToken2InPool = getBalanceNumber(new BigNumber(result[0].balance), Number(result[0].decimals))\n        }\n\n        if (result[1].token_address.toLowerCase() === _token1Address.toLowerCase()) {\n          _totalToken1InPool = getBalanceNumber(new BigNumber(result[1].balance), Number(result[1].decimals))\n        } else {\n          _totalToken2InPool = getBalanceNumber(new BigNumber(result[1].balance), Number(result[1].decimals))\n        }\n\n        setLPPrice((_totalToken1InPool * data[0] + _totalToken2InPool * data[1]) / lpTotalSupply)\n        setRewardPrice(data[2])\n      } catch (error) {\n        console.error('Unable to fetch data:', error)\n      }\n    }\n    if (isFetchData) {\n      fetchData()\n    }\n  }, [web3.utils, farm, chain, isFetchData, setLPPrice, setRewardPrice, chainName, MoralisWeb3Api])\n\n  if (!farm) {\n    return { LPPrice: 0, rewardPrice: 0 }\n  }\n\n  return { LPPrice, rewardPrice }\n}\n\nexport default usePoolPrice\n","import { useCallback } from 'react'\nimport { useWeb3React } from '@web3-react/core'\nimport { Contract } from 'web3-eth-contract'\nimport { useAppDispatch } from 'state'\nimport { MAINNET_CHAIN_ID } from 'config'\nimport { updateUserStakedBalance, updateUserBalance } from 'state/actions'\nimport { stake, sousStake, sousStakeBnb, stakeFixedAprPool } from 'utils/callHelpers'\nimport { useMasterchef, useSousChef, useFixedAprPoolContract } from './useContract'\n\nconst useStake = (pid: number) => {\n  const { account } = useWeb3React()\n  const masterChefContract = useMasterchef()\n\n  const handleStake = useCallback(\n    async (amount: string, contract: Contract) => {\n      const txHash = await stake(contract ?? masterChefContract, pid, amount, account, !!contract)\n      console.info(txHash)\n    },\n    [account, masterChefContract, pid],\n  )\n\n  return { onStake: handleStake }\n}\n\nexport const useSousStake = (sousId: number, isUsingBnb = false) => {\n  const dispatch = useAppDispatch()\n  const { account, chainId } = useWeb3React()\n  const masterChefContract = useMasterchef()\n  const sousChefContract = useSousChef(sousId)\n\n  const handleStake = useCallback(\n    async (amount: string, decimals: number) => {\n      if (sousId === 0) {\n        await stake(masterChefContract, 0, amount, account)\n      } else if (isUsingBnb) {\n        await sousStakeBnb(sousChefContract, amount, account)\n      } else {\n        await sousStake(sousChefContract, amount, decimals, account)\n      }\n      const chain = chainId ? chainId.toString() : MAINNET_CHAIN_ID\n      dispatch(updateUserStakedBalance(sousId, account, chain))\n      dispatch(updateUserBalance(sousId, account, chain))\n    },\n    [account, dispatch, isUsingBnb, masterChefContract, sousChefContract, sousId, chainId],\n  )\n\n  return { onStake: handleStake }\n}\n\nexport const useFixedAprPoolStake = (contractAddress: string) => {\n  const { account } = useWeb3React()\n  const fixedAprPoolContract = useFixedAprPoolContract(contractAddress)\n\n  const handleStake = useCallback(\n    async (tier: string, amount, contract?: Contract) => {\n      const txHash = await stakeFixedAprPool(contract ?? fixedAprPoolContract, account, tier, amount)\n      console.info(txHash)\n      return txHash\n    },\n    [account, fixedAprPoolContract],\n  )\n\n  return { onFixedAprPoolStake: handleStake }\n}\n\nexport default useStake\n","import identity from 'lodash/identity'\nimport { useEffect, useState } from 'react'\n\ninterface UsePersistStateOptions {\n  localStorageKey: string\n  hydrate?: (value: any) => any\n  dehydrate?: (value: any) => any\n}\n\nconst defaultOptions = {\n  hydrate: identity,\n  dehydrate: identity,\n}\n\n/**\n * Same as \"useState\" but saves the value to local storage each time it changes\n */\nconst usePersistState = (initialValue: any, userOptions: UsePersistStateOptions) => {\n  const { localStorageKey, hydrate, dehydrate } = { ...defaultOptions, ...userOptions }\n  const [value, setValue] = useState(() => {\n    try {\n      const valueFromLS = localStorage.getItem(localStorageKey)\n\n      return valueFromLS ? hydrate(JSON.parse(valueFromLS)) : initialValue\n    } catch (error) {\n      return initialValue\n    }\n  })\n\n  useEffect(() => {\n    localStorage.setItem(localStorageKey, JSON.stringify(dehydrate(value)))\n  }, [value, localStorageKey, dehydrate])\n\n  return [value, setValue]\n}\n\nexport default usePersistState\n","import React, { useRef, useEffect } from 'react'\n\nfunction usePrevious(value) {\n  const ref = React.useRef()\n  useEffect(() => {\n    ref.current = value\n  }, [value])\n  return ref.current\n}\n\nexport default usePrevious\n","export const Latinise = {\n  latin_map: {\n    τ: 't',\n    Τ: 'T',\n  },\n}\n\nexport const latinise = (input: string) => {\n  return input.replace(/[^A-Za-z0-9[\\] ]/g, (x) => Latinise.latin_map[x] || x)\n}\n","import { useCallback } from 'react'\nimport { useWeb3React } from '@web3-react/core'\nimport { useAppDispatch } from 'state'\nimport { MAINNET_CHAIN_ID } from 'config'\nimport { updateUserBalance, updateUserPendingReward } from 'state/actions'\nimport { soushHarvest, soushHarvestBnb, harvest, claim } from 'utils/callHelpers'\nimport { useLPStakingContract, useMasterchef, useSousChef } from './useContract'\n\nexport const useClaim = (stakingContract: string) => {\n  const { account } = useWeb3React()\n  const contract = useLPStakingContract(stakingContract)\n\n  const handleClaim = useCallback(async () => {\n    const txHash = await claim(contract, account)\n    return txHash\n  }, [account, contract])\n\n  return { onReward: handleClaim }\n}\n\nexport const useHarvest = (farmPid: number) => {\n  const { account } = useWeb3React()\n  const masterChefContract = useMasterchef()\n\n  const handleHarvest = useCallback(async () => {\n    const txHash = await harvest(masterChefContract, farmPid, account)\n    return txHash\n  }, [account, farmPid, masterChefContract])\n\n  return { onReward: handleHarvest }\n}\n\nexport const useSousHarvest = (sousId, isUsingBnb = false) => {\n  const dispatch = useAppDispatch()\n  const { account, chainId } = useWeb3React()\n  const sousChefContract = useSousChef(sousId)\n  const masterChefContract = useMasterchef()\n\n  const handleHarvest = useCallback(async () => {\n    if (sousId === 0) {\n      await harvest(masterChefContract, 0, account)\n    } else if (isUsingBnb) {\n      await soushHarvestBnb(sousChefContract, account)\n    } else {\n      await soushHarvest(sousChefContract, account)\n    }\n    const chain = chainId ? chainId.toString() : MAINNET_CHAIN_ID\n    dispatch(updateUserPendingReward(sousId, account, chain))\n    dispatch(updateUserBalance(sousId, account, chain))\n  }, [account, dispatch, isUsingBnb, masterChefContract, sousChefContract, sousId, chainId])\n\n  return { onReward: handleHarvest }\n}\n","import React from 'react'\nimport { TokenPairImageProps as UIKitTokenPairImageProps } from '@pancakeswap/uikit'\nimport { Flex } from '@sparkpointio/sparkswap-uikit'\nimport styled from 'styled-components'\nimport tokens from 'config/constants/tokens'\nimport { Token } from 'config/constants/types'\nimport { getAddress } from 'utils/addressHelpers'\n\ninterface TokenPairImageProps extends Omit<UIKitTokenPairImageProps, 'primarySrc' | 'secondarySrc'> {\n  primaryToken: Token\n  secondaryToken: Token\n}\n\nconst StyledLogo = styled.img`\n  width: 50px;\n`\nconst PairLogoImg = styled(Flex)`\n  margin-bottom: 30px;\n  & > * {\n    margin-left: 10px;\n  }\n`\n\nconst getImageUrlFromToken = (token: Token) => {\n  const address = getAddress(token.symbol === 'BNB' ? tokens.wbnb.address : token.address)\n  return `./images/tokens/${address}.${token.iconExtension ?? 'svg'}`\n}\n\nconst TokenPairImage: React.FC<TokenPairImageProps> = ({ primaryToken, secondaryToken }) => {\n  return (\n    <PairLogoImg>\n      <StyledLogo src={getImageUrlFromToken(primaryToken)} alt=\"logo-img\" />\n      <StyledLogo src={getImageUrlFromToken(secondaryToken)} alt=\"logo-img\" />\n    </PairLogoImg>\n  )\n}\n\nexport default TokenPairImage\n","import styled from 'styled-components'\n\nconst FlexLayout = styled.div`\n  display: flex;\n  justify-content: center;\n  flex-wrap: wrap;\n  & > * {\n    min-width: 280px;\n    max-width: 31.5%;\n    min-height: 500px;\n    height: auto;\n    width: 100%;\n    margin: 0 8px;\n    margin-bottom: 32px;\n  }\n`\n\nexport default FlexLayout\n","import React from 'react'\nimport styled from 'styled-components'\n\nexport default styled.div`\n  background-color: ${({ theme }) => theme.colors.textSubtle};\n  height: 1px;\n  margin: 0 auto 32px;\n  width: 100%;\n`\n\nexport const StyledHr = styled.div`\n  border-style: solid none none none;\n  border-width: 2px;\n  border-color: ${({ theme }) => theme.colors.primary};\n  width: 95%;\n`\n\nexport const ModalHr = styled.hr`\n  border-style: solid none none none;\n  border-width: 2px;\n  border-color: ${({ theme }) => theme.colors.primary};\n  margin-top: 20px;\n  margin-bottom: 20px;\n  width: 100%;\n`\n","import styled from 'styled-components'\n\nexport const ActionContainer = styled.div`\n  padding: 16px;\n  border: 2px solid ${({ theme }) => theme.colors.MGG_active};\n  // border-radius: 16px;\n  flex-grow: 1;\n  flex-basis: 0;\n  margin-bottom: 16px;\n\n  ${({ theme }) => theme.mediaQueries.sm} {\n    margin-left: 12px;\n    margin-right: 12px;\n    margin-bottom: 0;\n    max-height: 100px;\n  }\n\n  ${({ theme }) => theme.mediaQueries.xl} {\n    margin-left: 48px;\n    margin-right: 0;\n    margin-bottom: 0;\n    max-height: 100px;\n  }\n`\n\nexport const ActionTitles = styled.div`\n  display: flex;\n`\n\nexport const ActionContent = styled.div`\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n`\nexport const Earned = styled.div`\n  font-weight: 600;\n  font-size: 20px;\n  color: ${({ theme }) => theme.colors.text};\n`\n","import React from 'react'\nimport { useTranslation } from 'contexts/Localization'\nimport styled from 'styled-components'\nimport { Text, Flex, LinkExternal, Skeleton } from '@pancakeswap/uikit'\n\nexport interface ExpandableSectionProps {\n  stakingAddress?: string\n  lpInfoAddress?: string\n  removed?: boolean\n  totalValueFormatted?: string\n  lpLabel?: string\n  addLiquidityUrl?: string\n}\n\nconst Wrapper = styled.div`\n  margin-top: 24px;\n`\n\nconst StyledLinkExternal = styled(LinkExternal)`\n  font-weight: 400;\n`\n\nconst DetailsSection: React.FC<ExpandableSectionProps> = ({ stakingAddress, lpInfoAddress }) => {\n  const { t } = useTranslation()\n\n  return (\n    <Wrapper>\n      {/* <Flex justifyContent=\"space-between\">\n        <Text>{t('Total Liquidity')}:</Text>\n        {totalValueFormatted ? <Text>{totalValueFormatted}</Text> : <Skeleton width={75} height={25} />}\n      </Flex>\n      {!removed && (\n        <StyledLinkExternal href={addLiquidityUrl}>{t('Get %symbol%', { symbol: lpLabel })}</StyledLinkExternal>\n      )} */}\n      <StyledLinkExternal href={stakingAddress}>View Staking Contract</StyledLinkExternal>\n      {lpInfoAddress && <StyledLinkExternal href={lpInfoAddress}>{t('See Pair Info')}</StyledLinkExternal>}\n    </Wrapper>\n  )\n}\n\nexport default DetailsSection\n","import React from 'react'\nimport styled from 'styled-components'\nimport { Box } from '@pancakeswap/uikit'\nimport Container from '../layout/Container'\n\nconst Outer = styled(Box)<{ background?: string }>`\n  background: ${({ theme, background }) =>\n    theme.isDark ? `linear-gradient(0deg, rgba(43,28,0,1) 5%, rgba(16,16,16,1) 100%)` : theme.colors.modal};\n  // background:  rgb(43,28,0);\n  // background: linear-gradient(0deg, rgba(43,28,0,1) 5%, rgba(16,16,16,1) 100%);\n`\n\nconst Inner = styled(Container)`\n  padding-top: 32px;\n  padding-bottom: 32px;\n`\n\nconst PageHeader: React.FC<{ background?: string }> = ({ background, children, ...props }) => (\n  <Outer background={background} {...props}>\n    <Inner>{children}</Inner>\n  </Outer>\n)\n\nexport default PageHeader\n","import React from 'react'\nimport styled from 'styled-components'\nimport { Button, Flex, Input, InputProps } from '@metagg/mgg-uikit'\nimport { useTranslation } from 'contexts/Localization'\n\ninterface ModalInputProps {\n  max: string\n  symbol: string\n  onSelectMax?: () => void\n  onChange: (e: React.FormEvent<HTMLInputElement>) => void\n  placeholder?: string\n  value: string\n  addLiquidityUrl?: string\n  inputTitle?: string\n  decimals?: number\n}\n\nconst getBoxShadow = ({ isWarning = false, theme }) => {\n  if (isWarning) {\n    return theme.shadows.warning\n  }\n\n  return theme.shadows.inset\n}\n\nconst StyledTokenInput = styled.div<InputProps>`\n  display: flex;\n  flex-direction: column;\n  background-color: transparent;\n  border: 2px solid ${({ theme }) => theme.colors.primary};\n  // box-shadow: ${getBoxShadow};\n  color: ${({ theme }) => theme.colors.text};\n  padding: 8px 16px 8px 0;\n  width: 100%;\n`\n\nconst StyledInput = styled(Input)`\n  box-shadow: none;\n  flex: 1;\n  margin: 0 8px;\n  padding: 0 8px;\n  background: none;\n\n  ${({ theme }) => theme.mediaQueries.xs} {\n    width: 80px;\n  }\n\n  ${({ theme }) => theme.mediaQueries.sm} {\n    width: auto;\n  }\n\n  &:focus:not(:disabled) {\n    box-shadow: none;\n  }\n`\n\n// const StyledErrorMessage = styled(Text)`\n//   position: absolute;\n//   bottom: -22px;\n//\n//   a {\n//     display: inline;\n//   }\n// `\n\nconst ModalInput: React.FC<ModalInputProps> = ({\n  max,\n  // symbol,\n  onChange,\n  onSelectMax,\n  value,\n  // addLiquidityUrl,\n  // inputTitle,\n  decimals = 18,\n}) => {\n  const { t } = useTranslation()\n  const isBalanceZero = max === '0' || !max\n\n  // const displayBalance = (balance: string) => {\n  //   if (isBalanceZero) {\n  //     return '0'\n  //   }\n  //   const balanceBigNumber = new BigNumber(balance)\n  //   if (balanceBigNumber.gt(0) && balanceBigNumber.lt(0.0001)) {\n  //     return balanceBigNumber.toLocaleString()\n  //   }\n  //   return balanceBigNumber.toFixed(3, BigNumber.ROUND_DOWN)\n  // }\n\n  return (\n    <div style={{ position: 'relative', margin: '15px 0px' }}>\n      <StyledTokenInput isWarning={isBalanceZero}>\n        {/* <Flex justifyContent=\"space-between\" pl=\"16px\">\n          <Text fontSize=\"14px\">{inputTitle}</Text>\n        </Flex> */}\n        <Flex alignItems=\"flex-end\" justifyContent=\"space-around\">\n          <StyledInput\n            pattern={`^[0-9]*[.,]?[0-9]{0,${decimals}}$`}\n            inputMode=\"decimal\"\n            step=\"any\"\n            min=\"0\"\n            onChange={onChange}\n            placeholder=\"0\"\n            value={value}\n          />\n          <Button size=\"sm\" onClick={onSelectMax} mr=\"8px\" mb=\"4px\">\n            {t('Max')}\n          </Button>\n          {/* <Text fontSize=\"16px\">{symbol}</Text> */}\n        </Flex>\n      </StyledTokenInput>\n      <Flex>\n        {/* <Text fontSize=\"14px\" color=\"textSubtle\">\n            {t('Available')}: {getFullDisplayBalance}\n          </Text>  */}\n      </Flex>\n      {/* {isBalanceZero && (\n        <StyledErrorMessage fontSize=\"14px\" color=\"failure\">\n          {t('No tokens to stake')}:{' '}\n          <Link fontSize=\"14px\" bold={false} href={addLiquidityUrl} external color=\"failure\">\n            {t('Get %symbol%', { symbol })}\n          </Link>\n        </StyledErrorMessage>\n      )} */}\n    </div>\n  )\n}\n\nexport default ModalInput\n","// Constructing the two forward-slash-separated parts of the 'Add Liquidity' URL\n// Each part of the url represents a different side of the LP pair.\nimport { getWbnbAddress } from './addressHelpers'\n\nconst getLiquidityUrlPathParts = ({ mainTokenAddress, pairTokenAddress }) => {\n  const chainId = process.env.REACT_APP_CHAIN_ID\n  const wBNBAddressString = getWbnbAddress()\n  const mainTokenAddressString: string = mainTokenAddress ? mainTokenAddress[chainId] : null\n  const pairTokenAddressString: string = pairTokenAddress ? pairTokenAddress[chainId] : null\n  const firstPart =\n    !mainTokenAddressString || mainTokenAddressString === wBNBAddressString ? 'ETH' : mainTokenAddressString\n  const secondPart =\n    !pairTokenAddressString || pairTokenAddressString === wBNBAddressString ? 'ETH' : pairTokenAddressString\n  return `${firstPart}/${secondPart}`\n}\n\nexport default getLiquidityUrlPathParts\n","import React from 'react'\nimport styled from 'styled-components'\nimport { Tag, Flex, Heading, Image } from '@sparkpointio/sparkswap-uikit'\nimport { CommunityTag, CoreTag } from 'components/Tags'\nimport { Token } from 'config/constants/types'\nimport TokenPairImage from 'components/TokenPairImage'\n\nexport interface ExpandableSectionProps {\n  lpLabel?: string\n  multiplier?: string\n  isCommunityFarm?: boolean\n  farmImage?: string\n  farmSymbol?: string\n  tokenSymbol?: string\n  rewardToken?: string\n  token: Token\n  quoteToken: Token\n  pairToken?: Token\n}\n\nconst Wrapper = styled(Flex)`\n  border-bottom: 5px solid ${({ theme }) => theme.colors.MGG_active};\n  padding: 24px;\n  svg {\n    margin-right: 4px;\n  }\n`\n\nconst MultiplierTag = styled(Tag)`\n  margin-left: 4px;\n`\n\nconst CardHeading: React.FC<ExpandableSectionProps> = ({\n  lpLabel,\n  multiplier,\n  isCommunityFarm,\n  farmImage,\n  tokenSymbol,\n  farmSymbol,\n  rewardToken,\n  token,\n  pairToken,\n}) => {\n  return (\n    <Wrapper justifyContent=\"space-between\" alignItems=\"center\" mb=\"12px\">\n      <Flex flexDirection=\"row\" alignItems=\"\">\n        <Heading mb=\"4px\" style={{ textAlign: 'left' }} size=\"lg\">\n          Stake <br /> {lpLabel.split(' ')[0]} <br /> Earn {rewardToken}\n        </Heading>\n      </Flex>\n      <TokenPairImage variant=\"inverted\" primaryToken={token} secondaryToken={pairToken} width={64} height={64} />\n      {/* <Image src={`/images/farms/${farmImage}.svg`} alt={tokenSymbol} width={64} height={64} /> */}\n    </Wrapper>\n  )\n}\n\nexport default CardHeading\n","import * as React from 'react'\nimport { Box, CircularProgress } from '@material-ui/core'\n\nexport default function CircularIndeterminate() {\n  return (\n    <Box sx={{ display: 'flex', color: '#FFF' }}>\n      <CircularProgress color=\"inherit\" />\n    </Box>\n  )\n}\n","export type TableProps = {\n  data?: TableDataTypes[]\n  selectedFilters?: string\n  sortBy?: string\n  sortDir?: string\n  onSort?: (value: string) => void\n}\n\nexport type ColumnsDefTypes = {\n  id: number\n  label: string\n  name: string\n  sortable: boolean\n}\n\nexport type ScrollBarProps = {\n  ref: string\n  width: number\n}\n\nexport type TableDataTypes = {\n  POOL: string\n  APR: string\n  EARNED: string\n  STAKED: string\n  DETAILS: string\n  LINKS: string\n}\n\nexport const MobileColumnSchema: ColumnsDefTypes[] = [\n  {\n    id: 1,\n    name: 'farm',\n    sortable: true,\n    label: '',\n  },\n  {\n    id: 2,\n    name: 'earned',\n    sortable: true,\n    label: 'Earned',\n  },\n  {\n    id: 3,\n    name: 'apr',\n    sortable: true,\n    label: 'APR',\n  },\n  {\n    id: 6,\n    name: 'details',\n    sortable: true,\n    label: '',\n  },\n]\n\nexport const DesktopColumnSchema: ColumnsDefTypes[] = [\n  {\n    id: 1,\n    name: 'farm',\n    sortable: true,\n    label: '',\n  },\n  {\n    id: 2,\n    name: 'earned',\n    sortable: true,\n    label: 'Earned',\n  },\n  {\n    id: 3,\n    name: 'apr',\n    sortable: true,\n    label: 'APR',\n  },\n  {\n    id: 4,\n    name: 'liquidity',\n    sortable: true,\n    label: 'Liquidity',\n  },\n  {\n    id: 5,\n    name: 'multiplier',\n    sortable: true,\n    label: 'Multiplier',\n  },\n  {\n    id: 6,\n    name: 'details',\n    sortable: true,\n    label: '',\n  },\n]\n\nexport enum ViewMode {\n  'TABLE' = 'TABLE',\n  'CARD' = 'CARD',\n}\n","import BigNumber from 'bignumber.js'\nimport React, { useCallback, useMemo, useState } from 'react'\nimport { Button, Flex, Modal, Text } from '@sparkpointio/sparkswap-uikit'\nimport { useTranslation } from 'contexts/Localization'\nimport { getFullDisplayBalance } from 'utils/formatBalance'\nimport useToast from '../../../hooks/useToast'\n\ninterface WithdrawModalProps {\n  farm?: any\n  staked?: any\n  earnings?: any\n  max: BigNumber\n  onConfirm: (amount: string) => void\n  onDismiss?: () => void\n  tokenName?: string\n}\n\nconst WithdrawModal: React.FC<WithdrawModalProps> = ({\n  farm,\n  staked,\n  earnings,\n  onConfirm,\n  onDismiss,\n  max,\n  tokenName = '',\n}) => {\n  const [val, setVal] = useState('')\n  const [pendingTx, setPendingTx] = useState(false)\n  const { t } = useTranslation()\n  const fullBalance = useMemo(() => {\n    return getFullDisplayBalance(max)\n  }, [max])\n\n  const valNumber = new BigNumber(val)\n  const fullBalanceNumber = new BigNumber(fullBalance)\n  const { toastError, toastSuccess } = useToast()\n\n  const handleChange = useCallback(\n    (e: React.FormEvent<HTMLInputElement>) => {\n      if (e.currentTarget.validity.valid) {\n        setVal(e.currentTarget.value.replace(/,/g, '.'))\n      }\n    },\n    [setVal],\n  )\n\n  const handleSelectMax = useCallback(() => {\n    setVal(fullBalance)\n  }, [fullBalance, setVal])\n\n  return (\n    <Modal title=\"\" onDismiss={onDismiss}>\n      {/* <ModalInput\n        onSelectMax={handleSelectMax}\n        onChange={handleChange}\n        value={val}\n        max={fullBalance}\n        symbol={tokenName}\n        inputTitle={t('Unstake')}\n      />\n      <ModalActions>\n        <Button variant=\"secondary\" onClick={onDismiss} width=\"100%\" disabled={pendingTx}>\n          {t('Cancel')}\n        </Button>\n        <Button\n          disabled={pendingTx || !valNumber.isFinite() || valNumber.eq(0) || valNumber.gt(fullBalanceNumber)}\n          onClick={async () => {\n            setPendingTx(true)\n            await onConfirm(val)\n            setPendingTx(false)\n            onDismiss()\n          }}\n          width=\"100%\"\n        >\n          {pendingTx ? t('Pending Confirmation') : t('Confirm')}\n        </Button>\n      </ModalActions> */}\n      <Flex marginTop=\"-10px\" style={{ width: '450px' }} alignItems=\"center\" flexDirection=\"column\">\n        <Text>You will be claiming the reward amount of </Text>\n        <Text fontSize=\"28px\" bold>\n          {earnings} {farm.quoteToken.symbol}\n        </Text>\n        <Text>and withdrawing the staked amount of</Text>\n        <Text fontSize=\"28px\" bold>\n          {staked} {farm.lpSymbol}\n        </Text>\n      </Flex>\n      <Flex justifyContent=\"center\" margin=\"24px\" padding=\"0px 35px\">\n        <Button\n          disabled={pendingTx}\n          fullWidth\n          onClick={async () => {\n            setPendingTx(true)\n            try {\n              await onConfirm(val)\n              toastSuccess(t('Unstaked!'), t('Your LPs and earnings have been transferred to your wallet'))\n              onDismiss()\n            } catch (e) {\n              toastError(\n                t('Error'),\n                t('Please try again. Confirm the transaction and make sure you are paying enough gas!'),\n              )\n              console.error(e)\n            } finally {\n              setPendingTx(false)\n            }\n          }}\n        >\n          Confirm\n        </Button>\n      </Flex>\n    </Modal>\n  )\n}\n\nexport default WithdrawModal\n","import React from 'react'\nimport styled, { ThemeContext } from 'styled-components'\n\nconst Container = styled.div`\n  min-width: 720px;\n  display: flex;\n  justify-content: space-between;\n  height: auto;\n`\n\nconst DetailsCont = styled.div`\n  width: 30%;\n  height: auto;\n  overflow: visible;\n`\n\nconst ActionDiv = styled.div`\n  margin: 15px 0px;\n  padding: 10px;\n`\nconst ModalFooter = styled.div`\n  min-width: 720px;\n  display: flex;\n  justify-content: space-between;\n`\n\nexport { DetailsCont, ActionDiv, ModalFooter }\nexport default Container\n","import React from 'react'\nimport styled from 'styled-components'\nimport { Flex, Button } from '@sparkpointio/sparkswap-uikit'\n\nconst Container = styled.div`\n  margin-top: -30px;\n  display: flex;\n  flex-direction: column;\n  min-width: 500px;\n`\nconst StyledFlex = styled(Flex)`\n  padding: 10px 0px;\n`\nconst CancelButton = styled(Button)`\n  flex: 1;\n  margin-right: 10px;\n`\nconst DepositButton = styled(Button)`\n  flex: 1;\n  margin-left: 10px;\n`\n\nexport { StyledFlex, CancelButton, DepositButton }\nexport default Container\n","import BigNumber from 'bignumber.js'\nimport React, { useCallback, useMemo, useState } from 'react'\nimport { useWeb3React } from '@web3-react/core'\nimport { Contract } from 'web3-eth-contract'\nimport { Modal, Text } from '@metagg/mgg-uikit'\nimport ModalInput from 'components/ModalInput'\nimport { getFullDisplayBalance } from 'utils/formatBalance'\nimport Container, { CancelButton, DepositButton, StyledFlex } from './Styled'\nimport useToast from '../../../../hooks/useToast'\nimport { useTranslation } from '../../../../contexts/Localization'\nimport { useAppDispatch } from '../../../../state'\nimport { fetchFarmUserDataAsync } from '../../../../state/farms'\nimport { MAINNET_CHAIN_ID } from '../../../../config'\n\ninterface StakeModalInterface {\n  pid: number\n  onDismiss?: () => void\n  max: BigNumber\n  symbol: string\n  placeholder?: string\n  addLiquidityUrl?: string\n  inputTitle?: string\n  onConfirm: (amount: string, contract: Contract) => void\n  lpStakingContract?: Contract\n}\n\nconst Stake: React.FC<StakeModalInterface> = ({\n  pid,\n  onDismiss,\n  max,\n  symbol,\n  addLiquidityUrl,\n  inputTitle,\n  onConfirm,\n  lpStakingContract,\n}) => {\n  const [val, setVal] = useState('0')\n  const [pendingTx, setPendingTx] = useState(false)\n  const valNumber = new BigNumber(val)\n  const fullBalance = useMemo(() => {\n    return getFullDisplayBalance(max)\n  }, [max])\n\n  const { toastError, toastSuccess } = useToast()\n  const { t } = useTranslation()\n  const dispatch = useAppDispatch()\n  const { account, chainId } = useWeb3React()\n  const chain = chainId ? chainId.toString() : MAINNET_CHAIN_ID\n  const fullBalanceNumber = new BigNumber(fullBalance)\n\n  const handleChange = useCallback(\n    (e: React.FormEvent<HTMLInputElement>) => {\n      if (e.currentTarget.validity.valid) {\n        setVal(e.currentTarget.value.replace(/,/g, '.'))\n      }\n    },\n    [setVal],\n  )\n\n  const onClick = async () => {\n    try {\n      setPendingTx(true)\n      await onConfirm(val, lpStakingContract)\n      setPendingTx(false)\n      toastSuccess(`${t('Staked')}!`, t('Your %symbol% tokens have been staked to the pool!', { symbol }))\n      onDismiss()\n    } catch (e) {\n      toastError(t('Error'), t('Please try again. Confirm the transaction and make sure you are paying enough gas!'))\n      console.error(e)\n    } finally {\n      setPendingTx(false)\n    }\n    dispatch(fetchFarmUserDataAsync({ account, pids: [pid], chain }))\n  }\n\n  const handleSelectMax = useCallback(() => {\n    setVal(fullBalance)\n  }, [fullBalance, setVal])\n  return (\n    <Modal title=\"\" onDismiss={!pendingTx && onDismiss}>\n      <Container>\n        <Text>Stake amount: </Text>\n        <ModalInput\n          value={val}\n          onSelectMax={handleSelectMax}\n          onChange={handleChange}\n          max={fullBalance}\n          symbol={symbol}\n          addLiquidityUrl={addLiquidityUrl}\n          //  inputTitle={t('Stake')}\n        />\n      </Container>\n      <StyledFlex justifyContent=\"space-between\">\n        <Text>{symbol} balance: </Text>\n        <Text>{fullBalance}</Text>\n      </StyledFlex>\n      <StyledFlex justifyContent=\"space-between\">\n        <CancelButton onClick={onDismiss}>Close</CancelButton>\n        <DepositButton\n          onClick={onClick}\n          // disable Deposit button if not yet approved\n          disabled={pendingTx || !valNumber.isFinite() || valNumber.eq(0) || valNumber.gt(fullBalanceNumber)}\n        >\n          Deposit\n        </DepositButton>\n      </StyledFlex>\n    </Modal>\n  )\n}\n\nexport default Stake\n","import React from 'react'\nimport BigNumber from 'bignumber.js'\nimport { Button, Modal, Text, Flex } from '@metagg/mgg-uikit'\n\ninterface ClaimModalProps {\n  onDismiss?: () => void\n}\n\nconst ClaimModal: React.FC<ClaimModalProps> = ({ onDismiss }) => {\n  return (\n    <Modal title=\"\" onDismiss={onDismiss}>\n      {/* <ModalInput\n        onSelectMax={handleSelectMax}\n        onChange={handleChange}\n        value={val}\n        max={fullBalance}\n        symbol={tokenName}\n        inputTitle={t('Unstake')}\n      />\n      <ModalActions>\n        <Button variant=\"secondary\" onClick={onDismiss} width=\"100%\" disabled={pendingTx}>\n          {t('Cancel')}\n        </Button>\n        <Button\n          disabled={pendingTx || !valNumber.isFinite() || valNumber.eq(0) || valNumber.gt(fullBalanceNumber)}\n          onClick={async () => {\n            setPendingTx(true)\n            await onConfirm(val)\n            setPendingTx(false)\n            onDismiss()\n          }}\n          width=\"100%\"\n        >\n          {pendingTx ? t('Pending Confirmation') : t('Confirm')}\n        </Button>\n      </ModalActions> */}\n      <Flex marginTop=\"-10px\" style={{ width: '450px' }} alignItems=\"center\" flexDirection=\"column\">\n        <Text>You will be claiming the reward amount of </Text>\n        <Text fontSize=\"28px\" bold>\n          78.912 SRK Tokens\n        </Text>\n      </Flex>\n      <Flex justifyContent=\"center\" margin=\"24px\" padding=\"0px 35px\">\n        <Button fullWidth>Confirm</Button>\n      </Flex>\n    </Modal>\n  )\n}\n\nexport default ClaimModal\n","import BigNumber from 'bignumber.js'\nimport React, { useCallback, useState } from 'react'\nimport { Contract } from 'web3-eth-contract'\nimport { useWeb3React } from '@web3-react/core'\nimport { Button, Modal, Skeleton, Text, useModal } from '@metagg/mgg-uikit'\nimport { useApprove } from 'hooks/useApprove'\nimport { useERC20, useLPStakingContract } from 'hooks/useContract'\nimport useTokenBalance from 'hooks/useTokenBalance'\nimport { useAppDispatch } from 'state'\nimport { Farm } from 'state/types'\nimport { fetchFarmUserDataAsync } from 'state/farms'\nimport { getAddress } from 'utils/addressHelpers'\nimport { getBalanceAmount } from 'utils/formatBalance'\nimport { useTranslation } from 'contexts/Localization'\nimport WithdrawModal from './WithdrawModal'\nimport Container, { ActionDiv, DetailsCont, ModalFooter } from './Styled'\nimport { ModalHr } from './Divider'\nimport StakeModal from './Modals/Stake'\nimport ClaimModal from './Modals/ClaimModal'\nimport { MAINNET_CHAIN_ID } from '../../../config'\nimport { calculateUserRewardRate } from '../../../utils/farmHelpers'\n\ninterface DepositModalProps {\n  max: BigNumber\n  onConfirm: (amount: string, contract: Contract) => void\n  onDismiss?: () => void\n  tokenName?: string\n  addLiquidityUrl?: string\n  addTokenUrl?: string\n  farm?: Farm\n  handleUnstake?: (amount: string) => void\n  maxStake?: BigNumber\n}\n\nconst DepositModal: React.FC<DepositModalProps> = ({\n  max,\n  onConfirm,\n  onDismiss,\n  tokenName = '',\n  addLiquidityUrl,\n  addTokenUrl,\n  handleUnstake,\n  farm,\n  maxStake,\n}) => {\n  const [requestedApproval, setRequestedApproval] = useState(false)\n  const { t } = useTranslation()\n  const [activeSelect, setActiveSelect] = useState(false)\n  const { allowance, tokenBalance, stakedBalance, earnings } = farm.userData || {}\n  const { account, chainId } = useWeb3React()\n  const chain = chainId ? chainId.toString() : MAINNET_CHAIN_ID\n  const userRate = calculateUserRewardRate(farm, chain)\n  const dispatch = useAppDispatch()\n  const { pid, lpAddresses } = farm\n  const lpAddress = getAddress(lpAddresses, chain)\n  const lpContract = useERC20(lpAddress)\n  const RewardTokenBalance = useTokenBalance(getAddress(farm.quoteToken.address, chain))\n  const formatTokenBalance = getBalanceAmount(RewardTokenBalance.balance).toFormat(6)\n  const formatLPTokenBalance = getBalanceAmount(new BigNumber(tokenBalance)).toFormat(6)\n  const formatStakedTokenBalance = getBalanceAmount(new BigNumber(stakedBalance)).toFormat(6)\n  const formatTokenEarnings = getBalanceAmount(new BigNumber(earnings)).toFormat(6)\n  const [isApproved, setIsApproved] = useState(\n    account && allowance && new BigNumber(allowance).isGreaterThanOrEqualTo(tokenBalance),\n  )\n  const lpStakingAddress = getAddress(farm.stakingAddresses, chain)\n  const lpStakingContract = useLPStakingContract(lpStakingAddress)\n  const { onApprove } = useApprove(lpContract, lpStakingContract)\n  const handleApprove = useCallback(async () => {\n    try {\n      setRequestedApproval(true)\n      await onApprove()\n      dispatch(fetchFarmUserDataAsync({ account, pids: [pid], chain }))\n      setIsApproved(true)\n      setRequestedApproval(false)\n    } catch (e) {\n      console.error(e)\n    }\n  }, [onApprove, dispatch, account, pid, chain])\n  const [onPresentStake] = useModal(\n    <StakeModal\n      pid={pid}\n      onConfirm={onConfirm}\n      lpStakingContract={lpStakingContract}\n      max={max}\n      symbol={tokenName}\n      addLiquidityUrl={addLiquidityUrl}\n      inputTitle={t('Stake')}\n    />,\n  )\n\n  const [onPresentClaim] = useModal(<ClaimModal />)\n  const [onPresentWithdraw] = useModal(\n    <WithdrawModal\n      farm={farm}\n      staked={formatStakedTokenBalance}\n      earnings={formatTokenEarnings}\n      max={maxStake}\n      onConfirm={handleUnstake}\n      tokenName={tokenName}\n    />,\n  )\n\n  return (\n    <Modal title={t('Account Info')} onDismiss={onDismiss}>\n      <Text color=\"textSubtle\" fontSize=\"14px\" style={{ paddingBottom: '30px', marginTop: '-40px' }}>\n        Staking, balances & earnings\n      </Text>\n      <Container>\n        <DetailsCont>\n          <Text bold fontSize=\"24px\">\n            {formatTokenBalance ?? <Skeleton width={60} display=\"inline-block\" />}\n          </Text>\n          <Text color=\"textSubtle\" fontSize=\"14px\">\n            {farm.quoteToken.symbol}\n          </Text>\n          <ActionDiv style={{ padding: '0px' }}>\n            <Button fullWidth as=\"a\" target=\"_blank\" href={addTokenUrl}>\n              Get {farm.quoteToken.symbol}\n            </Button>\n          </ActionDiv>\n        </DetailsCont>\n        <DetailsCont>\n          <Text bold fontSize=\"24px\">\n            {formatLPTokenBalance ?? <Skeleton width={60} display=\"inline-block\" />}\n          </Text>\n          <Text color=\"textSubtle\" fontSize=\"14px\">\n            {tokenName} Tokens\n          </Text>\n          <ActionDiv style={{ padding: '0px' }}>\n            <Button fullWidth as=\"a\" target=\"_blank\" href={addLiquidityUrl}>\n              Get {tokenName}\n            </Button>\n          </ActionDiv>\n        </DetailsCont>\n        <DetailsCont>\n          <Text bold fontSize=\"24px\">\n            {formatStakedTokenBalance ?? <Skeleton width={60} display=\"inline-block\" />}\n          </Text>\n          <Text color=\"textSubtle\" fontSize=\"14px\">\n            Your {tokenName} Deposits\n          </Text>\n          <ActionDiv style={{ padding: '0px' }}>\n            {isApproved ? (\n              <Button fullWidth onClick={onPresentStake} disabled={farm.hasEnded}>\n                Stake {tokenName}\n              </Button>\n            ) : (\n              <Button fullWidth onClick={handleApprove} disabled={requestedApproval}>\n                Enable Farm\n              </Button>\n            )}\n          </ActionDiv>\n        </DetailsCont>\n      </Container>\n      <ModalHr />\n      <ModalFooter>\n        <DetailsCont>\n          <Text bold fontSize=\"24px\">\n            {userRate}\n          </Text>\n          <Text color=\"textSubtle\" fontSize=\"14px\">{`Your Rate ${farm.quoteToken.symbol}/week`}</Text>\n        </DetailsCont>\n        <DetailsCont>\n          <Text bold fontSize=\"24px\">\n            {formatTokenEarnings ?? <Skeleton width={60} display=\"inline-block\" />}\n          </Text>\n          <Text color=\"textSubtle\" fontSize=\"14px\">{`${farm.quoteToken.symbol} Token Earnings`}</Text>\n        </DetailsCont>\n        <DetailsCont\n          style={{ display: 'flex', justifyContent: 'center', alignItems: 'center' }}\n          onMouseEnter={() => setActiveSelect(true)}\n          onMouseLeave={() => setActiveSelect(false)}\n        >\n          <Button fullWidth onClick={onPresentWithdraw} disabled={earnings === '0'}>\n            <Text>Claim & Withdraw</Text>\n          </Button>\n        </DetailsCont>\n      </ModalFooter>\n    </Modal>\n  )\n}\n\nexport default DepositModal\n","import React, { useCallback } from 'react'\nimport { useWeb3React } from '@web3-react/core'\nimport { Contract } from 'web3-eth-contract'\nimport styled from 'styled-components'\nimport BigNumber from 'bignumber.js'\nimport { Button, Flex, Heading, IconButton, AddIcon, MinusIcon, useModal } from '@metagg/mgg-uikit'\nimport { useLocation } from 'react-router-dom'\nimport Balance from 'components/Balance'\nimport { useTranslation } from 'contexts/Localization'\nimport { useAppDispatch } from 'state'\nimport { fetchFarmUserDataAsync } from 'state/farms'\nimport { useLpTokenPrice } from 'state/hooks'\nimport useStake from 'hooks/useStake'\nimport useUnstake, { useExit } from 'hooks/useUnstake'\nimport { Farm } from 'state/types'\nimport { getBalanceAmount, getBalanceNumber, getFullDisplayBalance } from 'utils/formatBalance'\nimport Loading from 'components/Loading'\nimport DepositModal from '../DepositModal'\nimport WithdrawModal from '../WithdrawModal'\nimport { getAddress } from '../../../../utils/addressHelpers'\nimport { calculateUserRewardRate } from '../../../../utils/farmHelpers'\nimport { MAINNET_CHAIN_ID } from '../../../../config'\n\ninterface FarmCardActionsProps {\n  userDataReady?: boolean\n  userRate?: string\n  stakedBalance?: BigNumber\n  tokenBalance?: BigNumber\n  tokenName?: string\n  pid?: number\n  addLiquidityUrl?: string\n  addTokenUrl?: string\n  farm?: Farm\n}\n\nconst IconButtonWrapper = styled.div`\n  display: flex;\n  svg {\n    width: 20px;\n  }\n`\n\nconst StakeAction: React.FC<FarmCardActionsProps> = ({\n  stakedBalance,\n  tokenBalance,\n  tokenName,\n  pid,\n  addLiquidityUrl,\n  addTokenUrl,\n  farm,\n  userDataReady,\n}) => {\n  const { t } = useTranslation()\n  const { onStake } = useStake(pid)\n  const { account, chainId } = useWeb3React()\n  const chain = chainId ? chainId.toString() : MAINNET_CHAIN_ID\n  const { onUnstake } = useExit(getAddress(farm.stakingAddresses, chain))\n  const location = useLocation()\n  const dispatch = useAppDispatch()\n  const lpPrice = useLpTokenPrice(tokenName)\n\n  const handleStake = async (amount: string, contract?: Contract) => {\n    await onStake(amount, contract)\n    dispatch(fetchFarmUserDataAsync({ account, pids: [pid], chain }))\n  }\n\n  const handleUnstake = async (amount: string) => {\n    await onUnstake(amount)\n    dispatch(fetchFarmUserDataAsync({ account, pids: [pid], chain }))\n  }\n\n  const displayBalance = useCallback(() => {\n    const stakedBalanceBigNumber = getBalanceAmount(stakedBalance)\n    if (stakedBalanceBigNumber.gt(0) && stakedBalanceBigNumber.lt(0.0001)) {\n      return getFullDisplayBalance(stakedBalance).toLocaleString()\n    }\n    return stakedBalanceBigNumber.toFixed(3, BigNumber.ROUND_DOWN)\n  }, [stakedBalance])\n\n  const [onPresentDeposit] = useModal(\n    <DepositModal\n      max={tokenBalance}\n      onConfirm={handleStake}\n      tokenName={tokenName}\n      addLiquidityUrl={addLiquidityUrl}\n      addTokenUrl={addTokenUrl}\n      farm={farm}\n      handleUnstake={handleUnstake}\n      maxStake={stakedBalance}\n    />,\n  )\n  const earnings = getBalanceAmount(new BigNumber(farm.userData.earnings)).toFormat(6)\n  const formatStakedBalance = getBalanceAmount(new BigNumber(farm.userData.stakedBalance)).toFormat(6)\n  const [onPresentWithdraw] = useModal(\n    <WithdrawModal\n      farm={farm}\n      staked={formatStakedBalance}\n      earnings={earnings}\n      max={stakedBalance}\n      onConfirm={handleUnstake}\n      tokenName={tokenName}\n    />,\n  )\n\n  const renderStakingButtons = () => {\n    let buttonTxt = 'Deposit'\n    if (farm.hasEnded && stakedBalance.isGreaterThan(0)) {\n      buttonTxt = 'Withdraw'\n    }\n    return (\n      <Button\n        onClick={farm.hasEnded && parseFloat(farm.userData.stakedBalance) ? onPresentWithdraw : onPresentDeposit}\n        disabled={farm.hasEnded && stakedBalance.eq(0)}\n        fullWidth\n      >\n        {userDataReady ? buttonTxt : <Loading />}\n      </Button>\n    )\n  }\n\n  return (\n    <Flex justifyContent=\"space-between\" alignItems=\"center\">\n      {/* <Heading color={stakedBalance.eq(0) ? 'textDisabled' : 'text'}>{displayBalance()}</Heading> */}\n      {renderStakingButtons()}\n    </Flex>\n  )\n}\n\nexport default StakeAction\n","import React, { useState } from 'react'\nimport styled from 'styled-components'\nimport BigNumber from 'bignumber.js'\nimport { getAddress } from 'utils/addressHelpers'\nimport { useAppDispatch } from 'state'\nimport { Farm } from 'state/types'\nimport { useTranslation } from 'contexts/Localization'\nimport UnlockButton from 'components/UnlockButton'\nimport StakeAction from './StakeAction'\n\nconst Action = styled.div`\n  padding-top: 16px;\n`\n\nexport interface FarmWithStakedValue extends Farm {\n  apr?: number\n}\n\ninterface FarmCardActionsProps {\n  userDataReady: boolean\n  farm: FarmWithStakedValue\n  account?: string\n  addLiquidityUrl?: string\n  addTokenUrl?: string\n}\n\nconst CardActions: React.FC<FarmCardActionsProps> = ({\n  userDataReady,\n  farm,\n  account,\n  addLiquidityUrl,\n  addTokenUrl,\n}) => {\n  const { t } = useTranslation()\n  const { pid, lpAddresses } = farm\n  const {\n    allowance: allowanceAsString = 0,\n    tokenBalance: tokenBalanceAsString = 0,\n    stakedBalance: stakedBalanceAsString = 0,\n    earnings: earningsAsString = 0,\n  } = farm.userData || {}\n  const tokenBalance = new BigNumber(tokenBalanceAsString)\n  const stakedBalance = new BigNumber(stakedBalanceAsString)\n\n  const renderDepositButton = () => {\n    return (\n      <StakeAction\n        userDataReady={userDataReady}\n        stakedBalance={stakedBalance}\n        tokenBalance={tokenBalance}\n        tokenName={farm.lpSymbol}\n        pid={pid}\n        addLiquidityUrl={addLiquidityUrl}\n        addTokenUrl={addTokenUrl}\n        farm={farm}\n      />\n    )\n  }\n\n  return <Action>{!account ? <UnlockButton mt=\"8px\" width=\"100%\" /> : renderDepositButton()}</Action>\n}\n\nexport default CardActions\n","import React, { useContext, useState } from 'react'\nimport { Button, Skeleton, Text } from '@metagg/mgg-uikit'\nimport { ThemeContext } from 'styled-components'\nimport BigNumber from 'bignumber.js'\nimport { useWeb3React } from '@web3-react/core'\nimport Balance from 'components/Balance'\nimport { BIG_ZERO } from 'utils/bigNumber'\nimport { getBalanceAmount } from 'utils/formatBalance'\nimport { useAppDispatch } from 'state'\nimport { fetchFarmUserDataAsync } from 'state/farms'\nimport { usePriceCakeBusd } from 'state/hooks'\nimport { useClaim } from 'hooks/useHarvest'\nimport { useTranslation } from 'contexts/Localization'\n\nimport { ActionContainer, ActionContent, ActionTitles, Earned } from './styles'\nimport useToast from '../../../../../hooks/useToast'\nimport { MAINNET_CHAIN_ID } from '../../../../../config'\n\ninterface HarvestActionProps {\n  pid: number\n  stakingContract?: string\n  tokenRewardSymbol?: string\n  userData?: {\n    allowance: string\n    tokenBalance: string\n    stakedBalance: string\n    earnings: string\n  }\n  userDataReady: boolean\n}\n\nconst HarvestAction: React.FunctionComponent<HarvestActionProps> = ({\n  stakingContract,\n  tokenRewardSymbol,\n  pid,\n  userData,\n  userDataReady,\n}) => {\n  const earningsBigNumber = new BigNumber(userData.earnings)\n  const cakePrice = usePriceCakeBusd()\n  let earnings = BIG_ZERO\n  let earningsBusd = 0\n  let displayBalance = userDataReady ? earnings.toLocaleString() : <Skeleton width={60} />\n\n  // If user didn't connect wallet default balance will be 0\n  if (!earningsBigNumber.isZero()) {\n    earnings = getBalanceAmount(earningsBigNumber)\n    earningsBusd = earnings.multipliedBy(cakePrice).toNumber()\n    displayBalance = earnings.toFixed(3, BigNumber.ROUND_DOWN)\n  }\n  const theme = useContext(ThemeContext)\n  const [pendingTx, setPendingTx] = useState(false)\n  const { onReward } = useClaim(stakingContract)\n  const { t } = useTranslation()\n  const dispatch = useAppDispatch()\n  const { account, chainId } = useWeb3React()\n  const chain = chainId ? chainId.toString() : MAINNET_CHAIN_ID\n  const { toastError, toastSuccess } = useToast()\n\n  return (\n    <ActionContainer style={{ margin: '10px 0' }}>\n      <ActionTitles>\n        <Text bold textTransform=\"uppercase\" color={theme.colors.MGG_accent2} fontSize=\"12px\" pr=\"4px\">\n          {tokenRewardSymbol}\n        </Text>\n        <Text bold textTransform=\"uppercase\" color=\"textSubtle\" fontSize=\"12px\">\n          {t('Earned')}\n        </Text>\n      </ActionTitles>\n      <ActionContent>\n        <div>\n          <Earned>{displayBalance}</Earned>\n          {earningsBusd > 0 && (\n            <Balance fontSize=\"12px\" color=\"textSubtle\" decimals={2} value={earningsBusd} unit=\" USD\" prefix=\"~\" />\n          )}\n        </div>\n        <Button\n          style={{ borderRadius: '3px', height: '40px' }}\n          disabled={earnings.eq(0) || pendingTx || !userDataReady}\n          onClick={async () => {\n            setPendingTx(true)\n            try {\n              await onReward()\n              toastSuccess(\n                `${t('Claimed')}!`,\n                t('Your %symbol% earnings have been sent to your wallet!', { symbol: tokenRewardSymbol }),\n              )\n            } catch (e) {\n              toastError(\n                t('Error'),\n                t('Please try again. Confirm the transaction and make sure you are paying enough gas!'),\n              )\n              console.error(e)\n            } finally {\n              setPendingTx(false)\n            }\n            dispatch(fetchFarmUserDataAsync({ account, pids: [pid], chain }))\n          }}\n          ml=\"4px\"\n        >\n          {t('Claim')}\n        </Button>\n      </ActionContent>\n    </ActionContainer>\n  )\n}\n\nexport default HarvestAction\n","import React, { useContext, useState } from 'react'\nimport BigNumber from 'bignumber.js'\nimport styled, { keyframes, ThemeContext } from 'styled-components'\nimport { Flex, Skeleton, Text } from '@sparkpointio/sparkswap-uikit'\nimport { Farm } from 'state/types'\nimport { useFarmPrice } from 'hooks/price'\nimport { getFarmV2Apr } from 'utils/apr'\nimport useTokenBalance from 'hooks/useTokenBalance'\nimport { useWeb3React } from '@web3-react/core'\nimport { useTranslation } from 'contexts/Localization'\nimport { BASE_ADD_LIQUIDITY_URL, BASE_EXCHANGE_URL, BASE_INFO_URL, BASE_SWAP_URL, MAINNET_CHAIN_ID } from 'config'\nimport getLiquidityUrlPathParts from 'utils/getLiquidityUrlPathParts'\nimport CardHeading from './CardHeading'\nimport CardActionsContainer from './CardActionsContainer'\nimport HarvestAction from '../FarmTable/Actions/HarvestAction'\nimport { getAddress } from '../../../../utils/addressHelpers'\nimport { getBalanceAmount } from '../../../../utils/formatBalance'\nimport ExpandableSectionButton from '../../../../components/ExpandableSectionButton'\nimport DetailsSection from './DetailsSection'\nimport { getBscScanAddressUrl } from '../../../../utils/bscscan'\n\nexport interface FarmWithStakedValue extends Farm {\n  apr?: number\n  liquidity?: BigNumber\n}\n\nconst AccentGradient = keyframes`\n  0% {\n    background-position: 50% 0%;\n  }\n  50% {\n    background-position: 50% 100%;\n  }\n  100% {\n    background-position: 50% 0%;\n  }\n`\n\nconst StyledCardAccent = styled.div`\n  // background: ${({ theme }) => `linear-gradient(180deg, ${theme.colors.primaryBright}, ${theme.colors.secondary})`};\n  background-size: 400% 400%;\n  animation: ${AccentGradient} 2s linear infinite;\n  border-radius: 32px;\n  position: absolute;\n  top: -1px;\n  right: -1px;\n  bottom: -3px;\n  left: -1px;\n  z-index: -1;\n`\n\nconst FCard = styled.div<{ isPromotedFarm: boolean }>`\n  align-self: baseline;\n  max-width: 450px;\n  background: ${(props) => props.theme.colors.MGG_container};\n  border: 5px solid ${(props) => props.theme.colors.MGG_active};\n  // border-radius: ${({ theme, isPromotedFarm }) => (isPromotedFarm ? '31px' : theme.radii.card)};\n  box-shadow: 0px 1px 4px rgba(25, 19, 38, 0.15);\n  display: flex;\n  flex-direction: column;\n  justify-content: space-around;\n  // padding: 24px;\n  position: relative;\n  text-align: center;\n`\n\nconst Divider = styled.div`\n  background-color: ${({ theme }) => theme.colors.card};\n  height: 1px;\n  margin: 28px auto;\n  width: 100%;\n`\n\nconst ExpandingWrapper = styled.div<{ expanded: boolean }>`\n  height: ${(props) => (props.expanded ? '100%' : '0px')};\n  overflow: hidden;\n`\n\ninterface FarmCardProps {\n  userDataReady: boolean\n  farm: FarmWithStakedValue\n  removed: boolean\n  cakePrice?: BigNumber\n  account?: string\n}\n\nconst FarmCard: React.FC<FarmCardProps> = ({ userDataReady, farm, removed, cakePrice, account }) => {\n  const { t } = useTranslation()\n  const [showExpandableSection, setShowExpandableSection] = useState(false)\n  const farmImage = farm.lpSymbol.split(' ')[0].toLocaleLowerCase()\n  const formatTotalDeposits = getBalanceAmount(new BigNumber(farm.totalDeposits ?? 0)).toFormat(4)\n  const formatTotalRewardRate = getBalanceAmount(new BigNumber(farm.totalRewardRate ?? 0)).toFormat(4)\n  const lpLabel = farm.lpSymbol && farm.lpSymbol.toUpperCase().replace('PANCAKE', '')\n  const earnLabel = farm.quoteToken.symbol\n  const farmAPR = farm.apr && farm.apr.toLocaleString('en-US', { maximumFractionDigits: 2 })\n  const liquidityUrlPathParts = getLiquidityUrlPathParts({\n    mainTokenAddress: farm.token.address,\n    pairTokenAddress: farm.pairToken.address,\n  })\n\n  const { chainId } = useWeb3React()\n  const chain = chainId ? chainId.toString() : MAINNET_CHAIN_ID\n\n  const stakingAddress = getAddress(farm.stakingAddresses, chain)\n\n  const addLiquidityUrl = `${farm.liquidityUrl ?? BASE_ADD_LIQUIDITY_URL}/${liquidityUrlPathParts}`\n  const AddTokenUrl = `${BASE_SWAP_URL}/${farm.token.address[56]}`\n  const lpAddress = farm.lpAddresses[process.env.REACT_APP_CHAIN_ID]\n  const isPromotedFarm = farm.token.symbol === 'CAKE'\n  const theme = useContext(ThemeContext)\n\n  // const token1Balance = useTokenBalance(farm.token.address[56], farm.lpAddresses[56])\n  // const token2Balance = useTokenBalance(farm.pairToken.address[56], farm.lpAddresses[56])\n  // const {LPPrice, rewardPrice} = useFarmPrice(Number(farm.lpTotalSupply), farm.token.address[56], farm.pairToken.address[56], farm.quoteToken.address[56], farm.lpAddresses[56])\n  const aprBlackList = ['0x9f6b80e3867ab402081574e9e0a3be6fdf4ae95b']\n  // const apr = (aprBlackList.includes(farm.lpAddresses[56]) ? null : getFarmV2Apr(LPPrice, rewardPrice, Number(farm.totalDeposits), Number(farm.rewardRate)) )\n\n  return (\n    <FCard isPromotedFarm={isPromotedFarm}>\n      {isPromotedFarm && <StyledCardAccent />}\n      <CardHeading\n        lpLabel={lpLabel}\n        multiplier={farm.multiplier}\n        isCommunityFarm={farm.isCommunity}\n        farmImage={farmImage}\n        farmSymbol={farm.lpSymbol}\n        tokenSymbol={farm.token.symbol}\n        rewardToken={farm.quoteToken.symbol}\n        token={farm.token}\n        quoteToken={farm.quoteToken}\n        pairToken={farm.pairToken}\n      />\n      {/* <hr style={{ width: '100%', border: 'none', backgroundColor: theme.colors.primary, height: '2px' }} /> */}\n      {/* {!removed && (\n        <Flex justifyContent=\"space-between\" alignItems=\"center\">\n          <Text>{t('APR')}:</Text>\n          <Text bold style={{ display: 'flex', alignItems: 'center' }}>\n            {farm.apr ? (\n              <>\n                <ApyButton lpLabel={lpLabel} addLiquidityUrl={addLiquidityUrl} cakePrice={cakePrice} apr={farm.apr} />\n                {farmAPR}%\n              </>\n            ) : (\n              <Skeleton height={24} width={80} />\n            )}\n          </Text>\n        </Flex>\n      )} */}\n\n      {/* <Flex justifyContent='space-between' style={{ textAlign: 'left' }}>\n        <Text>{t('Total Deposits')}</Text>\n        <Text color='textSubtle'>{farm.totalDeposits ? formatTotalDeposits : <Skeleton width={60} display='inline-block' />}</Text>\n      </Flex> */}\n      <div style={{ margin: '24px' }}>\n        <Flex>\n          <HarvestAction\n            stakingContract={getAddress(farm.stakingAddresses, chain)}\n            tokenRewardSymbol={earnLabel}\n            userDataReady={userDataReady}\n            userData={farm.userData}\n            pid={farm.pid}\n          />\n        </Flex>\n        {/* <Flex justifyContent='space-between'>\n        <Text>{t('APR')}</Text>\n        <Text color='textSubtle'>{(apr === 0 || apr === null ? \"-- \" : apr.toFixed(2))}%</Text>\n      </Flex> */}\n        <Flex justifyContent=\"space-between\">\n          <Text>{t('Rate')}</Text>\n          <Text color=\"textSubtle\">\n            {formatTotalRewardRate ?? <Skeleton width={60} display=\"inline-block\" />} {earnLabel} / week\n          </Text>\n        </Flex>\n        <Flex justifyContent=\"space-between\">\n          <Text>{t('Duration')}</Text>\n          <Text color=\"textSubtle\">{farm.remainingDays ?? <Skeleton width={60} display=\"inline-block\" />} Days</Text>\n        </Flex>\n        <CardActionsContainer\n          userDataReady={userDataReady}\n          farm={farm}\n          account={account}\n          addLiquidityUrl={addLiquidityUrl}\n          addTokenUrl={AddTokenUrl}\n        />\n\n        <DetailsSection\n          removed={removed}\n          stakingAddress={getBscScanAddressUrl(stakingAddress)}\n          lpInfoAddress={`${farm.infoURL ?? BASE_INFO_URL}/${lpAddress}`}\n          lpLabel={lpLabel}\n        />\n\n        {/* <Divider />\n       <ExpandableSectionButton\n        onClick={() => setShowExpandableSection(!showExpandableSection)}\n        expanded={showExpandableSection}\n      />\n      <ExpandingWrapper expanded={showExpandableSection}>\n        <DetailsSection\n          removed={removed}\n          bscScanAddress={getBscScanAddressUrl(farm.lpAddresses[process.env.REACT_APP_CHAIN_ID])}\n          infoAddress={`https://pancakeswap.info/pool/${lpAddress}`}\n          totalValueFormatted={farm.totalDeposits}\n          lpLabel={lpLabel}\n          addLiquidityUrl={addLiquidityUrl}\n        />\n      </ExpandingWrapper>\n      <Flex justifyContent='center'>\n         {Object.prototype.hasOwnProperty.call(farm.lpAddresses, '56') && (<Text color=\"textSubtle\" fontSize=\"14px\">{t('This will only work on Binance Smart Chain')}</Text>)}\n         {Object.prototype.hasOwnProperty.call(farm.lpAddresses, '1') && (<Text color=\"textSubtle\" fontSize=\"14px\">{t('This will only work on Ethereum Blockchain')}</Text>)}\n      </Flex> */}\n      </div>\n    </FCard>\n  )\n}\n\nexport default FarmCard\n","import React, { useCallback, useContext, useEffect, useMemo, useRef, useState } from 'react'\nimport { Route, useLocation, useRouteMatch } from 'react-router-dom'\nimport BigNumber from 'bignumber.js'\nimport { useWeb3React } from '@web3-react/core'\nimport { Flex, Image, RowType, Toggle } from '@pancakeswap/uikit'\nimport { Oval } from 'react-loading-icons'\nimport { Text } from '@sparkpointio/sparkswap-uikit'\nimport styled, { ThemeContext } from 'styled-components'\nimport FlexLayout from 'components/layout/Flex'\nimport Page from 'components/layout/Page'\nimport useMedia from 'use-media'\nimport { SvgIcon } from '@material-ui/core'\nimport { useFarms, usePollFarmsData, usePriceCakeBusd } from 'state/hooks'\nimport usePersistState from 'hooks/usePersistState'\nimport { useFarmPrice } from 'hooks/price'\nimport usePrevious from 'utils/refHelpers'\nimport { Farm } from 'state/types'\nimport { useTranslation } from 'contexts/Localization'\nimport { getBalanceNumber, getBalanceAmount } from 'utils/formatBalance'\nimport { getFarmApr, getFarmV2Apr } from 'utils/apr'\nimport useTokenBalance from 'hooks/useTokenBalance'\nimport { orderBy } from 'lodash'\nimport isArchivedPid from 'utils/farmHelpers'\nimport { latinise } from 'utils/latinise'\nimport PageHeader from 'components/PageHeader'\nimport SearchInput from 'components/SearchInput'\nimport Select, { OptionProps } from 'components/Select/Select'\nimport FarmCard, { FarmWithStakedValue } from './components/FarmCard/FarmCard'\nimport Table from './components/FarmTable/FarmTable'\nimport FarmTabButtons from './components/FarmTabButtons'\nimport { RowProps } from './components/FarmTable/Row'\nimport { DesktopColumnSchema, ViewMode } from './components/types'\nimport { ReactComponent as FarmsDarkLogo } from './components/assets/farm-dark.svg'\nimport { ReactComponent as FarmsLightLogo } from './components/assets/farm-light.svg'\nimport { MAINNET_CHAIN_ID } from '../../config'\nimport { FarmCategory } from '../../config/constants/types'\n\nconst ControlContainer = styled.div`\n  display: flex;\n  width: 100%;\n  align-items: center;\n  position: relative;\n\n  justify-content: space-between;\n  flex-direction: column;\n  margin-bottom: 32px;\n\n  ${({ theme }) => theme.mediaQueries.sm} {\n    flex-direction: row;\n    flex-wrap: wrap;\n    padding: 16px 32px;\n    margin-bottom: 0;\n  }\n`\n\nconst ToggleWrapper = styled.div`\n  display: flex;\n  align-items: center;\n  margin-left: 10px;\n\n  ${Text} {\n    margin-left: 8px;\n  }\n`\n\nconst LabelWrapper = styled.div`\n  > ${Text} {\n    font-size: 12px;\n  }\n`\n\nconst FilterContainer = styled.div`\n  display: flex;\n  align-items: center;\n  width: 100%;\n  padding: 8px 0px;\n\n  ${({ theme }) => theme.mediaQueries.sm} {\n    width: auto;\n    padding: 0;\n  }\n`\n\nconst ViewControls = styled.div`\n  flex-wrap: wrap;\n  justify-content: space-between;\n  display: flex;\n  align-items: center;\n  width: 100%;\n\n  > div {\n    padding: 8px 0px;\n  }\n\n  ${({ theme }) => theme.mediaQueries.sm} {\n    justify-content: flex-start;\n    width: auto;\n\n    > div {\n      padding: 0;\n    }\n  }\n`\n\nconst InfoBox = styled(Flex)`\n  @media (max-width: 1024px) {\n    flex-direction: column;\n    & > * {\n      margin: 10px 0px;\n    }\n  }\n`\nconst StyledImage = styled(Image)`\n  margin-left: auto;\n  margin-right: auto;\n  margin-top: 58px;\n`\nconst NUMBER_OF_FARMS_VISIBLE = 12\n\nconst Farms: React.FC = () => {\n  const { path } = useRouteMatch()\n  const { pathname } = useLocation()\n  const { t } = useTranslation()\n  const { data: farmsLP, userDataLoaded } = useFarms()\n  const cakePrice = usePriceCakeBusd()\n  const [query, setQuery] = useState('')\n  const [viewMode, setViewMode] = usePersistState(ViewMode.CARD, { localStorageKey: 'sparkswap_farm_view' })\n  const { account, chainId } = useWeb3React()\n  const chain = chainId ? chainId.toString() : MAINNET_CHAIN_ID\n  const [sortOption, setSortOption] = useState('earned')\n  const theme = useContext(ThemeContext)\n  const isArchived = pathname.includes('archived')\n  const isInactive = pathname.includes('history')\n  const isActive = !isInactive && !isArchived\n  const isMobile = useMedia({ maxWidth: 500 })\n  usePollFarmsData(isArchived)\n  // Users with no wallet connected should see 0 as Earned amount\n  // Connected users should see loading indicator until first userData has loaded\n  const userDataReady = !account || (!!account && userDataLoaded)\n\n  const [stakedOnly, setStakedOnly] = useState(!isActive)\n  useEffect(() => {\n    setStakedOnly(!isActive)\n  }, [isActive])\n  // const activeFarms = farmsLP.filter((farm) => farm.pid !== 0 && !farm.hasEnded && !isArchivedPid(farm.pid))\n  // const inactiveFarms = farmsLP.filter((farm) => farm.pid !== 0 && farm.hasEnded && !isArchivedPid(farm.pid))\n  // const archivedFarms = farmsLP.filter((farm) => isArchivedPid(farm.pid))\n  const activeFarms = farmsLP.filter(\n    (farm) => farm.pid !== 0 && farm.chain === chain && farm.farmCategory === FarmCategory.VAULT,\n  )\n  // const inactiveFarms = farmsLP.filter(\n  //   (farm) => farm.pid !== 0 && farm.hasEnded && !isArchivedPid(farm.pid) && farm.chain === chain,\n  // )\n  // const archivedFarms = farmsLP.filter((farm) => isArchivedPid(farm.pid) && farm.chain === chain)\n\n  const stakedOnlyFarms = activeFarms.filter(\n    (farm) => farm.userData && new BigNumber(farm.userData.stakedBalance).isGreaterThan(0),\n  )\n\n  // const stakedInactiveFarms = inactiveFarms.filter(\n  //   (farm) => farm.userData && new BigNumber(farm.userData.stakedBalance).isGreaterThan(0),\n  // )\n  //\n  // const stakedArchivedFarms = archivedFarms.filter(\n  //   (farm) => farm.userData && new BigNumber(farm.userData.stakedBalance).isGreaterThan(0),\n  // )\n\n  const farmsList = useCallback(\n    (farmsToDisplay: Farm[]): FarmWithStakedValue[] => {\n      let farmsToDisplayWithAPR: FarmWithStakedValue[] = farmsToDisplay.map((farm) => {\n        if (!farm.lpTotalInQuoteToken || !farm.quoteToken.busdPrice) {\n          return farm\n        }\n        const totalLiquidity = new BigNumber(farm.lpTotalInQuoteToken).times(farm.quoteToken.busdPrice)\n        const apr = isActive ? getFarmApr(new BigNumber(farm.poolWeight), cakePrice, totalLiquidity) : 0\n\n        return { ...farm, apr, liquidity: totalLiquidity }\n      })\n\n      if (query) {\n        const lowercaseQuery = latinise(query.toLowerCase())\n        farmsToDisplayWithAPR = farmsToDisplayWithAPR.filter((farm: FarmWithStakedValue) => {\n          return (\n            latinise(farm.lpSymbol.toLowerCase()).includes(lowercaseQuery) ||\n            latinise(farm.quoteToken.symbol.toLowerCase()).includes(lowercaseQuery)\n          )\n        })\n      }\n      return farmsToDisplayWithAPR\n    },\n    [cakePrice, query, isActive],\n  )\n\n  const handleChangeQuery = (event: React.ChangeEvent<HTMLInputElement>) => {\n    setQuery(event.target.value)\n  }\n\n  const loadMoreRef = useRef<HTMLDivElement>(null)\n\n  const [numberOfFarmsVisible, setNumberOfFarmsVisible] = useState(NUMBER_OF_FARMS_VISIBLE)\n  const [observerIsSet, setObserverIsSet] = useState(false)\n  const farmsStakedMemoized = useMemo(() => {\n    let farmsStaked = []\n\n    const sortFarms = (farms: FarmWithStakedValue[]): FarmWithStakedValue[] => {\n      switch (sortOption) {\n        // case 'promoted':\n        //   return orderBy(\n        //     farms,\n        //     (farm: FarmWithStakedValue) => (farm.isPromoted ?? 0),\n        //     'desc',\n        //   )\n        case 'apr':\n          return orderBy(farms, (farm: FarmWithStakedValue) => farm.apr, 'desc')\n        case 'duration':\n          return orderBy(\n            farms,\n            (farm: FarmWithStakedValue) => (farm.remainingDays ? Number(farm.remainingDays) : 0),\n            'desc',\n          )\n        case 'multiplier':\n          return orderBy(\n            farms,\n            (farm: FarmWithStakedValue) => (farm.multiplier ? Number(farm.multiplier.slice(0, -1)) : 0),\n            'desc',\n          )\n        case 'earned':\n          return orderBy(\n            farms,\n            (farm: FarmWithStakedValue) => (farm.userData ? Number(farm.userData.earnings) : 0),\n            'desc',\n          )\n        case 'liquidity':\n          return orderBy(farms, (farm: FarmWithStakedValue) => Number(farm.liquidity), 'desc')\n        default:\n          return farms\n      }\n    }\n\n    farmsStaked = stakedOnly ? farmsList(stakedOnlyFarms) : farmsList(activeFarms)\n    // if (isActive) {\n    // }\n    // if (isInactive) {\n    //   farmsStaked = stakedOnly ? farmsList(stakedInactiveFarms) : farmsList(inactiveFarms)\n    // }\n    // if (isArchived) {\n    //   farmsStaked = stakedOnly ? farmsList(stakedArchivedFarms) : farmsList(archivedFarms)\n    // }\n    return sortFarms(farmsStaked).slice(0, numberOfFarmsVisible)\n  }, [\n    sortOption,\n    activeFarms,\n    farmsList,\n    // inactiveFarms,\n    // archivedFarms,\n    // isActive,\n    // isInactive,\n    // isArchived,\n    // stakedArchivedFarms,\n    // stakedInactiveFarms,\n    stakedOnly,\n    stakedOnlyFarms,\n    numberOfFarmsVisible,\n  ])\n\n  const [activeTab, setActiveTab] = useState(0)\n  const handleItemClick = (index: number) => setActiveTab(index)\n  const tabs = [t('Total'), 'Storm', 'Flippers', 'Cakers']\n\n  useEffect(() => {\n    const showMoreFarms = (entries) => {\n      const [entry] = entries\n      if (entry.isIntersecting) {\n        setNumberOfFarmsVisible((farmsCurrentlyVisible) => farmsCurrentlyVisible + NUMBER_OF_FARMS_VISIBLE)\n      }\n    }\n    // Uncomment this if !comingsoon\n    if (!observerIsSet) {\n      const loadMoreObserver = new IntersectionObserver(showMoreFarms, {\n        rootMargin: '0px',\n        threshold: 1,\n      })\n      loadMoreObserver.observe(loadMoreRef.current)\n      setObserverIsSet(true)\n    }\n  }, [farmsStakedMemoized, observerIsSet])\n\n  const rowData = farmsStakedMemoized.map((farm) => {\n    const { token, quoteToken } = farm\n    const tokenAddress = token.address\n    const quoteTokenAddress = quoteToken.address\n    const lpLabel = farm.lpSymbol && farm.lpSymbol.split(' ')[0].toUpperCase().replace('PANCAKE', '')\n\n    const row: RowProps = {\n      apr: {\n        value: farm.apr && farm.apr.toLocaleString('en-US', { maximumFractionDigits: 2 }),\n        multiplier: farm.multiplier,\n        lpLabel,\n        tokenAddress,\n        quoteTokenAddress,\n        cakePrice,\n        originalValue: farm.apr,\n      },\n      farm: {\n        label: lpLabel,\n        pid: farm.pid,\n        token: farm.token,\n        quoteToken: farm.quoteToken,\n      },\n      earned: {\n        earnings: getBalanceNumber(new BigNumber(farm.userData.earnings)),\n        pid: farm.pid,\n      },\n      liquidity: {\n        liquidity: farm.liquidity,\n      },\n      multiplier: {\n        multiplier: farm.multiplier,\n      },\n      details: farm,\n    }\n\n    return row\n  })\n\n  const renderContent = (): JSX.Element => {\n    // if (viewMode === ViewMode.TABLE && rowData.length) {\n    //   const columnSchema = DesktopColumnSchema\n\n    //   const columns = columnSchema.map((column) => ({\n    //     id: column.id,\n    //     name: column.name,\n    //     label: column.label,\n    //     sort: (a: RowType<RowProps>, b: RowType<RowProps>) => {\n    //       switch (column.name) {\n    //         case 'farm':\n    //           return b.id - a.id\n    //         case 'apr':\n    //           if (a.original.apr.value && b.original.apr.value) {\n    //             return Number(a.original.apr.value) - Number(b.original.apr.value)\n    //           }\n\n    //           return 0\n    //         case 'earned':\n    //           return a.original.earned.earnings - b.original.earned.earnings\n    //         default:\n    //           return 1\n    //       }\n    //     },\n    //     sortable: column.sortable,\n    //   }))\n\n    //   return <Table data={rowData} columns={columns} userDataReady={userDataReady} />\n    // }\n\n    return (\n      <div style={{ marginTop: '25x', paddingTop: '25px' }}>\n        <FlexLayout>\n          <Route exact path={`${path}`}>\n            {farmsStakedMemoized.map((farm) => (\n              <FarmCard\n                userDataReady={userDataReady}\n                key={farm.pid}\n                farm={farm}\n                cakePrice={cakePrice}\n                account={account}\n                removed={false}\n              />\n            ))}\n          </Route>\n          <Route exact path={`${path}/history`}>\n            {farmsStakedMemoized.map((farm) => (\n              <FarmCard\n                userDataReady={userDataReady}\n                key={farm.pid}\n                farm={farm}\n                cakePrice={cakePrice}\n                account={account}\n                removed\n              />\n            ))}\n          </Route>\n          <Route exact path={`${path}/archived`}>\n            {farmsStakedMemoized.map((farm) => (\n              <FarmCard\n                userDataReady={userDataReady}\n                key={farm.pid}\n                farm={farm}\n                cakePrice={cakePrice}\n                account={account}\n                removed\n              />\n            ))}\n          </Route>\n          {/* {farmsList(activeFarms).map((farm) => ( */}\n          {/*  <FarmCard userDataReady={userDataReady} key={farm.pid} farm={farm} cakePrice={cakePrice} account={account} removed={false} /> */}\n          {/* ))} */}\n        </FlexLayout>\n      </div>\n    )\n  }\n\n  const handleSortOptionChange = (option: OptionProps): void => {\n    setSortOption(option.value)\n  }\n\n  // const renderInactiveContent = (): JSX.Element => {\n  //   return (\n  //     <div>\n  //       <div style={{ margin: '20px' }}>\n  //         <Text fontSize=\"24px\" bold>\n  //           {' '}\n  //           Inactive Liquidity Pools{' '}\n  //         </Text>\n  //       </div>\n  //\n  //       <FlexLayout>\n  //         {farmsList(inactiveFarms).map((farm) => (\n  //           <FarmCard\n  //             userDataReady={userDataReady}\n  //             key={farm.pid}\n  //             farm={farm}\n  //             cakePrice={cakePrice}\n  //             account={account}\n  //             removed\n  //           />\n  //         ))}\n  //       </FlexLayout>\n  //     </div>\n  //   )\n  // }\n\n  const [isFetchData, setFetchData] = useState<boolean | null>(true)\n  const mggFarm = farmsStakedMemoized.filter((farm) => farm.isMain)[0]\n\n  // const token1Balance = useTokenBalance(mggFarm.token.address[chainId], mggFarm.lpAddresses[chainId])\n  // const token2Balance = useTokenBalance(mggFarm.pairToken.address[chainId], mggFarm.lpAddresses[chainId])\n\n  const { LPPrice, rewardPrice } = useFarmPrice(mggFarm, chain, isFetchData)\n  const prevLPPrice = usePrevious(LPPrice)\n  const prevRewardPrice = usePrevious(rewardPrice)\n  useEffect(() => {\n    if (LPPrice > 0 || rewardPrice > 0) {\n      setFetchData(false)\n    }\n    setTimeout(() => {\n      setFetchData(true)\n      if (LPPrice !== prevLPPrice || rewardPrice !== prevRewardPrice) {\n        setFetchData(true)\n      } else {\n        setFetchData(false)\n      }\n    }, 60000)\n    if (prevLPPrice === LPPrice || prevRewardPrice === rewardPrice) {\n      setFetchData(false)\n    }\n  }, [LPPrice, rewardPrice, setFetchData, prevLPPrice, prevRewardPrice])\n  useEffect(() => {\n    return setFetchData(null)\n  }, [])\n  const totalDeposits = mggFarm ? mggFarm.totalDeposits : 0\n  const rewardRate = mggFarm ? mggFarm.rewardRate : 0\n  const lpSymbol = mggFarm ? mggFarm.lpSymbol : 'N/A'\n  const lpTotalSupply = mggFarm ? mggFarm.lpTotalSupply : 'N/A'\n\n  const farmV2Apr = useMemo(() => {\n    return getFarmV2Apr(LPPrice, rewardPrice, Number(totalDeposits), Number(rewardRate))\n  }, [totalDeposits, rewardRate, LPPrice, rewardPrice])\n\n  const apr = farmV2Apr > 0 ? `${farmV2Apr.toFixed(2)} %` : <Oval width=\"20px\" height=\"20px\" />\n  const totalStaked =\n    getBalanceNumber(new BigNumber(totalDeposits)) > 0 ? (\n      `${getBalanceAmount(new BigNumber(totalDeposits)).toFormat(4)} ${lpSymbol}`\n    ) : (\n      <Oval width=\"20px\" height=\"20px\" />\n    )\n  const tvr = useMemo(\n    () => getBalanceAmount(new BigNumber(lpTotalSupply)).times(LPPrice).toFixed(4),\n    [lpTotalSupply, LPPrice],\n  )\n  return (\n    <>\n      <PageHeader>\n        <Flex\n          alignItems=\"center\"\n          justifyContent=\"space-around\"\n          flexDirection={['column', null, 'row']}\n          style={isMobile ? { flexDirection: 'column-reverse' } : { minHeight: '20vh', marginLeft: '-16px' }}\n          padding=\"24px\"\n        >\n          <Flex flexDirection=\"column\" flex=\"2\">\n            <Flex\n              justifyContent=\"space-around\"\n              flexDirection=\"column\"\n              padding=\"25px 25px 25px 0px\"\n              mr={['8px', 0]}\n              style={{ borderBottom: `1px solid ${theme.colors.MGG_active}` }}\n            >\n              <Text color={theme.colors.primary} fontSize=\"60px\" bold>\n                Liquidity Staking\n              </Text>\n              <Text color=\"text\" bold style={isMobile ? { fontSize: '17px' } : { fontSize: '27px' }}>\n                Earn MGG with your LP tokens!\n              </Text>\n            </Flex>\n            <InfoBox style={{ width: '100%' }} margin=\"20px 0px 0px 0px\" justifyContent=\"space-between\">\n              <Flex flexDirection=\"column\">\n                <Text fontSize=\"17px\" bold color={theme.colors.MGG_accent2}>\n                  Total Tokens Staked\n                </Text>\n                <Text fontSize=\"20px\"> {totalStaked}</Text>\n              </Flex>\n              <Flex flexDirection=\"column\">\n                <Text fontSize=\"17px\" bold color={theme.colors.MGG_accent2}>\n                  Total Value Locked\n                </Text>\n                <Text fontSize=\"20px\">\n                  {Number(tvr) > 0 && Number(tvr) !== Infinity ? `${tvr} USD` : <Oval width=\"20px\" height=\"20px\" />}\n                </Text>\n              </Flex>\n              <Flex flexDirection=\"column\">\n                <Text fontSize=\"17px\" bold color={theme.colors.MGG_accent2}>\n                  APR\n                </Text>\n                <Text fontSize=\"20px\">{apr}</Text>\n              </Flex>\n            </InfoBox>\n          </Flex>\n          {/* <Flex style={isMobile ? {\n            fontSize: '150px',\n            margin: 'auto',\n            marginTop: '20px',\n            marginBottom: '20px',\n          } : { fontSize: '240px', marginRight: '-118px' }}>\n            <SvgIcon component={theme.isDark ? FarmsDarkLogo : FarmsLightLogo} viewBox='0  0 384 512'\n                     style={isMobile ? { width: '200px' } : { width: '500px' }} fontSize='inherit' />\n          </Flex> */}\n        </Flex>\n      </PageHeader>\n      <Page>\n        {/* <ControlContainer>\n          <ViewControls>\n            <ToggleView viewMode={viewMode} onToggle={(mode: ViewMode) => setViewMode(mode)} />\n            <ToggleWrapper>\n              <Toggle checked={stakedOnly} onChange={() => setStakedOnly(!stakedOnly)} scale='sm' />\n              <Text> {t('Staked only')}</Text>\n            </ToggleWrapper>\n            <FarmTabButtons hasStakeInFinishedFarms={stakedInactiveFarms.length > 0} />\n          </ViewControls>\n          {/* <FilterContainer>\n            <LabelWrapper>\n              <Text textTransform='uppercase'>{t('Sort by')}</Text>\n              <Select\n                options={[\n                  // {\n                  //   label: t('Hot'),\n                  //   value: 'hot',\n                  // },\n                  // {\n                  //   label: t('APR'),\n                  //   value: 'apr',\n                  // },\n                  // {\n                  //   label: t('Multiplier'),\n                  //   value: 'multiplier',\n                  // },\n                  // {\n                  //   label: t('Promoted'),\n                  //   value: 'promoted',\n                  // },\n                  {\n                    label: t('Earned'),\n                    value: 'earned',\n                  },\n                  {\n                    label: t('Duration'),\n                    value: 'duration',\n                  },\n                  {\n                    label: t('Liquidity'),\n                    value: 'liquidity',\n                  },\n                ]}\n                onChange={handleSortOptionChange}\n              />\n            </LabelWrapper>\n            <LabelWrapper style={{ marginLeft: 16 }}>\n              <Text textTransform='uppercase'>{t('Search')}</Text>\n              <SearchInput onChange={handleChangeQuery} placeholder='Search Farms' />\n            </LabelWrapper>\n          </FilterContainer>\n        </ControlContainer> */}\n\n        {renderContent()}\n        <div ref={loadMoreRef} />\n      </Page>\n    </>\n  )\n}\n\nexport default Farms\n"],"sourceRoot":""}