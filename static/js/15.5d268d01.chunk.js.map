{"version":3,"sources":["hooks/useWeb3.ts","hooks/chainHelpers.ts","hooks/price.ts","utils/refHelpers.ts","utils/latinise.ts","state/block/hooks.ts","components/SearchInput/SearchInput.tsx","../node_modules/@mui/system/esm/styleFunctionSx/extendSxProp.js","../node_modules/@mui/material/Grid/GridContext.js","../node_modules/@mui/material/Grid/gridClasses.js","../node_modules/@mui/material/Grid/Grid.js","views/Gamefi/components/NotAvailable.tsx","views/Gamefi/styled.ts","views/Gamefi/components/Cards/styled.tsx","views/Gamefi/components/Cards/Farm.tsx","views/Gamefi/components/Cards/Pool.tsx","views/Gamefi/Gamefi.tsx"],"names":["useWeb3","library","useWeb3React","refEth","useRef","useState","Web3","web3NoAccount","web3","setweb3","useEffect","current","useChainFinder","chainId","usePoolPrice","stakingTokenAddress","rewardTokenAddress","isFetchData","chainName","MoralisWeb3Api","useMoralisWeb3Api","_stakingTokenAddress","_rewardTokenAddress","stakingPrice","setStakingPrice","rewardPrice","setRewardPrice","utils","toChecksumAddress","console","error","a","token","getTokenPrice","chain","address","result","_stakingTokenPrice","usdPrice","_rewardTokenPrice","fetchData","useFarmPrice","farm","LPPrice","setLPPrice","_token1Address","_token2Address","_lpAddress","lpTotalSupply","getBalanceNumber","BigNumber","totalDeposits","token1Address","token2Address","pairToken","quoteToken","lpAddress","lpAddresses","findPrice","tokenAddress","price","_token1Price","_token2Price","res","account","getTokenBalances","token_addresses","Promise","all","data","token_address","toLowerCase","_totalToken1InPool","balance","Number","decimals","_totalToken2InPool","usePrevious","value","ref","React","Latinise","latin_map","τ","Τ","latinise","input","replace","x","useBlock","useSelector","state","block","StyledInput","styled","Input","theme","colors","MGG_container","InputWrapper","div","mediaQueries","sm","Container","SearchInput","onChangeCallback","onChange","placeholder","toggled","setToggled","searchText","setSearchText","t","useTranslation","debouncedOnChange","useMemo","debounce","e","target","onBlur","_excluded","extendSxProp","props","finalSx","inSx","sx","systemProps","otherProps","Object","keys","forEach","prop","propToStyleFunction","splitProps","_objectWithoutPropertiesLoose","Array","isArray","isPlainObject","_extends","GridContext","getGridUtilityClass","slot","generateUtilityClass","GRID_SIZES","gridClasses","generateUtilityClasses","map","spacing","direction","wrap","size","getOffset","val","parse","parseFloat","String","resolveSpacingClasses","container","styles","isNaN","xs","md","lg","xl","GridRoot","name","overridesResolver","ownerState","item","zeroMinWidth","root","boxSizing","display","flexWrap","width","margin","minWidth","directionValues","resolveBreakpointValues","values","breakpoints","handleBreakpoints","propValue","output","flexDirection","indexOf","maxWidth","rowSpacing","rowSpacingValues","themeSpacing","marginTop","paddingTop","columnSpacing","columnSpacingValues","marginLeft","paddingLeft","reduce","globalStyles","breakpoint","flexBasis","flexGrow","flexShrink","columnsBreakpointValues","columns","columnValue","undefined","Math","round","more","fullWidth","assign","up","Grid","inProps","element","useThemeProps","className","columnsProp","columnSpacingProp","component","rowSpacingProp","other","columnsContext","classes","slots","composeClasses","useUtilityClasses","_jsx","clsx","as","Provider","children","StyledNotFound","NotAvailable","title","src","alt","style","marginBottom","mb","ToggleWrapper","FilterItem","Button","isGrid","MGG_active","Flex","Section","HeaderSection","BodySection","StakeSection","Cards2","button","bgColor","Card2Container","TokenLogo","img","Badge","type","getImageUrlFromToken","getAddress","symbol","tokens","wbnb","iconExtension","FarmCard2","userDataReady","isNew","removed","cakePrice","dummyState","setFetchData","toString","MAINNET_CHAIN_ID","prevLPPrice","prevRewardPrice","setTimeout","farmV2Apr","getFarmV2Apr","rewardRate","apr","toFixed","height","UIProps","cursor","to","pid","gridTemplateColumns","flexFlow","columnGap","justifyContent","color","alignItems","lpSymbol","textAlign","remainingDays","PoolCard2","pool","stakingToken","sousId","earningToken","userData","isFinished","isComingSoon","startBlock","endBlock","poolCategory","totalStaked","stakingTokenPrice","rewardPerBlock","tokenPerBlock","temp","times","stakedBalance","currentBlock","contractAddress","getPoolBlockInfo","blocksRemaining","shouldShowBlockCountdown","blocksUntilStart","hasPoolStarted","blocksToDisplay","stakingTokenBalance","BIG_ZERO","poolApr","PoolCategory","BINANCE","getPoolApr","formatNumber","Gamefi","query","setQuery","pathname","useRouteMatch","path","useLocation","useFarms","farmsLP","userDataLoaded","poolsWithoutAutoVault","usePools","pools","usePriceCakeBusd","isArchived","includes","isActive","useCakeVault","userShares","cakeAtLastUserAction","accountHasVaultShares","fees","performanceFee","pricePerFullShare","totalCakeInVault","gt","usePollFarmsData","useFetchCakeVault","useFetchPublicPoolsData","stakedOnly","setStakedOnly","activeFarms","filter","hasEnded","isArchivedPid","inactiveFarms","archivedFarms","stakedOnlyFarms","isGreaterThan","stakedInactiveFarms","farmsList","useCallback","farmsToDisplay","farmsToDisplayWithAPR","lpTotalInQuoteToken","busdPrice","totalLiquidity","getFarmApr","poolWeight","liquidity","lowercaseQuery","cakePool","isAutoVault","partition","finishedPools","openPools","stakedOnlyFinishedPools","stakedOnlyOpenPools","stakedMemoized","stakingList","activePools","inactivePools","renderContent","RENDER_TYPE","rowGap","length","Farm","Pool","render","padding","checked","scale","textTransform","event"],"mappings":"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","file":"static/js/15.5d268d01.chunk.js","sourcesContent":["import { useEffect, useState, useRef } from 'react'\nimport Web3 from 'web3'\nimport { useWeb3React } from '@web3-react/core'\nimport web3NoAccount from 'utils/web3'\n\n/**\n * Provides a web3 instance using the provider provided by useWallet\n * with a fallback of an httpProver\n * Recreate web3 instance only if the provider change\n */\nconst useWeb3 = () => {\n  const { library } = useWeb3React()\n  const refEth = useRef(library)\n  const [web3, setweb3] = useState(library ? new Web3(library) : web3NoAccount)\n\n  useEffect(() => {\n    if (library !== refEth.current) {\n      setweb3(library ? new Web3(library) : web3NoAccount)\n      refEth.current = library\n    }\n  }, [library])\n\n  return web3\n}\n\nexport default useWeb3\n","const useChainFinder = (chainId: number) => {\n  switch (chainId) {\n    case 1:\n      return 'eth'\n    case 3:\n      return 'ropsten'\n    case 56:\n      return 'bsc'\n    case 97:\n      return 'bsc testnet'\n    default:\n      return 'bsc'\n  }\n}\n\nexport default useChainFinder\n","import { useEffect, useState } from 'react'\nimport { SPARKSWAP_API, API_ASSETS, API_SUMMARY, API_LIQUIDITY, API_LASTPRICE, API_DATA } from 'config'\nimport useWeb3 from 'hooks/useWeb3'\nimport BigNumber from 'bignumber.js/bignumber'\nimport { getBalanceNumber } from 'utils/formatBalance'\nimport { useMoralisWeb3Api } from 'react-moralis'\nimport { useWeb3React } from '@web3-react/core'\nimport useChainFinder from './chainHelpers'\n\nexport const useTokenPrice = (tokenAddress: string) => {\n  const MoralisWeb3Api = useMoralisWeb3Api()\n  const { chainId } = useWeb3React()\n\n  const chainName = useChainFinder(chainId)\n\n  const [tokenPrice, setTokenPrice] = useState(0)\n  const web3 = useWeb3()\n\n  let _tokenAddress\n  try {\n    if (tokenAddress === undefined) throw new Error('Token address undefined')\n    _tokenAddress = web3.utils.toChecksumAddress(tokenAddress)\n  } catch {\n    console.error('Invalid staking and reward address')\n  }\n\n  useEffect(() => {\n    const fetchData = async () => {\n      try {\n        const result = await MoralisWeb3Api.token.getTokenPrice({ chain: chainName, address: _tokenAddress })\n        const _tokenPrice = result.usdPrice\n\n        setTokenPrice(_tokenPrice)\n      } catch (error) {\n        console.error('Unable to fetch data:', error)\n      }\n    }\n\n    fetchData()\n  }, [setTokenPrice, _tokenAddress, MoralisWeb3Api, chainName])\n\n  return { tokenPrice }\n}\n\nexport const usePoolPrice = (stakingTokenAddress: string, rewardTokenAddress: string, isFetchData?: boolean) => {\n  const MoralisWeb3Api = useMoralisWeb3Api()\n  const { chainId } = useWeb3React()\n  let chainName: 'eth' | 'ropsten' | 'bsc' | 'bsc testnet' = 'eth'\n  chainName = useChainFinder(chainId)\n  const [stakingPrice, setStakingPrice] = useState(0)\n  const [rewardPrice, setRewardPrice] = useState(0)\n\n  const web3 = useWeb3()\n  let _stakingTokenAddress\n  let _rewardTokenAddress\n  try {\n    _stakingTokenAddress = web3.utils.toChecksumAddress(stakingTokenAddress)\n    _rewardTokenAddress = web3.utils.toChecksumAddress(rewardTokenAddress)\n  } catch {\n    console.error('Invalid staking and reward address')\n  }\n\n  useEffect(() => {\n    const fetchData = async () => {\n      try {\n        let result\n        result = await MoralisWeb3Api.token.getTokenPrice({ chain: chainName, address: _stakingTokenAddress })\n        const _stakingTokenPrice = result.usdPrice\n\n        result = await MoralisWeb3Api.token.getTokenPrice({ chain: chainName, address: _rewardTokenAddress })\n        const _rewardTokenPrice = result.usdPrice\n\n        setStakingPrice(_stakingTokenPrice)\n        setRewardPrice(_rewardTokenPrice)\n      } catch (error) {\n        console.error('Unable to fetch data:', error)\n      }\n    }\n    if (isFetchData) {\n      fetchData()\n    }\n  }, [\n    setStakingPrice,\n    setRewardPrice,\n    _stakingTokenAddress,\n    _rewardTokenAddress,\n    MoralisWeb3Api,\n    chainName,\n    isFetchData,\n  ])\n\n  return { stakingPrice, rewardPrice }\n}\n\nexport const useFarmPrice = (farm: any, chain: any, isFetchData?: boolean) => {\n  const MoralisWeb3Api = useMoralisWeb3Api()\n  let chainName: 'eth' | 'ropsten' | 'bsc' | 'bsc testnet' = 'eth'\n  chainName = useChainFinder(chain)\n  const [LPPrice, setLPPrice] = useState(0)\n  const [rewardPrice, setRewardPrice] = useState(0)\n  const web3 = useWeb3()\n\n  useEffect(() => {\n    if (!farm) {\n      return\n    }\n    const lpTotalSupply = getBalanceNumber(new BigNumber(farm.totalDeposits ?? 0))\n    const token1Address = farm.token.address[chain]\n    const token2Address = farm.pairToken.address[chain]\n    const rewardTokenAddress = farm.quoteToken.address[chain]\n    const lpAddress = farm.lpAddresses[chain]\n\n    let _token1Address\n    let _token2Address\n    let _rewardTokenAddress\n    let _lpAddress\n    try {\n      _token1Address = web3.utils.toChecksumAddress(token1Address)\n      _token2Address = web3.utils.toChecksumAddress(token2Address)\n      _rewardTokenAddress = web3.utils.toChecksumAddress(rewardTokenAddress)\n      _lpAddress = web3.utils.toChecksumAddress(lpAddress)\n    } catch {\n      console.error('Invalid staking and reward address')\n    }\n\n    const findPrice = async (tokenAddress: string) => {\n      const result = await MoralisWeb3Api.token.getTokenPrice({ chain: chainName, address: tokenAddress })\n      const price = result.usdPrice\n      return price\n    }\n\n    const fetchData = async () => {\n      try {\n        let _totalToken1InPool\n        let _totalToken2InPool\n        // result = await MoralisWeb3Api.token.getTokenPrice({chain: chainName, address: _token1Address})\n        // result = await MoralisWeb3Api.token.getTokenPrice({chain: chainName, address: _token2Address})\n        // result = await MoralisWeb3Api.token.getTokenPrice({chain: chainName, address: _rewardTokenAddress})\n        const _token1Price = findPrice(_token1Address)\n        const _token2Price = findPrice(_token2Address)\n        const _rewardTokenPrice = findPrice(_rewardTokenAddress)\n        const res = MoralisWeb3Api.account.getTokenBalances({\n          chain: chainName,\n          address: _lpAddress,\n          token_addresses: [_token1Address, _token2Address],\n        })\n        const data = await Promise.all([_token1Price, _token2Price, _rewardTokenPrice, res])\n        const result = data[3]\n        if (result[0].token_address.toLowerCase() === _token1Address.toLowerCase()) {\n          _totalToken1InPool = getBalanceNumber(new BigNumber(result[0].balance), Number(result[0].decimals))\n        } else {\n          _totalToken2InPool = getBalanceNumber(new BigNumber(result[0].balance), Number(result[0].decimals))\n        }\n\n        if (result[1].token_address.toLowerCase() === _token1Address.toLowerCase()) {\n          _totalToken1InPool = getBalanceNumber(new BigNumber(result[1].balance), Number(result[1].decimals))\n        } else {\n          _totalToken2InPool = getBalanceNumber(new BigNumber(result[1].balance), Number(result[1].decimals))\n        }\n\n        setLPPrice((_totalToken1InPool * data[0] + _totalToken2InPool * data[1]) / lpTotalSupply)\n        setRewardPrice(data[2])\n      } catch (error) {\n        console.error('Unable to fetch data:', error)\n      }\n    }\n    if (isFetchData) {\n      fetchData()\n    }\n  }, [web3.utils, farm, chain, isFetchData, setLPPrice, setRewardPrice, chainName, MoralisWeb3Api])\n\n  if (!farm) {\n    return { LPPrice: 0, rewardPrice: 0 }\n  }\n\n  return { LPPrice, rewardPrice }\n}\n\nexport default usePoolPrice\n","import React, { useRef, useEffect } from 'react'\n\nfunction usePrevious(value) {\n  const ref = React.useRef()\n  useEffect(() => {\n    ref.current = value\n  }, [value])\n  return ref.current\n}\n\nexport default usePrevious\n","export const Latinise = {\n  latin_map: {\n    τ: 't',\n    Τ: 'T',\n  },\n}\n\nexport const latinise = (input: string) => {\n  return input.replace(/[^A-Za-z0-9[\\] ]/g, (x) => Latinise.latin_map[x] || x)\n}\n","import { useEffect, useRef } from 'react'\nimport { useSelector } from 'react-redux'\nimport { useAppDispatch } from 'state'\nimport { setBlock } from '.'\nimport { State } from '../types'\n\nexport const useBlock = () => {\n  return useSelector((state: State) => state.block)\n}\n\nexport const useInitialBlock = () => {\n  return useSelector((state: State) => state.block.initialBlock)\n}\n","import React, { useState, useMemo } from 'react'\nimport { Input } from '@metagg/mgg-uikit'\nimport styled from 'styled-components'\nimport debounce from 'lodash/debounce'\nimport { useTranslation } from 'contexts/Localization'\n\nconst StyledInput = styled(Input)`\n  margin-left: auto;\n  background-color: ${({ theme }) => theme.colors.MGG_container};\n`\n\nconst InputWrapper = styled.div`\n  position: relative;\n  ${({ theme }) => theme.mediaQueries.sm} {\n    display: block;\n  }\n`\n\nconst Container = styled.div<{ toggled: boolean }>``\n\ninterface Props {\n  onChange: (e: React.ChangeEvent<HTMLInputElement>) => void\n  placeholder?: string\n}\n\nconst SearchInput: React.FC<Props> = ({ onChange: onChangeCallback, placeholder = 'Search' }) => {\n  const [toggled, setToggled] = useState(false)\n  const [searchText, setSearchText] = useState('')\n\n  const { t } = useTranslation()\n\n  const debouncedOnChange = useMemo(\n    () => debounce((e: React.ChangeEvent<HTMLInputElement>) => onChangeCallback(e), 500),\n    [onChangeCallback],\n  )\n\n  const onChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n    setSearchText(e.target.value)\n    debouncedOnChange(e)\n  }\n\n  return (\n    <Container toggled={toggled}>\n      <InputWrapper>\n        <StyledInput\n          value={searchText}\n          onChange={onChange}\n          placeholder={t(placeholder)}\n          onBlur={() => setToggled(false)}\n        />\n      </InputWrapper>\n    </Container>\n  )\n}\n\nexport default SearchInput\n","import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nconst _excluded = [\"sx\"];\nimport { isPlainObject } from '@mui/utils';\nimport { propToStyleFunction } from '../getThemeValue';\n\nconst splitProps = props => {\n  const result = {\n    systemProps: {},\n    otherProps: {}\n  };\n  Object.keys(props).forEach(prop => {\n    if (propToStyleFunction[prop]) {\n      result.systemProps[prop] = props[prop];\n    } else {\n      result.otherProps[prop] = props[prop];\n    }\n  });\n  return result;\n};\n\nexport default function extendSxProp(props) {\n  const {\n    sx: inSx\n  } = props,\n        other = _objectWithoutPropertiesLoose(props, _excluded);\n\n  const {\n    systemProps,\n    otherProps\n  } = splitProps(other);\n  let finalSx;\n\n  if (Array.isArray(inSx)) {\n    finalSx = [systemProps, ...inSx];\n  } else if (typeof inSx === 'function') {\n    finalSx = (...args) => {\n      const result = inSx(...args);\n\n      if (!isPlainObject(result)) {\n        return systemProps;\n      }\n\n      return _extends({}, systemProps, result);\n    };\n  } else {\n    finalSx = _extends({}, systemProps, inSx);\n  }\n\n  return _extends({}, otherProps, {\n    sx: finalSx\n  });\n}","import * as React from 'react';\n/**\n * @ignore - internal component.\n */\n\nconst GridContext = /*#__PURE__*/React.createContext();\n\nif (process.env.NODE_ENV !== 'production') {\n  GridContext.displayName = 'GridContext';\n}\n\nexport default GridContext;","import { generateUtilityClass, generateUtilityClasses } from '@mui/base';\nexport function getGridUtilityClass(slot) {\n  return generateUtilityClass('MuiGrid', slot);\n}\nconst SPACINGS = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\nconst DIRECTIONS = ['column-reverse', 'column', 'row-reverse', 'row'];\nconst WRAPS = ['nowrap', 'wrap-reverse', 'wrap'];\nconst GRID_SIZES = ['auto', true, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12];\nconst gridClasses = generateUtilityClasses('MuiGrid', ['root', 'container', 'item', 'zeroMinWidth', // spacings\n...SPACINGS.map(spacing => `spacing-xs-${spacing}`), // direction values\n...DIRECTIONS.map(direction => `direction-xs-${direction}`), // wrap values\n...WRAPS.map(wrap => `wrap-xs-${wrap}`), // grid sizes for all breakpoints\n...GRID_SIZES.map(size => `grid-xs-${size}`), ...GRID_SIZES.map(size => `grid-sm-${size}`), ...GRID_SIZES.map(size => `grid-md-${size}`), ...GRID_SIZES.map(size => `grid-lg-${size}`), ...GRID_SIZES.map(size => `grid-xl-${size}`)]);\nexport default gridClasses;","import _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nimport _extends from \"@babel/runtime/helpers/esm/extends\";\nconst _excluded = [\"className\", \"columns\", \"columnSpacing\", \"component\", \"container\", \"direction\", \"item\", \"lg\", \"md\", \"rowSpacing\", \"sm\", \"spacing\", \"wrap\", \"xl\", \"xs\", \"zeroMinWidth\"];\n// A grid component using the following libs as inspiration.\n//\n// For the implementation:\n// - https://getbootstrap.com/docs/4.3/layout/grid/\n// - https://github.com/kristoferjoseph/flexboxgrid/blob/master/src/css/flexboxgrid.css\n// - https://github.com/roylee0704/react-flexbox-grid\n// - https://material.angularjs.org/latest/layout/introduction\n//\n// Follow this flexbox Guide to better understand the underlying model:\n// - https://css-tricks.com/snippets/css/a-guide-to-flexbox/\nimport * as React from 'react';\nimport PropTypes from 'prop-types';\nimport clsx from 'clsx';\nimport { unstable_extendSxProp as extendSxProp, handleBreakpoints, unstable_resolveBreakpointValues as resolveBreakpointValues } from '@mui/system';\nimport { unstable_composeClasses as composeClasses } from '@mui/base';\nimport requirePropFactory from '../utils/requirePropFactory';\nimport styled from '../styles/styled';\nimport useThemeProps from '../styles/useThemeProps';\nimport GridContext from './GridContext';\nimport gridClasses, { getGridUtilityClass } from './gridClasses';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\n\nfunction getOffset(val) {\n  const parse = parseFloat(val);\n  return `${parse}${String(val).replace(String(parse), '') || 'px'}`;\n}\n\nexport function generateGrid({\n  theme,\n  ownerState\n}) {\n  let size;\n  return theme.breakpoints.keys.reduce((globalStyles, breakpoint) => {\n    // Use side effect over immutability for better performance.\n    let styles = {};\n\n    if (ownerState[breakpoint]) {\n      size = ownerState[breakpoint];\n    }\n\n    if (!size) {\n      return globalStyles;\n    }\n\n    if (size === true) {\n      // For the auto layouting\n      styles = {\n        flexBasis: 0,\n        flexGrow: 1,\n        maxWidth: '100%'\n      };\n    } else if (size === 'auto') {\n      styles = {\n        flexBasis: 'auto',\n        flexGrow: 0,\n        flexShrink: 0,\n        maxWidth: 'none',\n        width: 'auto'\n      };\n    } else {\n      const columnsBreakpointValues = resolveBreakpointValues({\n        values: ownerState.columns,\n        breakpoints: theme.breakpoints.values\n      });\n      const columnValue = typeof columnsBreakpointValues === 'object' ? columnsBreakpointValues[breakpoint] : columnsBreakpointValues;\n\n      if (columnValue === undefined || columnValue === null) {\n        return globalStyles;\n      } // Keep 7 significant numbers.\n\n\n      const width = `${Math.round(size / columnValue * 10e7) / 10e5}%`;\n      let more = {};\n\n      if (ownerState.container && ownerState.item && ownerState.columnSpacing !== 0) {\n        const themeSpacing = theme.spacing(ownerState.columnSpacing);\n\n        if (themeSpacing !== '0px') {\n          const fullWidth = `calc(${width} + ${getOffset(themeSpacing)})`;\n          more = {\n            flexBasis: fullWidth,\n            maxWidth: fullWidth\n          };\n        }\n      } // Close to the bootstrap implementation:\n      // https://github.com/twbs/bootstrap/blob/8fccaa2439e97ec72a4b7dc42ccc1f649790adb0/scss/mixins/_grid.scss#L41\n\n\n      styles = _extends({\n        flexBasis: width,\n        flexGrow: 0,\n        maxWidth: width\n      }, more);\n    } // No need for a media query for the first size.\n\n\n    if (theme.breakpoints.values[breakpoint] === 0) {\n      Object.assign(globalStyles, styles);\n    } else {\n      globalStyles[theme.breakpoints.up(breakpoint)] = styles;\n    }\n\n    return globalStyles;\n  }, {});\n}\nexport function generateDirection({\n  theme,\n  ownerState\n}) {\n  const directionValues = resolveBreakpointValues({\n    values: ownerState.direction,\n    breakpoints: theme.breakpoints.values\n  });\n  return handleBreakpoints({\n    theme\n  }, directionValues, propValue => {\n    const output = {\n      flexDirection: propValue\n    };\n\n    if (propValue.indexOf('column') === 0) {\n      output[`& > .${gridClasses.item}`] = {\n        maxWidth: 'none'\n      };\n    }\n\n    return output;\n  });\n}\nexport function generateRowGap({\n  theme,\n  ownerState\n}) {\n  const {\n    container,\n    rowSpacing\n  } = ownerState;\n  let styles = {};\n\n  if (container && rowSpacing !== 0) {\n    const rowSpacingValues = resolveBreakpointValues({\n      values: rowSpacing,\n      breakpoints: theme.breakpoints.values\n    });\n    styles = handleBreakpoints({\n      theme\n    }, rowSpacingValues, propValue => {\n      const themeSpacing = theme.spacing(propValue);\n\n      if (themeSpacing !== '0px') {\n        return {\n          marginTop: `-${getOffset(themeSpacing)}`,\n          [`& > .${gridClasses.item}`]: {\n            paddingTop: getOffset(themeSpacing)\n          }\n        };\n      }\n\n      return {};\n    });\n  }\n\n  return styles;\n}\nexport function generateColumnGap({\n  theme,\n  ownerState\n}) {\n  const {\n    container,\n    columnSpacing\n  } = ownerState;\n  let styles = {};\n\n  if (container && columnSpacing !== 0) {\n    const columnSpacingValues = resolveBreakpointValues({\n      values: columnSpacing,\n      breakpoints: theme.breakpoints.values\n    });\n    styles = handleBreakpoints({\n      theme\n    }, columnSpacingValues, propValue => {\n      const themeSpacing = theme.spacing(propValue);\n\n      if (themeSpacing !== '0px') {\n        return {\n          width: `calc(100% + ${getOffset(themeSpacing)})`,\n          marginLeft: `-${getOffset(themeSpacing)}`,\n          [`& > .${gridClasses.item}`]: {\n            paddingLeft: getOffset(themeSpacing)\n          }\n        };\n      }\n\n      return {};\n    });\n  }\n\n  return styles;\n}\nexport function resolveSpacingClasses(spacing, container, styles = {}) {\n  // in case of grid item or undefined/null or `spacing` <= 0\n  if (!container || !spacing || spacing <= 0) {\n    return [];\n  } // in case of string/number `spacing`\n\n\n  if (typeof spacing === 'string' && !Number.isNaN(Number(spacing)) || typeof spacing === 'number') {\n    return [styles[`spacing-xs-${String(spacing)}`] || `spacing-xs-${String(spacing)}`];\n  } // in case of object `spacing`\n\n\n  const {\n    xs,\n    sm,\n    md,\n    lg,\n    xl\n  } = spacing;\n  return [Number(xs) > 0 && (styles[`spacing-xs-${String(xs)}`] || `spacing-xs-${String(xs)}`), Number(sm) > 0 && (styles[`spacing-sm-${String(sm)}`] || `spacing-sm-${String(sm)}`), Number(md) > 0 && (styles[`spacing-md-${String(md)}`] || `spacing-md-${String(md)}`), Number(lg) > 0 && (styles[`spacing-lg-${String(lg)}`] || `spacing-lg-${String(lg)}`), Number(xl) > 0 && (styles[`spacing-xl-${String(xl)}`] || `spacing-xl-${String(xl)}`)];\n} // Default CSS values\n// flex: '0 1 auto',\n// flexDirection: 'row',\n// alignItems: 'flex-start',\n// flexWrap: 'nowrap',\n// justifyContent: 'flex-start',\n\nconst GridRoot = styled('div', {\n  name: 'MuiGrid',\n  slot: 'Root',\n  overridesResolver: (props, styles) => {\n    const {\n      container,\n      direction,\n      item,\n      lg,\n      md,\n      sm,\n      spacing,\n      wrap,\n      xl,\n      xs,\n      zeroMinWidth\n    } = props.ownerState;\n    return [styles.root, container && styles.container, item && styles.item, zeroMinWidth && styles.zeroMinWidth, ...resolveSpacingClasses(spacing, container, styles), direction !== 'row' && styles[`direction-xs-${String(direction)}`], wrap !== 'wrap' && styles[`wrap-xs-${String(wrap)}`], xs !== false && styles[`grid-xs-${String(xs)}`], sm !== false && styles[`grid-sm-${String(sm)}`], md !== false && styles[`grid-md-${String(md)}`], lg !== false && styles[`grid-lg-${String(lg)}`], xl !== false && styles[`grid-xl-${String(xl)}`]];\n  }\n})(({\n  ownerState\n}) => _extends({\n  boxSizing: 'border-box'\n}, ownerState.container && {\n  display: 'flex',\n  flexWrap: 'wrap',\n  width: '100%'\n}, ownerState.item && {\n  margin: 0 // For instance, it's useful when used with a `figure` element.\n\n}, ownerState.zeroMinWidth && {\n  minWidth: 0\n}, ownerState.wrap === 'nowrap' && {\n  flexWrap: 'nowrap'\n}, ownerState.wrap === 'reverse' && {\n  flexWrap: 'wrap-reverse'\n}), generateDirection, generateRowGap, generateColumnGap, generateGrid);\n\nconst useUtilityClasses = ownerState => {\n  const {\n    classes,\n    container,\n    direction,\n    item,\n    lg,\n    md,\n    sm,\n    spacing,\n    wrap,\n    xl,\n    xs,\n    zeroMinWidth\n  } = ownerState;\n  const slots = {\n    root: ['root', container && 'container', item && 'item', zeroMinWidth && 'zeroMinWidth', ...resolveSpacingClasses(spacing, container), direction !== 'row' && `direction-xs-${String(direction)}`, wrap !== 'wrap' && `wrap-xs-${String(wrap)}`, xs !== false && `grid-xs-${String(xs)}`, sm !== false && `grid-sm-${String(sm)}`, md !== false && `grid-md-${String(md)}`, lg !== false && `grid-lg-${String(lg)}`, xl !== false && `grid-xl-${String(xl)}`]\n  };\n  return composeClasses(slots, getGridUtilityClass, classes);\n};\n\nconst Grid = /*#__PURE__*/React.forwardRef(function Grid(inProps, ref) {\n  const themeProps = useThemeProps({\n    props: inProps,\n    name: 'MuiGrid'\n  });\n  const props = extendSxProp(themeProps);\n\n  const {\n    className,\n    columns: columnsProp,\n    columnSpacing: columnSpacingProp,\n    component = 'div',\n    container = false,\n    direction = 'row',\n    item = false,\n    lg = false,\n    md = false,\n    rowSpacing: rowSpacingProp,\n    sm = false,\n    spacing = 0,\n    wrap = 'wrap',\n    xl = false,\n    xs = false,\n    zeroMinWidth = false\n  } = props,\n        other = _objectWithoutPropertiesLoose(props, _excluded);\n\n  const rowSpacing = rowSpacingProp || spacing;\n  const columnSpacing = columnSpacingProp || spacing;\n  const columnsContext = React.useContext(GridContext); // setting prop before context to accomodate nesting\n  // colums set with default breakpoint unit of 12\n\n  const columns = columnsProp || columnsContext || 12;\n\n  const ownerState = _extends({}, props, {\n    columns,\n    container,\n    direction,\n    item,\n    lg,\n    md,\n    sm,\n    rowSpacing,\n    columnSpacing,\n    wrap,\n    xl,\n    xs,\n    zeroMinWidth\n  });\n\n  const classes = useUtilityClasses(ownerState);\n\n  const wrapChild = element => columns !== 12 ? /*#__PURE__*/_jsx(GridContext.Provider, {\n    value: columns,\n    children: element\n  }) : element;\n\n  return wrapChild( /*#__PURE__*/_jsx(GridRoot, _extends({\n    ownerState: ownerState,\n    className: clsx(classes.root, className),\n    as: component,\n    ref: ref\n  }, other)));\n});\nprocess.env.NODE_ENV !== \"production\" ? Grid.propTypes\n/* remove-proptypes */\n= {\n  // ----------------------------- Warning --------------------------------\n  // | These PropTypes are generated from the TypeScript type definitions |\n  // |     To update them edit the d.ts file and run \"yarn proptypes\"     |\n  // ----------------------------------------------------------------------\n\n  /**\n   * The content of the component.\n   */\n  children: PropTypes.node,\n\n  /**\n   * Override or extend the styles applied to the component.\n   */\n  classes: PropTypes.object,\n\n  /**\n   * @ignore\n   */\n  className: PropTypes.string,\n\n  /**\n   * The number of columns.\n   * @default 12\n   */\n  columns: PropTypes.oneOfType([PropTypes.arrayOf(PropTypes.number), PropTypes.number, PropTypes.object]),\n\n  /**\n   * Defines the horizontal space between the type `item` components.\n   * It overrides the value of the `spacing` prop.\n   */\n  columnSpacing: PropTypes.oneOfType([PropTypes.arrayOf(PropTypes.oneOfType([PropTypes.number, PropTypes.string])), PropTypes.number, PropTypes.object, PropTypes.string]),\n\n  /**\n   * The component used for the root node.\n   * Either a string to use a HTML element or a component.\n   */\n  component: PropTypes.elementType,\n\n  /**\n   * If `true`, the component will have the flex *container* behavior.\n   * You should be wrapping *items* with a *container*.\n   * @default false\n   */\n  container: PropTypes.bool,\n\n  /**\n   * Defines the `flex-direction` style property.\n   * It is applied for all screen sizes.\n   * @default 'row'\n   */\n  direction: PropTypes.oneOfType([PropTypes.oneOf(['column-reverse', 'column', 'row-reverse', 'row']), PropTypes.arrayOf(PropTypes.oneOf(['column-reverse', 'column', 'row-reverse', 'row'])), PropTypes.object]),\n\n  /**\n   * If `true`, the component will have the flex *item* behavior.\n   * You should be wrapping *items* with a *container*.\n   * @default false\n   */\n  item: PropTypes.bool,\n\n  /**\n   * If a number, it sets the number of columns the grid item uses.\n   * It can't be greater than the total number of columns of the container (12 by default).\n   * If 'auto', the grid item's width matches its content.\n   * If false, the prop is ignored.\n   * If true, the grid item's width grows to use the space available in the grid container.\n   * The value is applied for the `lg` breakpoint and wider screens if not overridden.\n   * @default false\n   */\n  lg: PropTypes.oneOfType([PropTypes.oneOf(['auto']), PropTypes.number, PropTypes.bool]),\n\n  /**\n   * If a number, it sets the number of columns the grid item uses.\n   * It can't be greater than the total number of columns of the container (12 by default).\n   * If 'auto', the grid item's width matches its content.\n   * If false, the prop is ignored.\n   * If true, the grid item's width grows to use the space available in the grid container.\n   * The value is applied for the `md` breakpoint and wider screens if not overridden.\n   * @default false\n   */\n  md: PropTypes.oneOfType([PropTypes.oneOf(['auto']), PropTypes.number, PropTypes.bool]),\n\n  /**\n   * Defines the vertical space between the type `item` components.\n   * It overrides the value of the `spacing` prop.\n   */\n  rowSpacing: PropTypes.oneOfType([PropTypes.arrayOf(PropTypes.oneOfType([PropTypes.number, PropTypes.string])), PropTypes.number, PropTypes.object, PropTypes.string]),\n\n  /**\n   * If a number, it sets the number of columns the grid item uses.\n   * It can't be greater than the total number of columns of the container (12 by default).\n   * If 'auto', the grid item's width matches its content.\n   * If false, the prop is ignored.\n   * If true, the grid item's width grows to use the space available in the grid container.\n   * The value is applied for the `sm` breakpoint and wider screens if not overridden.\n   * @default false\n   */\n  sm: PropTypes.oneOfType([PropTypes.oneOf(['auto']), PropTypes.number, PropTypes.bool]),\n\n  /**\n   * Defines the space between the type `item` components.\n   * It can only be used on a type `container` component.\n   * @default 0\n   */\n  spacing: PropTypes.oneOfType([PropTypes.arrayOf(PropTypes.oneOfType([PropTypes.number, PropTypes.string])), PropTypes.number, PropTypes.object, PropTypes.string]),\n\n  /**\n   * The system prop that allows defining system overrides as well as additional CSS styles.\n   */\n  sx: PropTypes.oneOfType([PropTypes.arrayOf(PropTypes.oneOfType([PropTypes.func, PropTypes.object, PropTypes.bool])), PropTypes.func, PropTypes.object]),\n\n  /**\n   * Defines the `flex-wrap` style property.\n   * It's applied for all screen sizes.\n   * @default 'wrap'\n   */\n  wrap: PropTypes.oneOf(['nowrap', 'wrap-reverse', 'wrap']),\n\n  /**\n   * If a number, it sets the number of columns the grid item uses.\n   * It can't be greater than the total number of columns of the container (12 by default).\n   * If 'auto', the grid item's width matches its content.\n   * If false, the prop is ignored.\n   * If true, the grid item's width grows to use the space available in the grid container.\n   * The value is applied for the `xl` breakpoint and wider screens if not overridden.\n   * @default false\n   */\n  xl: PropTypes.oneOfType([PropTypes.oneOf(['auto']), PropTypes.number, PropTypes.bool]),\n\n  /**\n   * If a number, it sets the number of columns the grid item uses.\n   * It can't be greater than the total number of columns of the container (12 by default).\n   * If 'auto', the grid item's width matches its content.\n   * If false, the prop is ignored.\n   * If true, the grid item's width grows to use the space available in the grid container.\n   * The value is applied for all the screen sizes with the lowest priority.\n   * @default false\n   */\n  xs: PropTypes.oneOfType([PropTypes.oneOf(['auto']), PropTypes.number, PropTypes.bool]),\n\n  /**\n   * If `true`, it sets `min-width: 0` on the item.\n   * Refer to the limitations section of the documentation to better understand the use case.\n   * @default false\n   */\n  zeroMinWidth: PropTypes.bool\n} : void 0;\n\nif (process.env.NODE_ENV !== 'production') {\n  const requireProp = requirePropFactory('Grid', Grid); // eslint-disable-next-line no-useless-concat\n\n  Grid['propTypes' + ''] = _extends({}, Grid.propTypes, {\n    direction: requireProp('container'),\n    lg: requireProp('item'),\n    md: requireProp('item'),\n    sm: requireProp('item'),\n    spacing: requireProp('container'),\n    wrap: requireProp('container'),\n    xs: requireProp('item'),\n    zeroMinWidth: requireProp('item')\n  });\n}\n\nexport default Grid;","import React from 'react'\nimport styled from 'styled-components'\nimport { Button, Heading, Text } from '@sparkpointio/sparkswap-uikit'\nimport { useTranslation } from 'contexts/Localization'\n\nconst StyledNotFound = styled.div`\n  align-items: center;\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n`\n\nconst NotAvailable = ({ title }) => {\n  const { t } = useTranslation()\n\n  return (\n    <StyledNotFound>\n      <img src=\"/logo.png\" alt=\"LogoIcon\" width=\"64px\" style={{ marginBottom: '8px' }} />\n      <Text mb=\"16px\">{`No ${title} found`}</Text>\n    </StyledNotFound>\n  )\n}\n\nexport default NotAvailable\n","import styled from 'styled-components'\nimport { Button, Flex } from '@metagg/mgg-uikit'\nimport { Grid } from '@mui/material'\n\nexport const ToggleWrapper = styled.div`\n  display: flex;\n  align-items: center;\n`\n\nexport const ButtonA = styled(Button)`\n  width: 10rem;\n`\nexport const ButtonB = styled(Button)<{ isGrid: boolean }>`\n  padding: 1rem;\n  background-color: ${({ isGrid, theme }) => (isGrid ? theme.colors.MGG_active : theme.colors.MGG_container)};\n`\nexport const FilterItem = styled(Flex)`\n  align-items: center;\n  text-align: center;\n  flex-flow: row;\n  column-gap: 0.5rem;\n`\n\nexport const Section = styled(Flex)`\n  flex-flow: row-wrap;\n  justify-content: space-between;\n  margin-bottom: 2rem;\n`\n\nexport const HeaderSection = styled(Section)``\nexport const BodySection = styled(Section)`\n  flex-direction: column;\n`\nexport const StakeSection = styled(Flex)`\n  width: 100%;\n`\n","import styled, { ThemeContext } from 'styled-components'\n\nexport const Cards2 = styled.button<{ src?: string; bgColor?: string }>`\n  width: 100%;\n  position: relative;\n  min-width: 20rem;\n  min-height: 12rem;\n  cursor: pointer;\n  border: none;\n  padding: 0;\n  text-align: left;\n  flex: 1;\n  display: flex;\n  align-items: stretch;\n  background-color: ${({ bgColor }) => bgColor ?? '#030f62'};\n  ${({ src }) =>\n    `&:before {\n      content: '';\n      position: absolute;\n      left: 0;\n      top: 0;\n      opacity: 0.2;\n      width: 100%;\n      height: 100%;\n      z-index: 0;\n      background-image: url(${src ?? `./MGG.png`});\n      background-repeat: no-repeat;\n      // background-attachment: fixed;\n      background-position: center;\n      background-size: cover;\n    }`}\n  & > * {\n    flex: 1;\n  }\n`\n\nexport const Card2Container = styled.div`\n  display: grid;\n  position: relative;\n  padding: 1rem 1.5rem;\n  background: linear-gradient(0deg, rgb(0 0 0) 0%, rgb(0 0 0 / 50%) 25%, rgba(36, 121, 9, 0) 75%);\n  width: 100%;\n  height: 100%;\n  z-index: 2;\n  grid-template-columns: 1fr 1fr;\n`\nexport const TokenLogo = styled.img<{ size?: string }>`\n  border-radius: 50%;\n  height: ${({ size }) => (!size ? '80px' : size)};\n  width: ${({ size }) => (!size ? '80px' : size)};\n  z-index: 2;\n  @media (max-width: 500px) {\n    height: ${({ size }) => (!size ? '50px' : size)};\n    width: ${({ size }) => (!size ? '50px' : size)};\n  }\n`\n\nexport const Badge = styled.div<{ type?: number }>`\n  ${({ type }) =>\n    type\n      ? `\n      padding: 0.2rem 0.5rem;\n      border: thin solid white;\n      border-radius: 0.3rem;\n    `\n      : `\n      padding: 0.2rem 0.5rem;\n      background-color: rgb(0,196,204);\n      border-radius: 0.3rem;\n    `}\n`\n","import React, { useCallback, useContext, useEffect, useMemo, useRef, useState } from 'react'\nimport { Link } from 'react-router-dom'\nimport BigNumber from 'bignumber.js'\nimport { Flex, Image, RowType, Toggle } from '@pancakeswap/uikit'\nimport { Text, Heading } from '@metagg/mgg-uikit'\nimport { Oval } from 'react-loading-icons'\nimport { useWeb3React } from '@web3-react/core'\nimport styled, { ThemeContext } from 'styled-components'\nimport tokens from 'config/constants/tokens'\nimport { Token } from 'config/constants/types'\nimport { Farm, Pool } from 'state/types'\nimport getLiquidityUrlPathParts from 'utils/getLiquidityUrlPathParts'\nimport { getAddress } from 'utils/addressHelpers'\nimport { getFarmApr, getFarmV2Apr } from 'utils/apr'\nimport { useFarmPrice } from 'hooks/price'\nimport usePrevious from 'utils/refHelpers'\nimport { getBalanceNumber, getBalanceAmount } from 'utils/formatBalance'\nimport { Cards2, Card2Container, TokenLogo, Badge } from './styled'\nimport { FarmWithStakedValue } from '../../config'\nimport { MAINNET_CHAIN_ID } from '../../../../config'\n\nconst getImageUrlFromToken = (token: Token) => {\n  const address = getAddress(token.symbol === 'BNB' ? tokens.wbnb.address : token.address)\n  return `/images/tokens/${address}.${token.iconExtension ?? 'svg'}`\n}\n\ninterface FarmCard2Props {\n  bgColor?: string\n  src?: string\n  userDataReady?: boolean\n  farm?: FarmWithStakedValue\n  removed?: boolean\n  cakePrice?: BigNumber\n  account?: string\n  isNew?: boolean\n}\n\nconst FarmCard2: React.FC<FarmCard2Props> = ({\n  bgColor = '#030f62',\n  src = './MGG.png',\n  userDataReady,\n  farm,\n  removed,\n  cakePrice,\n  account,\n  isNew,\n}) => {\n  // const farmImage = farm.lpSymbol.split(' ')[0].toLocaleLowerCase()\n  // const formatTotalRewardRate = getBalanceAmount(new BigNumber(farm.totalRewardRate ?? 0)).toFormat(4)\n  // const lpLabel = farm.lpSymbol && farm.lpSymbol.toUpperCase().replace('PANCAKE', '')\n  // const earnLabel = farm.quoteToken.symbol\n  // const liquidityUrlPathParts = getLiquidityUrlPathParts({\n  //   mainTokenAddress: farm.token.address,\n  //   pairTokenAddress: farm.pairToken.address,\n  // })\n  const [dummyState, setDummyState] = useState(null)\n  const [isFetchData, setFetchData] = useState<boolean | null>(true)\n  const { chainId } = useWeb3React()\n  const chain = chainId ? chainId.toString() : MAINNET_CHAIN_ID\n\n  const lpTotalSupply = getBalanceNumber(new BigNumber(farm.totalDeposits ?? 0))\n  const { LPPrice, rewardPrice } = useFarmPrice(farm, chain, isFetchData)\n  const prevLPPrice = usePrevious(LPPrice)\n  const prevRewardPrice = usePrevious(rewardPrice)\n\n  useEffect(() => {\n    if (LPPrice > 0 || rewardPrice > 0) {\n      setFetchData(false)\n    }\n    setTimeout(() => {\n      setFetchData(true)\n      if (LPPrice !== prevLPPrice || rewardPrice !== prevRewardPrice) {\n        setFetchData(true)\n      } else {\n        setFetchData(false)\n      }\n    }, 60000)\n    if (prevLPPrice === LPPrice || prevRewardPrice === rewardPrice) {\n      setFetchData(false)\n    }\n  }, [LPPrice, rewardPrice, setFetchData, prevLPPrice, prevRewardPrice])\n\n  useEffect(() => {\n    return setFetchData(null)\n  }, [dummyState])\n\n  const farmV2Apr = useMemo(\n    () => getFarmV2Apr(LPPrice, rewardPrice, Number(farm.totalDeposits), Number(farm.rewardRate)),\n    [LPPrice, rewardPrice, farm.totalDeposits, farm.rewardRate],\n  )\n\n  const apr = farmV2Apr > 0 ? `${farmV2Apr.toFixed(2)} %` : <Oval width=\"20px\" height=\"20px\" />\n\n  return (\n    <>\n      <Cards2\n        src={src}\n        bgColor={farm.UIProps ? farm.UIProps.bgColor : null}\n        className=\"shodow-pop\"\n        style={{ cursor: 'pointer' }}\n      >\n        <Link to={`/gamefi/${`LP`}/${farm.pid}`}>\n          <Card2Container style={{ display: 'grid', gridTemplateColumns: '1fr 1fr' }}>\n            <TokenLogo size=\"3.5rem\" src={getImageUrlFromToken(farm.quoteToken)} />\n            <Flex\n              style={{\n                flexFlow: 'row wrap',\n                columnGap: '0.5rem',\n                justifyContent: 'end',\n              }}\n            >\n              {isNew && (\n                <div>\n                  <Badge>\n                    <Text color=\"white\">New</Text>\n                  </Badge>\n                </div>\n              )}\n              <TokenLogo size=\"2rem\" src={getImageUrlFromToken(farm.pairToken)} />\n              <div>\n                <Badge type={1}>\n                  <Text color=\"white\">LP Staking</Text>\n                </Badge>\n              </div>\n            </Flex>\n            <Flex style={{ alignItems: 'end' }}>\n              <div>\n                <Text color=\"white\">{farm.lpSymbol}</Text>\n                <Heading color=\"white\">{farm.name}</Heading>\n              </div>\n            </Flex>\n            <Flex style={{ justifyContent: 'end', alignItems: 'end' }}>\n              <div style={{ textAlign: 'end' }}>\n                <Text color=\"white\">APR {apr}</Text>\n                <Heading color=\"white\">{farm.remainingDays} Days Left</Heading>\n              </div>\n            </Flex>\n          </Card2Container>\n        </Link>\n      </Cards2>\n    </>\n  )\n}\n\nexport default FarmCard2\n","import React, { useCallback, useContext, useEffect, useMemo, useRef, useState } from 'react'\nimport { Link as RLink } from 'react-router-dom'\nimport BigNumber from 'bignumber.js'\nimport { Flex, Link, Image, RowType, Toggle } from '@pancakeswap/uikit'\nimport { Text, Heading } from '@metagg/mgg-uikit'\nimport { Oval } from 'react-loading-icons'\nimport styled, { ThemeContext } from 'styled-components'\nimport tokens from 'config/constants/tokens'\nimport { Token, PoolCategory } from 'config/constants/types'\nimport { Pool } from 'state/types'\nimport UnlockButton from 'components/UnlockButton'\nimport { useTranslation } from 'contexts/Localization'\nimport { BIG_ZERO } from 'utils/bigNumber'\nimport { usePoolPrice } from 'hooks/price'\nimport { getPoolApr } from 'utils/apr'\nimport { getBscScanAddressUrl } from 'utils/bscscan'\nimport { getBalanceNumber, formatNumber } from 'utils/formatBalance'\nimport { getPoolBlockInfo } from 'views/Pools/helpers'\nimport { useBlock } from 'state/block/hooks'\nimport { getBscScanLink } from 'utils'\nimport { getAddress } from 'utils/addressHelpers'\nimport { Cards2, Card2Container, TokenLogo, Badge } from './styled'\n\nconst getImageUrlFromToken = (token: Token) => {\n  const address = getAddress(token.symbol === 'BNB' ? tokens.wbnb.address : token.address)\n  return `/images/tokens/${address}.${token.iconExtension ?? 'svg'}`\n}\n\ninterface PoolCard2Props {\n  bgColor?: string\n  src?: string\n  userDataReady: boolean\n  pool: Pool\n  removed: boolean\n  cakePrice?: BigNumber\n  account?: string\n  isNew?: boolean\n}\n\nconst PoolCard2: React.FC<PoolCard2Props> = ({\n  bgColor = '#030f62',\n  src = './MGG.png',\n  userDataReady,\n  pool,\n  account,\n  isNew,\n}) => {\n  const {\n    sousId,\n    stakingToken,\n    earningToken,\n    isFinished,\n    userData,\n    startBlock,\n    endBlock,\n    isComingSoon,\n    poolCategory,\n    stakingTokenPrice,\n  } = pool\n  const totalStaked = pool.totalStaked\n    ? getBalanceNumber(new BigNumber(pool.totalStaked.toString()), stakingToken.decimals)\n    : 0\n\n  const rewardPerBlock = pool?.tokenPerBlock\n    ? getBalanceNumber(new BigNumber(pool.tokenPerBlock.toString()), earningToken.decimals)\n    : 0\n\n  const temp = new BigNumber(pool.tokenPerBlock).times(new BigNumber(userData.stakedBalance).div(pool.totalStaked))\n  const rewardRate = pool?.tokenPerBlock ? getBalanceNumber(temp) : 0\n\n  const { currentBlock } = useBlock()\n  const stakingAddess = getAddress(pool.contractAddress)\n  const { shouldShowBlockCountdown, blocksUntilStart, blocksRemaining, hasPoolStarted, blocksToDisplay } =\n    getPoolBlockInfo(pool, currentBlock)\n  const stakingTokenBalance = userData?.stakingTokenBalance ? new BigNumber(userData.stakingTokenBalance) : BIG_ZERO\n  const { stakingPrice, rewardPrice } = usePoolPrice(stakingToken.address[56], earningToken.address[56])\n  const isBnbPool = poolCategory === PoolCategory.BINANCE\n  const poolApr = getPoolApr(stakingPrice, rewardPrice, totalStaked, rewardPerBlock) ?? 0\n  const apr = poolApr > 0 ? `${poolApr.toFixed(2)} %` : <Oval width=\"20px\" height=\"20px\" />\n\n  return (\n    <>\n      <Cards2 src={src} bgColor={pool.UIProps.bgColor} className=\"shodow-pop\" style={{ cursor: 'pointer' }}>\n        <RLink to={`/gamefi/${`Pools`}/${pool.sousId}`}>\n          <Card2Container style={{ display: 'grid', gridTemplateColumns: '1fr 1fr' }}>\n            <TokenLogo size=\"3.5rem\" src={getImageUrlFromToken(stakingToken)} />\n            <Flex\n              style={{\n                flexFlow: 'row wrap',\n                columnGap: '0.5rem',\n                justifyContent: 'end',\n              }}\n            >\n              {isNew && (\n                <div>\n                  <Badge>\n                    <Text color=\"white\">New</Text>\n                  </Badge>\n                </div>\n              )}\n              <TokenLogo size=\"2rem\" src={getImageUrlFromToken(earningToken)} />\n              <div>\n                <Badge type={1}>\n                  <Text color=\"white\">Pool Based</Text>\n                </Badge>\n              </div>\n            </Flex>\n            <Flex style={{ alignItems: 'end' }}>\n              <div>\n                <Text color=\"white\">{`${stakingToken.symbol}-${earningToken.symbol} Staking`}</Text>\n                <Heading color=\"white\">{pool.name}</Heading>\n              </div>\n            </Flex>\n            <Flex style={{ justifyContent: 'end', alignItems: 'end' }}>\n              <div style={{ textAlign: 'end' }}>\n                <Text color=\"white\">APR {apr}</Text>\n                <Heading color=\"white\">\n                  {!isComingSoon && `${formatNumber(blocksRemaining, 0, 0)}`} {isComingSoon && '-'} blocks\n                </Heading>\n              </div>\n            </Flex>\n          </Card2Container>\n        </RLink>\n      </Cards2>\n    </>\n  )\n}\n\nexport default PoolCard2\n","import BigNumber from 'bignumber.js'\nimport { orderBy, partition } from 'lodash'\nimport React, { useState, useEffect, useCallback, useMemo, useRef } from 'react'\nimport { Route, useLocation, useRouteMatch } from 'react-router-dom'\nimport { useWeb3React } from '@web3-react/core'\nimport { Grid } from '@mui/material'\nimport { Farm, Pool } from 'state/types'\nimport {\n  useFarms,\n  usePollFarmsData,\n  usePriceCakeBusd,\n  usePools,\n  useFetchPublicPoolsData,\n  useCakeVault,\n  useFetchCakeVault,\n} from 'state/hooks'\nimport { getFarmApr, getFarmV2Apr } from 'utils/apr'\nimport { latinise } from 'utils/latinise'\nimport isArchivedPid from 'utils/farmHelpers'\nimport { Text, Flex, Heading } from '@metagg/mgg-uikit'\nimport { Toggle } from '@pancakeswap/uikit'\nimport SearchInput from 'components/SearchInput'\nimport { FarmWithStakedValue } from './config'\nimport TabButtons from './components/TabButtons'\nimport NotAvailable from './components/NotAvailable'\nimport { BodySection, FilterItem, HeaderSection, StakeSection, ToggleWrapper } from './styled'\nimport FarmCard from './components/Cards/Farm'\nimport PoolCard from './components/Cards/Pool'\n\nconst Gamefi: React.FC = () => {\n  const [query, setQuery] = useState('')\n  const { account } = useWeb3React()\n  const { path } = useRouteMatch()\n  const { pathname } = useLocation()\n  const { data: farmsLP, userDataLoaded } = useFarms()\n  const { pools: poolsWithoutAutoVault } = usePools(account)\n  const cakePrice = usePriceCakeBusd()\n  const isArchived = pathname.includes('archived')\n  const isActive = true\n  const {\n    userData: { cakeAtLastUserAction, userShares },\n    fees: { performanceFee },\n    pricePerFullShare,\n    totalCakeInVault,\n  } = useCakeVault()\n  const accountHasVaultShares = userShares && userShares.gt(0)\n  const performanceFeeAsDecimal = performanceFee && performanceFee / 100\n  usePollFarmsData(isArchived)\n  useFetchCakeVault()\n  useFetchPublicPoolsData()\n  // Users with no wallet connected should see 0 as Earned amount\n  // Connected users should see loading indicator until first userData has loaded\n  const userDataReady = !account || (!!account && userDataLoaded)\n  const [stakedOnly, setStakedOnly] = useState(!isActive)\n  useEffect(() => {\n    setStakedOnly(!isActive)\n  }, [isActive])\n  const activeFarms = farmsLP.filter((farm) => farm.pid !== 0 && !farm.hasEnded && !isArchivedPid(farm.pid))\n  const inactiveFarms = farmsLP.filter((farm) => farm.pid !== 0 && farm.hasEnded && !isArchivedPid(farm.pid))\n  const archivedFarms = farmsLP.filter((farm) => isArchivedPid(farm.pid))\n\n  const stakedOnlyFarms = activeFarms.filter(\n    (farm) => farm.userData && new BigNumber(farm.userData.stakedBalance).isGreaterThan(0),\n  )\n\n  const stakedInactiveFarms = inactiveFarms.filter(\n    (farm) => farm.userData && new BigNumber(farm.userData.stakedBalance).isGreaterThan(0),\n  )\n\n  const stakedArchivedFarms = archivedFarms.filter(\n    (farm) => farm.userData && new BigNumber(farm.userData.stakedBalance).isGreaterThan(0),\n  )\n  const handleChangeQuery = (event: React.ChangeEvent<HTMLInputElement>) => {\n    setQuery(event.target.value)\n  }\n  const loadMoreRef = useRef<HTMLDivElement>(null)\n  const farmsList = useCallback(\n    (farmsToDisplay: Farm[]): FarmWithStakedValue[] => {\n      let farmsToDisplayWithAPR: FarmWithStakedValue[] = farmsToDisplay.map((farm) => {\n        if (!farm.lpTotalInQuoteToken || !farm.quoteToken.busdPrice) {\n          return farm\n        }\n        const totalLiquidity = new BigNumber(farm.lpTotalInQuoteToken).times(farm.quoteToken.busdPrice)\n        const apr = isActive ? getFarmApr(new BigNumber(farm.poolWeight), cakePrice, totalLiquidity) : 0\n\n        return { ...farm, apr, liquidity: totalLiquidity }\n      })\n\n      if (query) {\n        const lowercaseQuery = latinise(query.toLowerCase())\n        farmsToDisplayWithAPR = farmsToDisplayWithAPR.filter((farm: FarmWithStakedValue) => {\n          return (\n            latinise(farm.lpSymbol.toLowerCase()).includes(lowercaseQuery) ||\n            latinise(farm.quoteToken.symbol.toLowerCase()).includes(lowercaseQuery)\n          )\n        })\n      }\n      return farmsToDisplayWithAPR\n    },\n    [cakePrice, query, isActive],\n  )\n\n  const pools = useMemo(() => {\n    const cakePool = poolsWithoutAutoVault.map((pool) => pool.sousId === 0)\n    const cakeAutoVault = { ...cakePool, isAutoVault: true }\n\n    return [...poolsWithoutAutoVault]\n  }, [poolsWithoutAutoVault])\n\n  const [finishedPools, openPools] = useMemo(() => partition(pools, (pool) => pool.isFinished), [pools])\n  const stakedOnlyFinishedPools = useMemo(\n    () =>\n      finishedPools.filter((pool) => {\n        if (pool.isAutoVault) {\n          return accountHasVaultShares\n        }\n        return pool.userData && new BigNumber(pool.userData.stakedBalance).isGreaterThan(0)\n      }),\n    [finishedPools, accountHasVaultShares],\n  )\n  const stakedOnlyOpenPools = useMemo(\n    () =>\n      openPools.filter((pool) => {\n        if (pool.isAutoVault) {\n          return accountHasVaultShares\n        }\n        return pool.userData && new BigNumber(pool.userData.stakedBalance).isGreaterThan(0)\n      }),\n    [openPools, accountHasVaultShares],\n  )\n\n  const stakedMemoized = useMemo(() => {\n    const stakingList = { activeFarms: [], inactiveFarms: [], activePools: [], inactivePools: [] }\n\n    if (stakedOnly) {\n      stakingList.activeFarms = farmsList(stakedOnlyFarms)\n      stakingList.inactiveFarms = farmsList(stakedInactiveFarms)\n      stakingList.activePools = stakedOnlyOpenPools\n      stakingList.inactivePools = stakedOnlyFinishedPools\n    } else {\n      stakingList.activeFarms = farmsList(activeFarms)\n      stakingList.inactiveFarms = farmsList(inactiveFarms)\n      stakingList.activePools = openPools\n      stakingList.inactivePools = finishedPools\n    }\n    return stakingList\n  }, [\n    farmsList,\n    activeFarms,\n    inactiveFarms,\n    stakedInactiveFarms,\n    stakedOnly,\n    stakedOnlyFarms,\n    finishedPools,\n    openPools,\n    stakedOnlyOpenPools,\n    stakedOnlyFinishedPools,\n  ])\n\n  const renderContent = ({ RENDER_TYPE }: { RENDER_TYPE?: string }): JSX.Element => {\n    const render = (type) => {\n      switch (type) {\n        case 'RENDER_ENDED':\n          return stakedMemoized.inactiveFarms.length !== 0 && stakedMemoized.inactivePools.length !== 0 ? (\n            <StakeSection>\n              {stakedMemoized.inactiveFarms.length !== 0 ? (\n                <Grid container spacing={4}>\n                  {stakedMemoized.inactiveFarms.map((farm) => (\n                    <Grid key={farm.pid} item md={11}>\n                      <FarmCard\n                        userDataReady={userDataReady}\n                        farm={farm}\n                        cakePrice={cakePrice}\n                        account={account}\n                        removed={false}\n                      />\n                    </Grid>\n                  ))}\n                </Grid>\n              ) : (\n                <NotAvailable title=\"Inactive Farms\" />\n              )}\n              {stakedMemoized.inactivePools.length !== 0 ? (\n                <Grid container spacing={4}>\n                  {stakedMemoized.inactivePools.map((pool) => (\n                    <Grid key={pool.sousId} item md={11}>\n                      <PoolCard\n                        userDataReady={userDataReady}\n                        pool={pool}\n                        cakePrice={cakePrice}\n                        account={account}\n                        removed={false}\n                        bgColor=\"#b10303d6\"\n                      />\n                    </Grid>\n                  ))}\n                </Grid>\n              ) : (\n                <NotAvailable title=\"Inactive Pools\" />\n              )}\n            </StakeSection>\n          ) : (\n            <NotAvailable title=\"inactive farms and pools\" />\n          )\n        default:\n          return stakedMemoized.activeFarms.length !== 0 && stakedMemoized.activePools.length !== 0 ? (\n            <StakeSection>\n              {stakedMemoized.activeFarms.length !== 0 ? (\n                <Grid container spacing={4}>\n                  {stakedMemoized.activeFarms.map((farm) => (\n                    <Grid key={farm.pid} item md={11}>\n                      <FarmCard\n                        userDataReady={userDataReady}\n                        farm={farm}\n                        cakePrice={cakePrice}\n                        account={account}\n                        removed={false}\n                      />\n                    </Grid>\n                  ))}\n                </Grid>\n              ) : (\n                <NotAvailable title=\"Active Farms\" />\n              )}\n              {stakedMemoized.activePools.length !== 0 ? (\n                <Grid container spacing={2}>\n                  {stakedMemoized.activePools.map((pool) => (\n                    <Grid key={pool.sousId} item md={11}>\n                      <PoolCard\n                        userDataReady={userDataReady}\n                        pool={pool}\n                        cakePrice={cakePrice}\n                        account={account}\n                        removed={false}\n                        bgColor=\"#b10303d6\"\n                      />\n                    </Grid>\n                  ))}\n                </Grid>\n              ) : (\n                <NotAvailable title=\"Active Pools\" />\n              )}\n            </StakeSection>\n          ) : (\n            <NotAvailable title=\"active farms and pools\" />\n          )\n      }\n    }\n\n    return (\n      <div style={{ marginTop: '25x', paddingTop: '25px' }}>\n        <div\n          style={{\n            display: 'flex',\n            flexFlow: 'row wrap',\n            justifyContent: 'space-evenly',\n            columnGap: '2rem',\n            rowGap: '2rem',\n          }}\n        >\n          {render(RENDER_TYPE)}\n        </div>\n      </div>\n    )\n  }\n\n  return (\n    <div\n      style={{\n        padding: '5rem',\n      }}\n    >\n      <HeaderSection>\n        <FilterItem>\n          <ToggleWrapper>\n            <Toggle checked={stakedOnly} onChange={() => setStakedOnly(!stakedOnly)} scale=\"sm\" />\n            <Text marginLeft=\"10px\"> Staked only</Text>\n          </ToggleWrapper>\n          {/* <TabButtons hasStakeInFinishedFarms={stakedInactiveFarms.length > 0} /> */}\n        </FilterItem>\n        <FilterItem>\n          <Text textTransform=\"uppercase\">Search</Text>\n          <SearchInput onChange={handleChangeQuery} placeholder=\"Search Farms\" />\n        </FilterItem>\n      </HeaderSection>\n      <BodySection>\n        <Heading size=\"xl\">Live Farms</Heading>\n        {renderContent({ RENDER_TYPE: '' })}\n      </BodySection>\n      <BodySection>\n        <Heading size=\"xl\">Past Farms</Heading>\n        {renderContent({ RENDER_TYPE: 'RENDER_ENDED' })}\n      </BodySection>\n    </div>\n  )\n}\n\nexport default Gamefi\n"],"sourceRoot":""}