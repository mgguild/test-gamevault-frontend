{"version":3,"sources":["hooks/useContract.ts","hooks/useWeb3.ts","components/UnlockButton.tsx","utils/callHelpers.ts","components/Balance.tsx","utils/bscscan.ts","hooks/useApprove.ts","hooks/usePreviousValue.ts","hooks/useLastUpdated.ts","hooks/chainHelpers.ts","hooks/price.ts","hooks/useTokenBalance.ts","utils/refHelpers.ts","utils/latinise.ts","hooks/useHarvest.ts","components/TokenPairImage/index.tsx","hooks/useStake.ts","hooks/useUnstake.ts","components/layout/Flex.tsx","hooks/usePersistState.ts","views/Farms/components/Divider.tsx","views/Farms/components/FarmTable/Actions/styles.ts","views/Farms/components/FarmCard/DetailsSection.tsx","components/PageHeader/PageHeader.tsx","components/ModalInput/ModalInput.tsx","utils/getLiquidityUrlPathParts.ts","views/Farms/components/FarmCard/CardHeading.tsx","components/Loading.tsx","views/Farms/components/types.ts","views/Farms/components/WithdrawModal.tsx","views/Farms/components/Styled.tsx","views/Farms/components/Modals/Styled.tsx","views/Farms/components/Modals/Stake.tsx","views/Farms/components/Modals/ClaimModal.tsx","views/Farms/components/DepositModal.tsx","views/Farms/components/FarmCard/StakeAction.tsx","views/Farms/components/FarmCard/CardActionsContainer.tsx","views/Farms/components/FarmTable/Actions/HarvestAction.tsx","views/Farms/components/FarmCard/FarmCard.tsx","views/Farms/Farms.tsx"],"names":["useInoContract","address","web3","useWeb3","useMemo","getInoContract","useIgoContract","getIgoContract","useVestingContract","getVestingContract","useERC20","getBep20Contract","useLPStakingContract","getLpStakingContract","useCake","getCakeContract","useLottery","getLotteryContract","useMasterchef","getMasterchefContract","useSousChef","id","getSouschefContract","useCakeVaultContract","getCakeVaultContract","library","useWeb3React","refEth","useRef","useState","Web3","web3NoAccount","setweb3","useEffect","current","UnlockButton","props","customTitle","useTranslation","t","useAuth","login","logout","onPresentConnectModal","useWalletModal","onClick","fullWidth","approve","lpContract","masterChefContract","account","a","methods","options","ethers","constants","MaxUint256","send","from","approveContract","tokenContract","spender","buyBox","inoContract","rarity","amount","buy","value","getDecimalAmount","buyIgo","igoContract","buyTokens","toString","claimVesting","vestingContract","claimAll","approveWithAmount","stake","pid","BigNumber","times","DEFAULT_TOKEN_DECIMAL","gas","DEFAULT_GAS_LIMIT","on","tx","transactionHash","enterStaking","deposit","sousStake","sousChefContract","decimals","BIG_TEN","pow","sousStakeBnb","unstake","leaveStaking","withdraw","exit","contract","sousUnstake","sousEmergencyUnstake","emergencyWithdraw","claim","getReward","harvest","soushHarvest","soushHarvestBnb","BIG_ZERO","parseInt","process","farms","find","farm","Balance","color","isDisabled","unit","prefix","previousValue","start","end","duration","separator","getBscScanAddressUrl","BASE_BSC_SCAN_URL","getBscScanBlockCountdownUrl","block","useApprove","contractAddress","onApprove","useCallback","useApproveGuildpad","tokenContractAddress","useSousApprove","sousId","earningTokenSymbol","requestedApproval","setRequestedApproval","useToast","toastSuccess","toastError","dispatch","useAppDispatch","handleApprove","updateUserAllowance","symbol","console","error","message","useSousApproveWithAmount","stakingAmount","useVaultApprove","setLastUpdated","cakeVaultContract","cakeContract","useCheckVaultApprovalStatus","isVaultApproved","setIsVaultApproved","useLastUpdated","lastUpdated","allowance","call","response","currentAllowance","gt","checkApprovalStatus","useLotteryApprove","lotteryContract","usePreviousValue","ref","Date","now","setStateLastUpdated","previousLastUpdated","useChainFinder","chainId","usePoolPrice","stakingTokenAddress","rewardTokenAddress","isFetchData","chainName","MoralisWeb3Api","useMoralisWeb3Api","_stakingTokenAddress","_rewardTokenAddress","stakingPrice","setStakingPrice","rewardPrice","setRewardPrice","utils","toChecksumAddress","token","getTokenPrice","chain","result","_stakingTokenPrice","usdPrice","_rewardTokenPrice","fetchData","useFarmPrice","LPPrice","setLPPrice","_token1Address","_token2Address","_lpAddress","lpTotalSupply","getBalanceNumber","totalDeposits","token1Address","token2Address","pairToken","quoteToken","lpAddress","lpAddresses","findPrice","tokenAddress","price","_token1Price","_token2Price","res","getTokenBalances","token_addresses","Promise","all","data","token_address","toLowerCase","_totalToken1InPool","balance","Number","_totalToken2InPool","FetchStatus","useTokenAllowance","allowedAddress","NOT_FETCHED","SUCCESS","FAILED","fetchStatus","balanceState","setBalanceState","fastRefresh","useRefresh","prev","fetchBalance","useTokenBalance","customAccount","MAINNET_CHAIN_ID","acct","getWeb3NoAccount","balanceOf","usePrevious","React","Latinise","latin_map","τ","Τ","latinise","input","replace","x","useClaim","stakingContract","onReward","txHash","useSousHarvest","isUsingBnb","handleHarvest","updateUserPendingReward","updateUserBalance","StyledLogo","styled","img","PairLogoImg","Flex","getImageUrlFromToken","getAddress","tokens","wbnb","iconExtension","TokenPairImage","primaryToken","secondaryToken","src","alt","useSousStake","handleStake","updateUserStakedBalance","onStake","useStake","info","useExit","onUnstake","useSousUnstake","enableEmergencyWithdraw","handleUnstake","FlexLayout","div","defaultOptions","hydrate","identity","dehydrate","usePersistState","initialValue","userOptions","localStorageKey","valueFromLS","localStorage","getItem","JSON","parse","setValue","setItem","stringify","StyledHr","theme","colors","textSubtle","primary","ModalHr","hr","ActionContainer","MGG_active","mediaQueries","sm","xl","ActionTitles","ActionContent","Earned","text","Wrapper","StyledLinkExternal","LinkExternal","DetailsSection","stakingAddress","lpInfoAddress","href","Outer","Box","background","isDark","modal","Inner","Container","PageHeader","children","StyledTokenInput","isWarning","shadows","warning","inset","StyledInput","Input","xs","ModalInput","max","onChange","onSelectMax","isBalanceZero","style","position","margin","alignItems","justifyContent","pattern","inputMode","step","min","placeholder","size","mr","mb","getLiquidityUrlPathParts","mainTokenAddress","pairTokenAddress","wBNBAddressString","getWbnbAddress","mainTokenAddressString","pairTokenAddressString","secondPart","CardHeading","Tag","lpLabel","rewardToken","multiplier","isCommunityFarm","farmImage","tokenSymbol","farmSymbol","flexDirection","textAlign","split","variant","width","height","CircularIndeterminate","sx","display","CircularProgress","ViewMode","WithdrawModal","staked","earnings","onConfirm","onDismiss","tokenName","val","setVal","pendingTx","setPendingTx","fullBalance","getFullDisplayBalance","e","currentTarget","validity","valid","title","marginTop","fontSize","bold","lpSymbol","padding","disabled","DetailsCont","ActionDiv","ModalFooter","StyledFlex","CancelButton","Button","DepositButton","Stake","addLiquidityUrl","inputTitle","lpStakingContract","valNumber","fullBalanceNumber","handleChange","fetchFarmUserDataAsync","pids","handleSelectMax","isFinite","eq","ClaimModal","DepositModal","addTokenUrl","maxStake","setActiveSelect","userData","tokenBalance","stakedBalance","userRate","calculateUserRewardRate","RewardTokenBalance","formatTokenBalance","getBalanceAmount","toFormat","formatLPTokenBalance","formatStakedTokenBalance","formatTokenEarnings","isGreaterThanOrEqualTo","isApproved","setIsApproved","lpStakingAddress","stakingAddresses","useModal","onPresentStake","onPresentWithdraw","paddingBottom","as","target","onMouseEnter","onMouseLeave","StakeAction","userDataReady","location","useLocation","useLpTokenPrice","stakedBalanceBigNumber","lt","toLocaleString","toFixed","ROUND_DOWN","onPresentDeposit","formatStakedBalance","buttonTxt","hasEnded","isGreaterThan","parseFloat","some","item","pathname","includes","renderStakingButtons","Action","CardActions","tokenBalanceAsString","stakedBalanceAsString","mt","HarvestAction","tokenRewardSymbol","earningsBigNumber","cakePrice","usePriceCakeBusd","earningsBusd","displayBalance","isZero","multipliedBy","toNumber","useContext","ThemeContext","textTransform","MGG_accent2","pr","borderRadius","ml","AccentGradient","keyframes","StyledCardAccent","primaryBright","secondary","FCard","MGG_container","isPromotedFarm","radii","card","FarmCard","expanded","removed","toLocaleLowerCase","formatTotalRewardRate","totalRewardRate","toUpperCase","earnLabel","liquidityUrlPathParts","apr","maximumFractionDigits","liquidityUrl","BASE_ADD_LIQUIDITY_URL","AddTokenUrl","BASE_SWAP_URL","isCommunity","remainingDays","CardActionsContainer","infoURL","BASE_INFO_URL","Text","InfoBox","Farms","Image","path","useRouteMatch","useFarms","farmsLP","userDataLoaded","query","CARD","sortOption","isArchived","isActive","isMobile","useMedia","maxWidth","usePollFarmsData","stakedOnly","setStakedOnly","activeFarms","filter","stakedOnlyFarms","farmsList","farmsToDisplay","farmsToDisplayWithAPR","map","lpTotalInQuoteToken","busdPrice","totalLiquidity","getFarmApr","poolWeight","liquidity","lowercaseQuery","loadMoreRef","numberOfFarmsVisible","setNumberOfFarmsVisible","observerIsSet","setObserverIsSet","farmsStakedMemoized","orderBy","slice","sortFarms","IntersectionObserver","entries","isIntersecting","farmsCurrentlyVisible","rootMargin","threshold","observe","quoteTokenAddress","originalValue","label","earned","details","setFetchData","mggFarm","isMain","prevLPPrice","prevRewardPrice","setTimeout","rewardRate","farmV2Apr","getFarmV2Apr","totalStaked","tvr","minHeight","marginLeft","flex","borderBottom","Infinity","Page","paddingTop","exact"],"mappings":"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","file":"static/js/12.2c6d1bd9.chunk.js","sourcesContent":["import { useMemo } from 'react'\nimport useWeb3 from 'hooks/useWeb3'\nimport {\n  getBep20Contract,\n  getCakeContract,\n  getBunnyFactoryContract,\n  getBunnySpecialContract,\n  getPancakeRabbitContract,\n  getProfileContract,\n  getIfoV1Contract,\n  getIfoV2Contract,\n  getLotteryContract,\n  getLotteryTicketContract,\n  getMasterchefContract,\n  getPointCenterIfoContract,\n  getSouschefContract,\n  getClaimRefundContract,\n  getTradingCompetitionContract,\n  getEasterNftContract,\n  getErc721Contract,\n  getCakeVaultContract,\n  getPredictionsContract,\n  getChainlinkOracleContract,\n  getSouschefV2Contract,\n  getLotteryV2Contract,\n  getLpStakingContract,\n  getInoContract,\n  getIgoContract,\n  getVestingContract,\n} from 'utils/contractHelpers'\n\n/**\n * Helper hooks to get specific contracts (by ABI)\n */\n\nexport const useInoContract = (address: string) => {\n  const web3 = useWeb3()\n  return useMemo(() => getInoContract(address, web3), [address, web3])\n}\n\nexport const useIgoContract = (address: string) => {\n  const web3 = useWeb3()\n  return useMemo(() => getIgoContract(address, web3), [address, web3])\n}\n\nexport const useVestingContract = (address: string) => {\n  const web3 = useWeb3()\n  return useMemo(() => getVestingContract(address, web3), [address, web3])\n}\n\nexport const useIfoV1Contract = (address: string) => {\n  const web3 = useWeb3()\n  return useMemo(() => getIfoV1Contract(address, web3), [address, web3])\n}\n\nexport const useIfoV2Contract = (address: string) => {\n  const web3 = useWeb3()\n  return useMemo(() => getIfoV2Contract(address, web3), [address, web3])\n}\n\nexport const useERC20 = (address: string) => {\n  const web3 = useWeb3()\n  return useMemo(() => getBep20Contract(address, web3), [address, web3])\n}\n\nexport const useLPStakingContract = (address: string) => {\n  const web3 = useWeb3()\n  return useMemo(() => getLpStakingContract(address, web3), [address, web3])\n}\n\n/**\n * @see https://docs.openzeppelin.com/contracts/3.x/api/token/erc721\n */\nexport const useERC721 = (address: string) => {\n  const web3 = useWeb3()\n  return useMemo(() => getErc721Contract(address, web3), [address, web3])\n}\n\nexport const useCake = () => {\n  const web3 = useWeb3()\n  return useMemo(() => getCakeContract(web3), [web3])\n}\n\nexport const useBunnyFactory = () => {\n  const web3 = useWeb3()\n  return useMemo(() => getBunnyFactoryContract(web3), [web3])\n}\n\nexport const usePancakeRabbits = () => {\n  const web3 = useWeb3()\n  return useMemo(() => getPancakeRabbitContract(web3), [web3])\n}\n\nexport const useProfile = () => {\n  const web3 = useWeb3()\n  return useMemo(() => getProfileContract(web3), [web3])\n}\n\nexport const useLottery = () => {\n  const web3 = useWeb3()\n  return useMemo(() => getLotteryContract(web3), [web3])\n}\n\nexport const useLotteryTicket = () => {\n  const web3 = useWeb3()\n  return useMemo(() => getLotteryTicketContract(web3), [web3])\n}\n\nexport const useLotteryV2Contract = () => {\n  const web3 = useWeb3()\n  return useMemo(() => getLotteryV2Contract(web3), [web3])\n}\n\nexport const useMasterchef = () => {\n  const web3 = useWeb3()\n  return useMemo(() => getMasterchefContract(web3), [web3])\n}\n\nexport const useSousChef = (id) => {\n  const web3 = useWeb3()\n  return useMemo(() => getSouschefContract(id, web3), [id, web3])\n}\n\nexport const useSousChefV2 = (id) => {\n  const web3 = useWeb3()\n  return useMemo(() => getSouschefV2Contract(id, web3), [id, web3])\n}\n\nexport const usePointCenterIfoContract = () => {\n  const web3 = useWeb3()\n  return useMemo(() => getPointCenterIfoContract(web3), [web3])\n}\n\nexport const useBunnySpecialContract = () => {\n  const web3 = useWeb3()\n  return useMemo(() => getBunnySpecialContract(web3), [web3])\n}\n\nexport const useClaimRefundContract = () => {\n  const web3 = useWeb3()\n  return useMemo(() => getClaimRefundContract(web3), [web3])\n}\n\nexport const useTradingCompetitionContract = () => {\n  const web3 = useWeb3()\n  return useMemo(() => getTradingCompetitionContract(web3), [web3])\n}\n\nexport const useEasterNftContract = () => {\n  const web3 = useWeb3()\n  return useMemo(() => getEasterNftContract(web3), [web3])\n}\n\nexport const useCakeVaultContract = () => {\n  const web3 = useWeb3()\n  return useMemo(() => getCakeVaultContract(web3), [web3])\n}\n\nexport const usePredictionsContract = () => {\n  const web3 = useWeb3()\n  return useMemo(() => getPredictionsContract(web3), [web3])\n}\n\nexport const useChainlinkOracleContract = () => {\n  const web3 = useWeb3()\n  return useMemo(() => getChainlinkOracleContract(web3), [web3])\n}\n","import { useEffect, useState, useRef } from 'react'\nimport Web3 from 'web3'\nimport { useWeb3React } from '@web3-react/core'\nimport web3NoAccount from 'utils/web3'\n\n/**\n * Provides a web3 instance using the provider provided by useWallet\n * with a fallback of an httpProver\n * Recreate web3 instance only if the provider change\n */\nconst useWeb3 = () => {\n  const { library } = useWeb3React()\n  const refEth = useRef(library)\n  const [web3, setweb3] = useState(library ? new Web3(library) : web3NoAccount)\n\n  useEffect(() => {\n    if (library !== refEth.current) {\n      setweb3(library ? new Web3(library) : web3NoAccount)\n      refEth.current = library\n    }\n  }, [library])\n\n  return web3\n}\n\nexport default useWeb3\n","import React from 'react'\nimport { Button, useWalletModal } from '@metagg/mgg-uikit'\nimport useAuth from 'hooks/useAuth'\nimport { useTranslation } from 'contexts/Localization'\n\nconst UnlockButton = (props) => {\n  const { customTitle } = props\n  const { t } = useTranslation()\n  const { login, logout } = useAuth()\n  const { onPresentConnectModal } = useWalletModal(login, logout)\n\n  return (\n    <Button onClick={onPresentConnectModal} {...props} fullWidth>\n      {!customTitle ? 'Connect Wallet' : customTitle}\n    </Button>\n  )\n}\n\nexport default UnlockButton\n","import BigNumber from 'bignumber.js'\nimport { DEFAULT_GAS_LIMIT, DEFAULT_TOKEN_DECIMAL } from 'config'\nimport { ethers } from 'ethers'\nimport { Pair, Token, TokenAmount } from '@pancakeswap-libs/sdk'\nimport { Contract } from 'web3-eth-contract'\nimport { getLpContract, getLpStakingContract, getMasterchefContract } from 'utils/contractHelpers'\nimport farms from 'config/constants/farms'\nimport { getAddress, getCakeAddress } from 'utils/addressHelpers'\nimport tokens from 'config/constants/tokens'\nimport { web3WithArchivedNodeProvider } from './web3'\nimport { getBalanceAmount, getDecimalAmount } from './formatBalance'\nimport { BIG_TEN, BIG_ZERO } from './bigNumber'\nimport { useERC20 } from '../hooks/useContract'\n\nexport const approve = async (lpContract, masterChefContract, account) => {\n  return lpContract.methods\n    .approve(masterChefContract.options.address, ethers.constants.MaxUint256)\n    .send({ from: account })\n}\n\nexport const approveContract = async (tokenContract: Contract, spender: string, account) => {\n  return tokenContract.methods.approve(spender, ethers.constants.MaxUint256).send({ from: account })\n}\n\nexport const buyBox = async (inoContract, rarity, account, amount) => {\n  return inoContract.methods.buy(rarity).send({ from: account, value: getDecimalAmount(amount) })\n}\n\nexport const buyIgo = async (igoContract, account, amount) => {\n  return igoContract.methods.buyTokens(getDecimalAmount(amount).toString()).send({ from: account })\n}\n\nexport const claimVesting = async (vestingContract, account) => {\n  return vestingContract.methods.claimAll().send({ from: account })\n}\n\nexport const approveWithAmount = async (lpContract, masterChefContract, account, amount) => {\n  return lpContract.methods.approve(masterChefContract.options.address, amount).send({ from: account })\n}\n\nexport const stake = async (masterChefContract, pid, amount, account, useV2 = false) => {\n  if (useV2) {\n    return masterChefContract.methods\n      .stake(new BigNumber(amount).times(DEFAULT_TOKEN_DECIMAL).toString())\n      .send({ from: account, gas: DEFAULT_GAS_LIMIT })\n      .on('transactionHash', (tx) => {\n        return tx.transactionHash\n      })\n  }\n  if (pid === 0) {\n    return masterChefContract.methods\n      .enterStaking(new BigNumber(amount).times(DEFAULT_TOKEN_DECIMAL).toString())\n      .send({ from: account, gas: DEFAULT_GAS_LIMIT })\n      .on('transactionHash', (tx) => {\n        return tx.transactionHash\n      })\n  }\n\n  return masterChefContract.methods\n    .deposit(pid, new BigNumber(amount).times(DEFAULT_TOKEN_DECIMAL).toString())\n    .send({ from: account, gas: DEFAULT_GAS_LIMIT })\n    .on('transactionHash', (tx) => {\n      return tx.transactionHash\n    })\n}\n\nexport const sousStake = async (sousChefContract, amount, decimals = 18, account) => {\n  return sousChefContract.methods\n    .deposit(new BigNumber(amount).times(BIG_TEN.pow(decimals)).toString())\n    .send({ from: account, gas: DEFAULT_GAS_LIMIT })\n    .on('transactionHash', (tx) => {\n      return tx.transactionHash\n    })\n}\n\nexport const sousStakeBnb = async (sousChefContract, amount, account) => {\n  return sousChefContract.methods\n    .deposit()\n    .send({\n      from: account,\n      gas: DEFAULT_GAS_LIMIT,\n      value: new BigNumber(amount).times(DEFAULT_TOKEN_DECIMAL).toString(),\n    })\n    .on('transactionHash', (tx) => {\n      return tx.transactionHash\n    })\n}\n\nexport const unstake = async (masterChefContract, pid, amount, account) => {\n  if (pid === 0) {\n    return masterChefContract.methods\n      .leaveStaking(new BigNumber(amount).times(DEFAULT_TOKEN_DECIMAL).toString())\n      .send({ from: account, gas: DEFAULT_GAS_LIMIT })\n      .on('transactionHash', (tx) => {\n        return tx.transactionHash\n      })\n  }\n\n  return masterChefContract.methods\n    .withdraw(pid, new BigNumber(amount).times(DEFAULT_TOKEN_DECIMAL).toString())\n    .send({ from: account, gas: DEFAULT_GAS_LIMIT })\n    .on('transactionHash', (tx) => {\n      return tx.transactionHash\n    })\n}\n\nexport const exit = async (contract: Contract, account) => {\n  return contract.methods\n    .exit()\n    .send({ from: account, gas: DEFAULT_GAS_LIMIT })\n    .on('transactionHash', (tx) => {\n      return tx.transactionHash\n    })\n}\n\nexport const sousUnstake = async (sousChefContract, amount, decimals, account) => {\n  return sousChefContract.methods\n    .withdraw(new BigNumber(amount).times(BIG_TEN.pow(decimals)).toString())\n    .send({ from: account, gas: DEFAULT_GAS_LIMIT })\n    .on('transactionHash', (tx) => {\n      return tx.transactionHash\n    })\n}\n\nexport const sousEmergencyUnstake = async (sousChefContract, account) => {\n  return sousChefContract.methods\n    .emergencyWithdraw()\n    .send({ from: account })\n    .on('transactionHash', (tx) => {\n      return tx.transactionHash\n    })\n}\n\nexport const claim = async (contract, account) => {\n  return contract.methods\n    .getReward()\n    .send({ from: account, gas: DEFAULT_GAS_LIMIT })\n    .on('transactionHash', (tx) => {\n      return tx.transactionHash\n    })\n}\n\nexport const harvest = async (masterChefContract, pid, account) => {\n  if (pid === 0) {\n    return masterChefContract.methods\n      .leaveStaking('0')\n      .send({ from: account, gas: DEFAULT_GAS_LIMIT })\n      .on('transactionHash', (tx) => {\n        return tx.transactionHash\n      })\n  }\n\n  return masterChefContract.methods\n    .deposit(pid, '0')\n    .send({ from: account, gas: DEFAULT_GAS_LIMIT })\n    .on('transactionHash', (tx) => {\n      return tx.transactionHash\n    })\n}\n\nexport const soushHarvest = async (sousChefContract, account) => {\n  return sousChefContract.methods\n    .deposit('0')\n    .send({ from: account, gas: DEFAULT_GAS_LIMIT })\n    .on('transactionHash', (tx) => {\n      return tx.transactionHash\n    })\n}\n\nexport const soushHarvestBnb = async (sousChefContract, account) => {\n  return sousChefContract.methods\n    .deposit()\n    .send({ from: account, gas: DEFAULT_GAS_LIMIT, value: BIG_ZERO })\n    .on('transactionHash', (tx) => {\n      return tx.transactionHash\n    })\n}\n\nconst chainId = parseInt(process.env.REACT_APP_CHAIN_ID, 10)\nconst cakeBnbPid = 251\nconst cakeBnbFarm = farms.find((farm) => farm.pid === cakeBnbPid)\n\n// const CAKE_TOKEN = new Token(chainId, getCakeAddress(), 18)\n// const WBNB_TOKEN = new Token(chainId, tokens.wbnb.address[chainId], 18)\n// const CAKE_BNB_TOKEN = new Token(chainId, getAddress(cakeBnbFarm.lpAddresses), 18)\n//\n// /**\n//  * Returns the total CAKE staked in the CAKE-BNB LP\n//  */\n// export const getUserStakeInCakeBnbLp = async (account: string, block?: number) => {\n//   try {\n//     const masterContract = getMasterchefContract(web3WithArchivedNodeProvider)\n//     const cakeBnbContract = getLpContract(getAddress(cakeBnbFarm.lpAddresses), web3WithArchivedNodeProvider)\n//     const totalSupplyLP = await cakeBnbContract.methods.totalSupply().call(undefined, block)\n//     const reservesLP = await cakeBnbContract.methods.getReserves().call(undefined, block)\n//     const cakeBnbBalance = await masterContract.methods.userInfo(cakeBnbPid, account).call(undefined, block)\n//\n//     const pair: Pair = new Pair(\n//       new TokenAmount(CAKE_TOKEN, reservesLP._reserve0.toString()),\n//       new TokenAmount(WBNB_TOKEN, reservesLP._reserve1.toString()),\n//     )\n//     const cakeLPBalance = pair.getLiquidityValue(\n//       pair.token0,\n//       new TokenAmount(CAKE_BNB_TOKEN, totalSupplyLP.toString()),\n//       new TokenAmount(CAKE_BNB_TOKEN, cakeBnbBalance.amount.toString()),\n//       false,\n//     )\n//\n//     return new BigNumber(cakeLPBalance.toSignificant(18))\n//   } catch (error) {\n//     console.error(`CAKE-BNB LP error: ${error}`)\n//     return BIG_ZERO\n//   }\n// }\n\nexport const getLPStakingDetails = async (stakingAddresses, account: string) => {\n  try {\n    const contract = getLpStakingContract(getAddress(stakingAddresses))\n\n    return {\n      stakedTokens: await contract.methods.balanceOf(account).call(),\n      totalDeposits: await contract.methods.totalSupply().call(),\n      rewardRate: await contract.methods.rewardRate().call(),\n    }\n  } catch (error) {\n    console.error(`LP Staking error: ${error}`)\n    return {\n      totalDeposits: '-',\n    }\n  }\n}\n\n/**\n * Gets the cake staked in the main pool\n */\nexport const getUserStakeInCakePool = async (account: string, block?: number) => {\n  try {\n    const masterContract = getMasterchefContract(web3WithArchivedNodeProvider)\n    const response = await masterContract.methods.userInfo(0, account).call(undefined, block)\n\n    return getBalanceAmount(new BigNumber(response.amount))\n  } catch (error) {\n    console.error('Error getting stake in CAKE pool', error)\n    return BIG_ZERO\n  }\n}\n","import React, { useEffect, useRef } from 'react'\nimport CountUp from 'react-countup'\nimport { Text, TextProps } from '@pancakeswap/uikit'\n\ninterface BalanceProps extends TextProps {\n  value: number\n  decimals?: number\n  unit?: string\n  isDisabled?: boolean\n  prefix?: string\n  onClick?: (event: React.MouseEvent<HTMLElement>) => void\n}\n\nconst Balance: React.FC<BalanceProps> = ({\n  value,\n  color = 'text',\n  decimals = 3,\n  isDisabled = false,\n  unit,\n  prefix,\n  onClick,\n  ...props\n}) => {\n  const previousValue = useRef(0)\n\n  useEffect(() => {\n    previousValue.current = value\n  }, [value])\n  return (\n    <Text color={isDisabled ? 'textDisabled' : color} onClick={onClick} {...props}>\n      {prefix && <span>{prefix}</span>}\n      <CountUp start={previousValue.current} end={value} decimals={decimals} duration={1} separator=\",\" />\n      {unit && <span>{unit}</span>}\n    </Text>\n  )\n}\n\nexport default Balance\n","import { BASE_BSC_SCAN_URL } from 'config'\n\nexport const getExplorerAddressUrl = (address: string) => {\n  return `${BASE_BSC_SCAN_URL}/address/${address}`\n}\n\nexport const getExplorerTransactionUrl = (address: string) => {\n  return `${BASE_BSC_SCAN_URL}/address/${address}`\n}\n\nexport const getBscScanAddressUrl = (address: string) => {\n  return `${BASE_BSC_SCAN_URL}/address/${address}`\n}\n\nexport const getBscScanTransactionUrl = (transactionHash: string) => {\n  return `${BASE_BSC_SCAN_URL}/tx/${transactionHash}`\n}\n\nexport const getBscScanBlockNumberUrl = (block: string | number) => {\n  return `${BASE_BSC_SCAN_URL}/block/${block}`\n}\n\nexport const getBscScanBlockCountdownUrl = (block: string | number) => {\n  return `${BASE_BSC_SCAN_URL}/block/countdown/${block}`\n}\n","import { useCallback, useEffect, useState } from 'react'\nimport { useWeb3React } from '@web3-react/core'\nimport { Contract } from 'web3-eth-contract'\nimport { ethers } from 'ethers'\nimport BigNumber from 'bignumber.js'\nimport { useAppDispatch } from 'state'\nimport { updateUserAllowance } from 'state/actions'\nimport { approve, approveContract, approveWithAmount } from 'utils/callHelpers'\nimport { useTranslation } from 'contexts/Localization'\nimport { useCake, useCakeVaultContract, useERC20, useLottery, useSousChef } from './useContract'\nimport useToast from './useToast'\nimport useLastUpdated from './useLastUpdated'\n\n// Approve a Farm\nexport const useApprove = (lpContract: Contract, contractAddress: Contract) => {\n  const { account } = useWeb3React()\n  const handleApprove = useCallback(async () => {\n    try {\n      return await approve(lpContract, contractAddress, account)\n    } catch (e) {\n      return false\n    }\n  }, [account, lpContract, contractAddress])\n\n  return { onApprove: handleApprove }\n}\n\n// Approve a Guildpad\nexport const useApproveGuildpad = (tokenContractAddress: string, contractAddress: string) => {\n  const { account } = useWeb3React()\n  const tokenContract = useERC20(tokenContractAddress)\n  const handleApprove = useCallback(async () => {\n    try {\n      return await approveContract(tokenContract, contractAddress, account)\n    } catch (e) {\n      return false\n    }\n  }, [account, tokenContract, contractAddress])\n\n  return { onApprove: handleApprove }\n}\n\n// Approve a Pool\nexport const useSousApprove = (lpContract: Contract, sousId, earningTokenSymbol) => {\n  const [requestedApproval, setRequestedApproval] = useState(false)\n  const { toastSuccess, toastError } = useToast()\n  const { t } = useTranslation()\n  const dispatch = useAppDispatch()\n  const { account } = useWeb3React()\n  const sousChefContract = useSousChef(sousId)\n\n  const handleApprove = useCallback(async () => {\n    try {\n      setRequestedApproval(true)\n      const tx = await approve(lpContract, sousChefContract, account)\n      dispatch(updateUserAllowance(sousId, account))\n      if (tx) {\n        toastSuccess(\n          t('Contract Enabled'),\n          t('You can now stake in the %symbol% pool!', { symbol: earningTokenSymbol }),\n        )\n        setRequestedApproval(false)\n      } else {\n        // user rejected tx or didn't go thru\n        toastError(t('Error'), t('Please try again. Confirm the transaction and make sure you are paying enough gas!'))\n        setRequestedApproval(false)\n      }\n    } catch (e) {\n      console.error(e)\n      toastError(t('Error'), e?.message)\n      setRequestedApproval(false)\n    }\n  }, [account, dispatch, lpContract, sousChefContract, sousId, earningTokenSymbol, t, toastError, toastSuccess])\n\n  return { handleApprove, requestedApproval }\n}\n\nexport const useSousApproveWithAmount = (lpContract: Contract, sousId, earningTokenSymbol, stakingAmount) => {\n  const [requestedApproval, setRequestedApproval] = useState(false)\n  const { toastSuccess, toastError } = useToast()\n  const { t } = useTranslation()\n  const dispatch = useAppDispatch()\n  const { account } = useWeb3React()\n  const sousChefContract = useSousChef(sousId)\n\n  const handleApprove = useCallback(async () => {\n    try {\n      setRequestedApproval(true)\n      const tx = await approveWithAmount(lpContract, sousChefContract, account, stakingAmount.toString())\n      dispatch(updateUserAllowance(sousId, account))\n      if (tx) {\n        toastSuccess(\n          t('Contract Enabled'),\n          t('You can now stake in the %symbol% pool!', { symbol: earningTokenSymbol }),\n        )\n        setRequestedApproval(false)\n      } else {\n        // user rejected tx or didn't go thru\n        toastError(t('Error'), t('Please try again. Confirm the transaction and make sure you are paying enough gas!'))\n        setRequestedApproval(false)\n      }\n    } catch (e) {\n      console.error(e)\n      toastError(t('Error'), e?.message)\n      setRequestedApproval(false)\n    }\n  }, [\n    account,\n    dispatch,\n    lpContract,\n    sousChefContract,\n    sousId,\n    earningTokenSymbol,\n    stakingAmount,\n    t,\n    toastError,\n    toastSuccess,\n  ])\n\n  return { handleApprove, requestedApproval }\n}\n\n// Approve CAKE auto pool\nexport const useVaultApprove = (setLastUpdated: () => void) => {\n  const { account } = useWeb3React()\n  const [requestedApproval, setRequestedApproval] = useState(false)\n  const { t } = useTranslation()\n  const { toastSuccess, toastError } = useToast()\n  const cakeVaultContract = useCakeVaultContract()\n  const cakeContract = useCake()\n\n  const handleApprove = () => {\n    cakeContract.methods\n      .approve(cakeVaultContract.options.address, ethers.constants.MaxUint256)\n      .send({ from: account })\n      .on('sending', () => {\n        setRequestedApproval(true)\n      })\n      .on('receipt', () => {\n        toastSuccess(t('Contract Enabled'), t('You can now stake in the %symbol% vault!', { symbol: 'CAKE' }))\n        setLastUpdated()\n        setRequestedApproval(false)\n      })\n      .on('error', (error) => {\n        console.error(error)\n        toastError(t('Error'), t('Please try again. Confirm the transaction and make sure you are paying enough gas!'))\n        setRequestedApproval(false)\n      })\n  }\n\n  return { handleApprove, requestedApproval }\n}\n\nexport const useCheckVaultApprovalStatus = () => {\n  const [isVaultApproved, setIsVaultApproved] = useState(false)\n  const { account } = useWeb3React()\n  const cakeContract = useCake()\n  const cakeVaultContract = useCakeVaultContract()\n  const { lastUpdated, setLastUpdated } = useLastUpdated()\n  useEffect(() => {\n    const checkApprovalStatus = async () => {\n      try {\n        const response = await cakeContract.methods.allowance(account, cakeVaultContract.options.address).call()\n        const currentAllowance = new BigNumber(response)\n        setIsVaultApproved(currentAllowance.gt(0))\n      } catch (error) {\n        setIsVaultApproved(false)\n      }\n    }\n\n    checkApprovalStatus()\n  }, [account, cakeContract, cakeVaultContract, lastUpdated])\n\n  return { isVaultApproved, setLastUpdated }\n}\n\n// Approve the lottery\nexport const useLotteryApprove = () => {\n  const { account } = useWeb3React()\n  const cakeContract = useCake()\n  const lotteryContract = useLottery()\n\n  const handleApprove = useCallback(async () => {\n    try {\n      return await approve(cakeContract, lotteryContract, account)\n    } catch (e) {\n      return false\n    }\n  }, [account, cakeContract, lotteryContract])\n\n  return { onApprove: handleApprove }\n}\n\n// Approve an IFO\nexport const useIfoApprove = (tokenContract: Contract, spenderAddress: string) => {\n  const { account } = useWeb3React()\n  const onApprove = useCallback(async () => {\n    const tx = await tokenContract.methods.approve(spenderAddress, ethers.constants.MaxUint256).send({ from: account })\n    return tx\n  }, [account, spenderAddress, tokenContract])\n\n  return onApprove\n}\n","import { useEffect, useRef } from 'react'\n\n/**\n * Returns the previous value of the given value\n *\n * @see https://reactjs.org/docs/hooks-faq.html#how-to-get-the-previous-props-or-state\n */\nconst usePreviousValue = (value: any) => {\n  const ref = useRef()\n\n  useEffect(() => {\n    ref.current = value\n  })\n\n  return ref.current\n}\n\nexport default usePreviousValue\n","import { useCallback, useState } from 'react'\nimport usePreviousValue from './usePreviousValue'\n\n/**\n * A helper hook to keep track of the time between events\n * Can also be used to force an effect to re-run\n */\nconst useLastUpdated = () => {\n  const [lastUpdated, setStateLastUpdated] = useState(Date.now())\n  const previousLastUpdated = usePreviousValue(lastUpdated)\n\n  const setLastUpdated = useCallback(() => {\n    setStateLastUpdated(Date.now())\n  }, [setStateLastUpdated])\n\n  return { lastUpdated, previousLastUpdated, setLastUpdated }\n}\n\nexport default useLastUpdated\n","const useChainFinder = (chainId: number) => {\n  switch (chainId) {\n    case 1:\n      return 'eth'\n    case 3:\n      return 'ropsten'\n    case 56:\n      return 'bsc'\n    case 97:\n      return 'bsc testnet'\n    default:\n      return 'bsc'\n  }\n}\n\nexport default useChainFinder\n","import { useEffect, useState } from 'react'\nimport { SPARKSWAP_API, API_ASSETS, API_SUMMARY, API_LIQUIDITY, API_LASTPRICE, API_DATA } from 'config'\nimport useWeb3 from 'hooks/useWeb3'\nimport BigNumber from 'bignumber.js/bignumber'\nimport { getBalanceNumber } from 'utils/formatBalance'\nimport { useMoralisWeb3Api } from 'react-moralis'\nimport { useWeb3React } from '@web3-react/core'\nimport useChainFinder from './chainHelpers'\n\nexport const useTokenPrice = (tokenAddress: string) => {\n  const MoralisWeb3Api = useMoralisWeb3Api()\n  const { chainId } = useWeb3React()\n\n  const chainName = useChainFinder(chainId)\n\n  const [tokenPrice, setTokenPrice] = useState(0)\n  const web3 = useWeb3()\n\n  let _tokenAddress\n  try {\n    if (tokenAddress === undefined) throw new Error('Token address undefined')\n    _tokenAddress = web3.utils.toChecksumAddress(tokenAddress)\n  } catch {\n    console.error('Invalid staking and reward address')\n  }\n\n  useEffect(() => {\n    const fetchData = async () => {\n      try {\n        const result = await MoralisWeb3Api.token.getTokenPrice({ chain: chainName, address: _tokenAddress })\n        const _tokenPrice = result.usdPrice\n\n        setTokenPrice(_tokenPrice)\n      } catch (error) {\n        console.error('Unable to fetch data:', error)\n      }\n    }\n\n    fetchData()\n  }, [setTokenPrice, _tokenAddress, MoralisWeb3Api, chainName])\n\n  return { tokenPrice }\n}\n\nexport const usePoolPrice = (stakingTokenAddress: string, rewardTokenAddress: string, isFetchData?: boolean) => {\n  const MoralisWeb3Api = useMoralisWeb3Api()\n  const { chainId } = useWeb3React()\n  let chainName: 'eth' | 'ropsten' | 'bsc' | 'bsc testnet' = 'eth'\n  chainName = useChainFinder(chainId)\n  const [stakingPrice, setStakingPrice] = useState(0)\n  const [rewardPrice, setRewardPrice] = useState(0)\n\n  const web3 = useWeb3()\n  let _stakingTokenAddress\n  let _rewardTokenAddress\n  try {\n    _stakingTokenAddress = web3.utils.toChecksumAddress(stakingTokenAddress)\n    _rewardTokenAddress = web3.utils.toChecksumAddress(rewardTokenAddress)\n  } catch {\n    console.error('Invalid staking and reward address')\n  }\n\n  useEffect(() => {\n    const fetchData = async () => {\n      try {\n        let result\n        result = await MoralisWeb3Api.token.getTokenPrice({ chain: chainName, address: _stakingTokenAddress })\n        const _stakingTokenPrice = result.usdPrice\n\n        result = await MoralisWeb3Api.token.getTokenPrice({ chain: chainName, address: _rewardTokenAddress })\n        const _rewardTokenPrice = result.usdPrice\n\n        setStakingPrice(_stakingTokenPrice)\n        setRewardPrice(_rewardTokenPrice)\n      } catch (error) {\n        console.error('Unable to fetch data:', error)\n      }\n    }\n    if (isFetchData) {\n      fetchData()\n    }\n  }, [\n    setStakingPrice,\n    setRewardPrice,\n    _stakingTokenAddress,\n    _rewardTokenAddress,\n    MoralisWeb3Api,\n    chainName,\n    isFetchData,\n  ])\n\n  return { stakingPrice, rewardPrice }\n}\n\nexport const useFarmPrice = (farm: any, chain: any, isFetchData?: boolean) => {\n  const MoralisWeb3Api = useMoralisWeb3Api()\n  let chainName: 'eth' | 'ropsten' | 'bsc' | 'bsc testnet' = 'eth'\n  chainName = useChainFinder(chain)\n  const [LPPrice, setLPPrice] = useState(0)\n  const [rewardPrice, setRewardPrice] = useState(0)\n  const web3 = useWeb3()\n\n  useEffect(() => {\n    if (!farm) {\n      return\n    }\n    const lpTotalSupply = getBalanceNumber(new BigNumber(farm.totalDeposits ?? 0))\n    const token1Address = farm.token.address[chain]\n    const token2Address = farm.pairToken.address[chain]\n    const rewardTokenAddress = farm.quoteToken.address[chain]\n    const lpAddress = farm.lpAddresses[chain]\n\n    let _token1Address\n    let _token2Address\n    let _rewardTokenAddress\n    let _lpAddress\n    try {\n      _token1Address = web3.utils.toChecksumAddress(token1Address)\n      _token2Address = web3.utils.toChecksumAddress(token2Address)\n      _rewardTokenAddress = web3.utils.toChecksumAddress(rewardTokenAddress)\n      _lpAddress = web3.utils.toChecksumAddress(lpAddress)\n    } catch {\n      console.error('Invalid staking and reward address')\n    }\n\n    const findPrice = async (tokenAddress: string) => {\n      const result = await MoralisWeb3Api.token.getTokenPrice({ chain: chainName, address: tokenAddress })\n      const price = result.usdPrice\n      return price\n    }\n\n    const fetchData = async () => {\n      try {\n        let _totalToken1InPool\n        let _totalToken2InPool\n        // result = await MoralisWeb3Api.token.getTokenPrice({chain: chainName, address: _token1Address})\n        // result = await MoralisWeb3Api.token.getTokenPrice({chain: chainName, address: _token2Address})\n        // result = await MoralisWeb3Api.token.getTokenPrice({chain: chainName, address: _rewardTokenAddress})\n        const _token1Price = findPrice(_token1Address)\n        const _token2Price = findPrice(_token2Address)\n        const _rewardTokenPrice = findPrice(_rewardTokenAddress)\n        const res = MoralisWeb3Api.account.getTokenBalances({\n          chain: chainName,\n          address: _lpAddress,\n          token_addresses: [_token1Address, _token2Address],\n        })\n        const data = await Promise.all([_token1Price, _token2Price, _rewardTokenPrice, res])\n        const result = data[3]\n        if (result[0].token_address.toLowerCase() === _token1Address.toLowerCase()) {\n          _totalToken1InPool = getBalanceNumber(new BigNumber(result[0].balance), Number(result[0].decimals))\n        } else {\n          _totalToken2InPool = getBalanceNumber(new BigNumber(result[0].balance), Number(result[0].decimals))\n        }\n\n        if (result[1].token_address.toLowerCase() === _token1Address.toLowerCase()) {\n          _totalToken1InPool = getBalanceNumber(new BigNumber(result[1].balance), Number(result[1].decimals))\n        } else {\n          _totalToken2InPool = getBalanceNumber(new BigNumber(result[1].balance), Number(result[1].decimals))\n        }\n\n        setLPPrice((_totalToken1InPool * data[0] + _totalToken2InPool * data[1]) / lpTotalSupply)\n        setRewardPrice(data[2])\n      } catch (error) {\n        console.error('Unable to fetch data:', error)\n      }\n    }\n    if (isFetchData) {\n      fetchData()\n    }\n  }, [web3.utils, farm, chain, isFetchData, setLPPrice, setRewardPrice, chainName, MoralisWeb3Api])\n\n  if (!farm) {\n    return { LPPrice: 0, rewardPrice: 0 }\n  }\n\n  return { LPPrice, rewardPrice }\n}\n\nexport default usePoolPrice\n","import { useEffect, useState } from 'react'\nimport BigNumber from 'bignumber.js'\nimport { useWeb3React } from '@web3-react/core'\nimport { getBep20Contract, getCakeContract } from 'utils/contractHelpers'\nimport { BIG_ZERO } from 'utils/bigNumber'\nimport useWeb3 from './useWeb3'\nimport useRefresh from './useRefresh'\nimport useLastUpdated from './useLastUpdated'\nimport { MAINNET_CHAIN_ID } from '../config'\nimport { getWeb3NoAccount } from '../utils/web3'\n\ntype UseTokenBalanceState = {\n  balance: BigNumber\n  fetchStatus: FetchStatus\n}\n\nexport enum FetchStatus {\n  NOT_FETCHED = 'not-fetched',\n  SUCCESS = 'success',\n  FAILED = 'failed',\n}\n\nconst useTokenBalance = (tokenAddress: string, customAccount = '0x0000') => {\n  const { NOT_FETCHED, SUCCESS, FAILED } = FetchStatus\n  const [balanceState, setBalanceState] = useState<UseTokenBalanceState>({\n    balance: BIG_ZERO,\n    fetchStatus: NOT_FETCHED,\n  })\n  const { account, chainId } = useWeb3React()\n  const chain = chainId ? chainId.toString() : MAINNET_CHAIN_ID\n  let acct = account\n  const { fastRefresh } = useRefresh()\n  if (customAccount !== '0x0000') {\n    acct = customAccount\n  }\n  useEffect(() => {\n    const fetchBalance = async () => {\n      const contract = getBep20Contract(tokenAddress, getWeb3NoAccount(chain))\n      try {\n        const res = await contract.methods.balanceOf(acct).call()\n        setBalanceState({ balance: new BigNumber(res), fetchStatus: SUCCESS })\n      } catch (e) {\n        console.error(e)\n        setBalanceState((prev) => ({\n          ...prev,\n          fetchStatus: FAILED,\n        }))\n      }\n    }\n\n    if (acct) {\n      fetchBalance()\n    }\n  }, [acct, chain, tokenAddress, fastRefresh, SUCCESS, FAILED])\n\n  return balanceState\n}\n\nexport const useTokenAllowance = (tokenAddress: string, allowedAddress: string) => {\n  const { NOT_FETCHED, SUCCESS, FAILED } = FetchStatus\n  const [balanceState, setBalanceState] = useState<UseTokenBalanceState>({\n    balance: BIG_ZERO,\n    fetchStatus: NOT_FETCHED,\n  })\n  const { account } = useWeb3React()\n  const { fastRefresh } = useRefresh()\n\n  useEffect(() => {\n    const fetchBalance = async () => {\n      const contract = getBep20Contract(tokenAddress)\n      try {\n        const res = await contract.methods.allowance(account, allowedAddress).call()\n        setBalanceState({ balance: new BigNumber(res), fetchStatus: SUCCESS })\n      } catch (e) {\n        console.error(e)\n        setBalanceState((prev) => ({\n          ...prev,\n          fetchStatus: FAILED,\n        }))\n      }\n    }\n\n    if (account) {\n      fetchBalance()\n    }\n  }, [account, tokenAddress, allowedAddress, fastRefresh, SUCCESS, FAILED])\n\n  return balanceState\n}\n\nexport const useTotalSupply = () => {\n  const { slowRefresh } = useRefresh()\n  const [totalSupply, setTotalSupply] = useState<BigNumber>()\n\n  useEffect(() => {\n    async function fetchTotalSupply() {\n      const cakeContract = getCakeContract()\n      const supply = await cakeContract.methods.totalSupply().call()\n      setTotalSupply(new BigNumber(supply))\n    }\n\n    fetchTotalSupply()\n  }, [slowRefresh])\n\n  return totalSupply\n}\n\nexport const useBurnedBalance = (tokenAddress: string) => {\n  const [balance, setBalance] = useState(BIG_ZERO)\n  const { slowRefresh } = useRefresh()\n\n  useEffect(() => {\n    const fetchBalance = async () => {\n      const contract = getBep20Contract(tokenAddress)\n      const res = await contract.methods.balanceOf('0x000000000000000000000000000000000000dEaD').call()\n      setBalance(new BigNumber(res))\n    }\n\n    fetchBalance()\n  }, [tokenAddress, slowRefresh])\n\n  return balance\n}\n\nexport const useGetBnbBalance = () => {\n  const [balance, setBalance] = useState(BIG_ZERO)\n  const { account } = useWeb3React()\n  const { lastUpdated, setLastUpdated } = useLastUpdated()\n  const web3 = useWeb3()\n\n  useEffect(() => {\n    const fetchBalance = async () => {\n      const walletBalance = await web3.eth.getBalance(account)\n      setBalance(new BigNumber(walletBalance))\n    }\n\n    if (account) {\n      fetchBalance()\n    }\n  }, [account, web3, lastUpdated, setBalance])\n\n  return { balance, refresh: setLastUpdated }\n}\n\nexport default useTokenBalance\n","import React, { useRef, useEffect } from 'react'\n\nfunction usePrevious(value) {\n  const ref = React.useRef()\n  useEffect(() => {\n    ref.current = value\n  }, [value])\n  return ref.current\n}\n\nexport default usePrevious\n","export const Latinise = {\n  latin_map: {\n    τ: 't',\n    Τ: 'T',\n  },\n}\n\nexport const latinise = (input: string) => {\n  return input.replace(/[^A-Za-z0-9[\\] ]/g, (x) => Latinise.latin_map[x] || x)\n}\n","import { useCallback } from 'react'\nimport { useWeb3React } from '@web3-react/core'\nimport { useAppDispatch } from 'state'\nimport { updateUserBalance, updateUserPendingReward } from 'state/actions'\nimport { soushHarvest, soushHarvestBnb, harvest, claim } from 'utils/callHelpers'\nimport { useLPStakingContract, useMasterchef, useSousChef } from './useContract'\n\nexport const useClaim = (stakingContract: string) => {\n  const { account } = useWeb3React()\n  const contract = useLPStakingContract(stakingContract)\n\n  const handleClaim = useCallback(async () => {\n    const txHash = await claim(contract, account)\n    return txHash\n  }, [account, contract])\n\n  return { onReward: handleClaim }\n}\n\nexport const useHarvest = (farmPid: number) => {\n  const { account } = useWeb3React()\n  const masterChefContract = useMasterchef()\n\n  const handleHarvest = useCallback(async () => {\n    const txHash = await harvest(masterChefContract, farmPid, account)\n    return txHash\n  }, [account, farmPid, masterChefContract])\n\n  return { onReward: handleHarvest }\n}\n\nexport const useSousHarvest = (sousId, isUsingBnb = false) => {\n  const dispatch = useAppDispatch()\n  const { account } = useWeb3React()\n  const sousChefContract = useSousChef(sousId)\n  const masterChefContract = useMasterchef()\n\n  const handleHarvest = useCallback(async () => {\n    if (sousId === 0) {\n      await harvest(masterChefContract, 0, account)\n    } else if (isUsingBnb) {\n      await soushHarvestBnb(sousChefContract, account)\n    } else {\n      await soushHarvest(sousChefContract, account)\n    }\n    dispatch(updateUserPendingReward(sousId, account))\n    dispatch(updateUserBalance(sousId, account))\n  }, [account, dispatch, isUsingBnb, masterChefContract, sousChefContract, sousId])\n\n  return { onReward: handleHarvest }\n}\n","import React from 'react'\nimport { TokenPairImageProps as UIKitTokenPairImageProps } from '@pancakeswap/uikit'\nimport { Flex } from '@sparkpointio/sparkswap-uikit'\nimport styled from 'styled-components'\nimport tokens from 'config/constants/tokens'\nimport { Token } from 'config/constants/types'\nimport { getAddress } from 'utils/addressHelpers'\n\ninterface TokenPairImageProps extends Omit<UIKitTokenPairImageProps, 'primarySrc' | 'secondarySrc'> {\n  primaryToken: Token\n  secondaryToken: Token\n}\n\nconst StyledLogo = styled.img`\n  width: 50px;\n`\nconst PairLogoImg = styled(Flex)`\n  margin-bottom: 30px;\n  & > * {\n    margin-left: 10px;\n  }\n`\n\nconst getImageUrlFromToken = (token: Token) => {\n  const address = getAddress(token.symbol === 'BNB' ? tokens.wbnb.address : token.address)\n  return `/images/tokens/${address}.${token.iconExtension ?? 'svg'}`\n}\n\nconst TokenPairImage: React.FC<TokenPairImageProps> = ({ primaryToken, secondaryToken }) => {\n  return (\n    <PairLogoImg>\n      <StyledLogo src={getImageUrlFromToken(primaryToken)} alt=\"logo-img\" />\n      <StyledLogo src={getImageUrlFromToken(secondaryToken)} alt=\"logo-img\" />\n    </PairLogoImg>\n  )\n}\n\nexport default TokenPairImage\n","import { useCallback } from 'react'\nimport { useWeb3React } from '@web3-react/core'\nimport { Contract } from 'web3-eth-contract'\nimport { useAppDispatch } from 'state'\nimport { updateUserStakedBalance, updateUserBalance } from 'state/actions'\nimport { stake, sousStake, sousStakeBnb } from 'utils/callHelpers'\nimport { useMasterchef, useSousChef } from './useContract'\n\nconst useStake = (pid: number) => {\n  const { account } = useWeb3React()\n  const masterChefContract = useMasterchef()\n\n  const handleStake = useCallback(\n    async (amount: string, contract: Contract) => {\n      const txHash = await stake(contract ?? masterChefContract, pid, amount, account, !!contract)\n      console.info(txHash)\n    },\n    [account, masterChefContract, pid],\n  )\n\n  return { onStake: handleStake }\n}\n\nexport const useSousStake = (sousId: number, isUsingBnb = false) => {\n  const dispatch = useAppDispatch()\n  const { account } = useWeb3React()\n  const masterChefContract = useMasterchef()\n  const sousChefContract = useSousChef(sousId)\n\n  const handleStake = useCallback(\n    async (amount: string, decimals: number) => {\n      if (sousId === 0) {\n        await stake(masterChefContract, 0, amount, account)\n      } else if (isUsingBnb) {\n        await sousStakeBnb(sousChefContract, amount, account)\n      } else {\n        await sousStake(sousChefContract, amount, decimals, account)\n      }\n      dispatch(updateUserStakedBalance(sousId, account))\n      dispatch(updateUserBalance(sousId, account))\n    },\n    [account, dispatch, isUsingBnb, masterChefContract, sousChefContract, sousId],\n  )\n\n  return { onStake: handleStake }\n}\n\nexport default useStake\n","import { useCallback } from 'react'\nimport { useWeb3React } from '@web3-react/core'\nimport { useAppDispatch } from 'state'\nimport { updateUserBalance, updateUserPendingReward, updateUserStakedBalance } from 'state/actions'\nimport { exit, sousEmergencyUnstake, sousUnstake, unstake } from 'utils/callHelpers'\nimport { useLPStakingContract, useMasterchef, useSousChef } from './useContract'\n\nexport const useExit = (contract: string) => {\n  const { account } = useWeb3React()\n  const stakingContract = useLPStakingContract(contract)\n\n  const handleUnstake = useCallback(\n    async (amount: string) => {\n      const txHash = await exit(stakingContract, account)\n      console.info(txHash)\n    },\n    [account, stakingContract],\n  )\n\n  return { onUnstake: handleUnstake }\n}\n\nconst useUnstake = (pid: number) => {\n  const { account } = useWeb3React()\n  const masterChefContract = useMasterchef()\n\n  const handleUnstake = useCallback(\n    async (amount: string) => {\n      const txHash = await unstake(masterChefContract, pid, amount, account)\n      console.info(txHash)\n    },\n    [account, masterChefContract, pid],\n  )\n\n  return { onUnstake: handleUnstake }\n}\n\nexport const useSousUnstake = (sousId, enableEmergencyWithdraw = false) => {\n  const dispatch = useAppDispatch()\n  const { account } = useWeb3React()\n  const masterChefContract = useMasterchef()\n  const sousChefContract = useSousChef(sousId)\n\n  const handleUnstake = useCallback(\n    async (amount: string, decimals: number) => {\n      if (sousId === 0) {\n        const txHash = await unstake(masterChefContract, 0, amount, account)\n        console.info(txHash)\n      } else if (enableEmergencyWithdraw) {\n        const txHash = await sousEmergencyUnstake(sousChefContract, account)\n        console.info(txHash)\n      } else {\n        const txHash = await sousUnstake(sousChefContract, amount, decimals, account)\n        console.info(txHash)\n      }\n      dispatch(updateUserStakedBalance(sousId, account))\n      dispatch(updateUserBalance(sousId, account))\n      dispatch(updateUserPendingReward(sousId, account))\n    },\n    [account, dispatch, enableEmergencyWithdraw, masterChefContract, sousChefContract, sousId],\n  )\n\n  return { onUnstake: handleUnstake }\n}\n\nexport default useUnstake\n","import styled from 'styled-components'\n\nconst FlexLayout = styled.div`\n  display: flex;\n  justify-content: center;\n  flex-wrap: wrap;\n  & > * {\n    min-width: 280px;\n    max-width: 31.5%;\n    min-height: 500px;\n    height: auto;\n    width: 100%;\n    margin: 0 8px;\n    margin-bottom: 32px;\n  }\n`\n\nexport default FlexLayout\n","import identity from 'lodash/identity'\nimport { useEffect, useState } from 'react'\n\ninterface UsePersistStateOptions {\n  localStorageKey: string\n  hydrate?: (value: any) => any\n  dehydrate?: (value: any) => any\n}\n\nconst defaultOptions = {\n  hydrate: identity,\n  dehydrate: identity,\n}\n\n/**\n * Same as \"useState\" but saves the value to local storage each time it changes\n */\nconst usePersistState = (initialValue: any, userOptions: UsePersistStateOptions) => {\n  const { localStorageKey, hydrate, dehydrate } = { ...defaultOptions, ...userOptions }\n  const [value, setValue] = useState(() => {\n    try {\n      const valueFromLS = localStorage.getItem(localStorageKey)\n\n      return valueFromLS ? hydrate(JSON.parse(valueFromLS)) : initialValue\n    } catch (error) {\n      return initialValue\n    }\n  })\n\n  useEffect(() => {\n    localStorage.setItem(localStorageKey, JSON.stringify(dehydrate(value)))\n  }, [value, localStorageKey, dehydrate])\n\n  return [value, setValue]\n}\n\nexport default usePersistState\n","import React from 'react'\nimport styled from 'styled-components'\n\nexport default styled.div`\n  background-color: ${({ theme }) => theme.colors.textSubtle};\n  height: 1px;\n  margin: 0 auto 32px;\n  width: 100%;\n`\n\nexport const StyledHr = styled.div`\n  border-style: solid none none none;\n  border-width: 2px;\n  border-color: ${({ theme }) => theme.colors.primary};\n  width: 95%;\n`\n\nexport const ModalHr = styled.hr`\n  border-style: solid none none none;\n  border-width: 2px;\n  border-color: ${({ theme }) => theme.colors.primary};\n  margin-top: 20px;\n  margin-bottom: 20px;\n  width: 100%;\n`\n","import styled from 'styled-components'\n\nexport const ActionContainer = styled.div`\n  padding: 16px;\n  border: 2px solid ${({ theme }) => theme.colors.MGG_active};\n  // border-radius: 16px;\n  flex-grow: 1;\n  flex-basis: 0;\n  margin-bottom: 16px;\n\n  ${({ theme }) => theme.mediaQueries.sm} {\n    margin-left: 12px;\n    margin-right: 12px;\n    margin-bottom: 0;\n    max-height: 100px;\n  }\n\n  ${({ theme }) => theme.mediaQueries.xl} {\n    margin-left: 48px;\n    margin-right: 0;\n    margin-bottom: 0;\n    max-height: 100px;\n  }\n`\n\nexport const ActionTitles = styled.div`\n  display: flex;\n`\n\nexport const ActionContent = styled.div`\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n`\nexport const Earned = styled.div`\n  font-weight: 600;\n  font-size: 20px;\n  color: ${({ theme }) => theme.colors.text};\n`\n","import React from 'react'\nimport { useTranslation } from 'contexts/Localization'\nimport styled from 'styled-components'\nimport { Text, Flex, LinkExternal, Skeleton } from '@pancakeswap/uikit'\n\nexport interface ExpandableSectionProps {\n  stakingAddress?: string\n  lpInfoAddress?: string\n  removed?: boolean\n  totalValueFormatted?: string\n  lpLabel?: string\n  addLiquidityUrl?: string\n}\n\nconst Wrapper = styled.div`\n  margin-top: 24px;\n`\n\nconst StyledLinkExternal = styled(LinkExternal)`\n  font-weight: 400;\n`\n\nconst DetailsSection: React.FC<ExpandableSectionProps> = ({ stakingAddress, lpInfoAddress }) => {\n  const { t } = useTranslation()\n\n  return (\n    <Wrapper>\n      {/* <Flex justifyContent=\"space-between\">\n        <Text>{t('Total Liquidity')}:</Text>\n        {totalValueFormatted ? <Text>{totalValueFormatted}</Text> : <Skeleton width={75} height={25} />}\n      </Flex>\n      {!removed && (\n        <StyledLinkExternal href={addLiquidityUrl}>{t('Get %symbol%', { symbol: lpLabel })}</StyledLinkExternal>\n      )} */}\n      <StyledLinkExternal href={stakingAddress}>View Staking Contract</StyledLinkExternal>\n      {lpInfoAddress && <StyledLinkExternal href={lpInfoAddress}>{t('See Pair Info')}</StyledLinkExternal>}\n    </Wrapper>\n  )\n}\n\nexport default DetailsSection\n","import React from 'react'\nimport styled from 'styled-components'\nimport { Box } from '@pancakeswap/uikit'\nimport Container from '../layout/Container'\n\nconst Outer = styled(Box)<{ background?: string }>`\n  background: ${({ theme, background }) =>\n    theme.isDark ? `linear-gradient(0deg, rgba(43,28,0,1) 5%, rgba(16,16,16,1) 100%)` : theme.colors.modal};\n  // background:  rgb(43,28,0);\n  // background: linear-gradient(0deg, rgba(43,28,0,1) 5%, rgba(16,16,16,1) 100%);\n`\n\nconst Inner = styled(Container)`\n  padding-top: 32px;\n  padding-bottom: 32px;\n`\n\nconst PageHeader: React.FC<{ background?: string }> = ({ background, children, ...props }) => (\n  <Outer background={background} {...props}>\n    <Inner>{children}</Inner>\n  </Outer>\n)\n\nexport default PageHeader\n","import React from 'react'\nimport styled from 'styled-components'\nimport { Button, Flex, Input, InputProps } from '@metagg/mgg-uikit'\nimport { useTranslation } from 'contexts/Localization'\n\ninterface ModalInputProps {\n  max: string\n  symbol: string\n  onSelectMax?: () => void\n  onChange: (e: React.FormEvent<HTMLInputElement>) => void\n  placeholder?: string\n  value: string\n  addLiquidityUrl?: string\n  inputTitle?: string\n  decimals?: number\n}\n\nconst getBoxShadow = ({ isWarning = false, theme }) => {\n  if (isWarning) {\n    return theme.shadows.warning\n  }\n\n  return theme.shadows.inset\n}\n\nconst StyledTokenInput = styled.div<InputProps>`\n  display: flex;\n  flex-direction: column;\n  background-color: transparent;\n  border: 2px solid ${({ theme }) => theme.colors.primary};\n  // box-shadow: ${getBoxShadow};\n  color: ${({ theme }) => theme.colors.text};\n  padding: 8px 16px 8px 0;\n  width: 100%;\n`\n\nconst StyledInput = styled(Input)`\n  box-shadow: none;\n  flex: 1;\n  margin: 0 8px;\n  padding: 0 8px;\n  background: none;\n\n  ${({ theme }) => theme.mediaQueries.xs} {\n    width: 80px;\n  }\n\n  ${({ theme }) => theme.mediaQueries.sm} {\n    width: auto;\n  }\n\n  &:focus:not(:disabled) {\n    box-shadow: none;\n  }\n`\n\n// const StyledErrorMessage = styled(Text)`\n//   position: absolute;\n//   bottom: -22px;\n//\n//   a {\n//     display: inline;\n//   }\n// `\n\nconst ModalInput: React.FC<ModalInputProps> = ({\n  max,\n  // symbol,\n  onChange,\n  onSelectMax,\n  value,\n  // addLiquidityUrl,\n  // inputTitle,\n  decimals = 18,\n}) => {\n  const { t } = useTranslation()\n  const isBalanceZero = max === '0' || !max\n\n  // const displayBalance = (balance: string) => {\n  //   if (isBalanceZero) {\n  //     return '0'\n  //   }\n  //   const balanceBigNumber = new BigNumber(balance)\n  //   if (balanceBigNumber.gt(0) && balanceBigNumber.lt(0.0001)) {\n  //     return balanceBigNumber.toLocaleString()\n  //   }\n  //   return balanceBigNumber.toFixed(3, BigNumber.ROUND_DOWN)\n  // }\n\n  return (\n    <div style={{ position: 'relative', margin: '15px 0px' }}>\n      <StyledTokenInput isWarning={isBalanceZero}>\n        {/* <Flex justifyContent=\"space-between\" pl=\"16px\">\n          <Text fontSize=\"14px\">{inputTitle}</Text>\n        </Flex> */}\n        <Flex alignItems=\"flex-end\" justifyContent=\"space-around\">\n          <StyledInput\n            pattern={`^[0-9]*[.,]?[0-9]{0,${decimals}}$`}\n            inputMode=\"decimal\"\n            step=\"any\"\n            min=\"0\"\n            onChange={onChange}\n            placeholder=\"0\"\n            value={value}\n          />\n          <Button size=\"sm\" onClick={onSelectMax} mr=\"8px\" mb=\"4px\">\n            {t('Max')}\n          </Button>\n          {/* <Text fontSize=\"16px\">{symbol}</Text> */}\n        </Flex>\n      </StyledTokenInput>\n      <Flex>\n        {/* <Text fontSize=\"14px\" color=\"textSubtle\">\n            {t('Available')}: {getFullDisplayBalance}\n          </Text>  */}\n      </Flex>\n      {/* {isBalanceZero && (\n        <StyledErrorMessage fontSize=\"14px\" color=\"failure\">\n          {t('No tokens to stake')}:{' '}\n          <Link fontSize=\"14px\" bold={false} href={addLiquidityUrl} external color=\"failure\">\n            {t('Get %symbol%', { symbol })}\n          </Link>\n        </StyledErrorMessage>\n      )} */}\n    </div>\n  )\n}\n\nexport default ModalInput\n","// Constructing the two forward-slash-separated parts of the 'Add Liquidity' URL\n// Each part of the url represents a different side of the LP pair.\nimport { getWbnbAddress } from './addressHelpers'\n\nconst getLiquidityUrlPathParts = ({ mainTokenAddress, pairTokenAddress }) => {\n  const chainId = process.env.REACT_APP_CHAIN_ID\n  const wBNBAddressString = getWbnbAddress()\n  const mainTokenAddressString: string = mainTokenAddress ? mainTokenAddress[chainId] : null\n  const pairTokenAddressString: string = pairTokenAddress ? pairTokenAddress[chainId] : null\n  const firstPart =\n    !mainTokenAddressString || mainTokenAddressString === wBNBAddressString ? 'ETH' : mainTokenAddressString\n  const secondPart =\n    !pairTokenAddressString || pairTokenAddressString === wBNBAddressString ? 'ETH' : pairTokenAddressString\n  return `${firstPart}/${secondPart}`\n}\n\nexport default getLiquidityUrlPathParts\n","import React from 'react'\nimport styled from 'styled-components'\nimport { Tag, Flex, Heading, Image } from '@sparkpointio/sparkswap-uikit'\nimport { CommunityTag, CoreTag } from 'components/Tags'\nimport { Token } from 'config/constants/types'\nimport TokenPairImage from 'components/TokenPairImage'\n\nexport interface ExpandableSectionProps {\n  lpLabel?: string\n  multiplier?: string\n  isCommunityFarm?: boolean\n  farmImage?: string\n  farmSymbol?: string\n  tokenSymbol?: string\n  rewardToken?: string\n  token: Token\n  quoteToken: Token\n  pairToken?: Token\n}\n\nconst Wrapper = styled(Flex)`\n  border-bottom: 5px solid ${({ theme }) => theme.colors.MGG_active};\n  padding: 24px;\n  svg {\n    margin-right: 4px;\n  }\n`\n\nconst MultiplierTag = styled(Tag)`\n  margin-left: 4px;\n`\n\nconst CardHeading: React.FC<ExpandableSectionProps> = ({\n  lpLabel,\n  multiplier,\n  isCommunityFarm,\n  farmImage,\n  tokenSymbol,\n  farmSymbol,\n  rewardToken,\n  token,\n  pairToken,\n}) => {\n  return (\n    <Wrapper justifyContent=\"space-between\" alignItems=\"center\" mb=\"12px\">\n      <Flex flexDirection=\"row\" alignItems=\"\">\n        <Heading mb=\"4px\" style={{ textAlign: 'left' }} size=\"lg\">\n          Stake <br /> {lpLabel.split(' ')[0]} <br /> Earn {rewardToken}\n        </Heading>\n      </Flex>\n      <TokenPairImage variant=\"inverted\" primaryToken={token} secondaryToken={pairToken} width={64} height={64} />\n      {/* <Image src={`/images/farms/${farmImage}.svg`} alt={tokenSymbol} width={64} height={64} /> */}\n    </Wrapper>\n  )\n}\n\nexport default CardHeading\n","import * as React from 'react'\nimport { Box, CircularProgress } from '@material-ui/core'\n\nexport default function CircularIndeterminate() {\n  return (\n    <Box sx={{ display: 'flex', color: '#FFF' }}>\n      <CircularProgress color=\"inherit\" />\n    </Box>\n  )\n}\n","export type TableProps = {\n  data?: TableDataTypes[]\n  selectedFilters?: string\n  sortBy?: string\n  sortDir?: string\n  onSort?: (value: string) => void\n}\n\nexport type ColumnsDefTypes = {\n  id: number\n  label: string\n  name: string\n  sortable: boolean\n}\n\nexport type ScrollBarProps = {\n  ref: string\n  width: number\n}\n\nexport type TableDataTypes = {\n  POOL: string\n  APR: string\n  EARNED: string\n  STAKED: string\n  DETAILS: string\n  LINKS: string\n}\n\nexport const MobileColumnSchema: ColumnsDefTypes[] = [\n  {\n    id: 1,\n    name: 'farm',\n    sortable: true,\n    label: '',\n  },\n  {\n    id: 2,\n    name: 'earned',\n    sortable: true,\n    label: 'Earned',\n  },\n  {\n    id: 3,\n    name: 'apr',\n    sortable: true,\n    label: 'APR',\n  },\n  {\n    id: 6,\n    name: 'details',\n    sortable: true,\n    label: '',\n  },\n]\n\nexport const DesktopColumnSchema: ColumnsDefTypes[] = [\n  {\n    id: 1,\n    name: 'farm',\n    sortable: true,\n    label: '',\n  },\n  {\n    id: 2,\n    name: 'earned',\n    sortable: true,\n    label: 'Earned',\n  },\n  {\n    id: 3,\n    name: 'apr',\n    sortable: true,\n    label: 'APR',\n  },\n  {\n    id: 4,\n    name: 'liquidity',\n    sortable: true,\n    label: 'Liquidity',\n  },\n  {\n    id: 5,\n    name: 'multiplier',\n    sortable: true,\n    label: 'Multiplier',\n  },\n  {\n    id: 6,\n    name: 'details',\n    sortable: true,\n    label: '',\n  },\n]\n\nexport enum ViewMode {\n  'TABLE' = 'TABLE',\n  'CARD' = 'CARD',\n}\n","import BigNumber from 'bignumber.js'\nimport React, { useCallback, useMemo, useState } from 'react'\nimport { Button, Flex, Modal, Text } from '@sparkpointio/sparkswap-uikit'\nimport { useTranslation } from 'contexts/Localization'\nimport { getFullDisplayBalance } from 'utils/formatBalance'\nimport useToast from '../../../hooks/useToast'\n\ninterface WithdrawModalProps {\n  farm?: any\n  staked?: any\n  earnings?: any\n  max: BigNumber\n  onConfirm: (amount: string) => void\n  onDismiss?: () => void\n  tokenName?: string\n}\n\nconst WithdrawModal: React.FC<WithdrawModalProps> = ({\n  farm,\n  staked,\n  earnings,\n  onConfirm,\n  onDismiss,\n  max,\n  tokenName = '',\n}) => {\n  const [val, setVal] = useState('')\n  const [pendingTx, setPendingTx] = useState(false)\n  const { t } = useTranslation()\n  const fullBalance = useMemo(() => {\n    return getFullDisplayBalance(max)\n  }, [max])\n\n  const valNumber = new BigNumber(val)\n  const fullBalanceNumber = new BigNumber(fullBalance)\n  const { toastError, toastSuccess } = useToast()\n\n  const handleChange = useCallback(\n    (e: React.FormEvent<HTMLInputElement>) => {\n      if (e.currentTarget.validity.valid) {\n        setVal(e.currentTarget.value.replace(/,/g, '.'))\n      }\n    },\n    [setVal],\n  )\n\n  const handleSelectMax = useCallback(() => {\n    setVal(fullBalance)\n  }, [fullBalance, setVal])\n\n  return (\n    <Modal title=\"\" onDismiss={onDismiss}>\n      {/* <ModalInput\n        onSelectMax={handleSelectMax}\n        onChange={handleChange}\n        value={val}\n        max={fullBalance}\n        symbol={tokenName}\n        inputTitle={t('Unstake')}\n      />\n      <ModalActions>\n        <Button variant=\"secondary\" onClick={onDismiss} width=\"100%\" disabled={pendingTx}>\n          {t('Cancel')}\n        </Button>\n        <Button\n          disabled={pendingTx || !valNumber.isFinite() || valNumber.eq(0) || valNumber.gt(fullBalanceNumber)}\n          onClick={async () => {\n            setPendingTx(true)\n            await onConfirm(val)\n            setPendingTx(false)\n            onDismiss()\n          }}\n          width=\"100%\"\n        >\n          {pendingTx ? t('Pending Confirmation') : t('Confirm')}\n        </Button>\n      </ModalActions> */}\n      <Flex marginTop=\"-10px\" style={{ width: '450px' }} alignItems=\"center\" flexDirection=\"column\">\n        <Text>You will be claiming the reward amount of </Text>\n        <Text fontSize=\"28px\" bold>\n          {earnings} {farm.quoteToken.symbol}\n        </Text>\n        <Text>and withdrawing the staked amount of</Text>\n        <Text fontSize=\"28px\" bold>\n          {staked} {farm.lpSymbol}\n        </Text>\n      </Flex>\n      <Flex justifyContent=\"center\" margin=\"24px\" padding=\"0px 35px\">\n        <Button\n          disabled={pendingTx}\n          fullWidth\n          onClick={async () => {\n            setPendingTx(true)\n            try {\n              await onConfirm(val)\n              toastSuccess(t('Unstaked!'), t('Your LPs and earnings have been transferred to your wallet'))\n              onDismiss()\n            } catch (e) {\n              toastError(\n                t('Error'),\n                t('Please try again. Confirm the transaction and make sure you are paying enough gas!'),\n              )\n              console.error(e)\n            } finally {\n              setPendingTx(false)\n            }\n          }}\n        >\n          Confirm\n        </Button>\n      </Flex>\n    </Modal>\n  )\n}\n\nexport default WithdrawModal\n","import React from 'react'\nimport styled, { ThemeContext } from 'styled-components'\n\nconst Container = styled.div`\n  min-width: 720px;\n  display: flex;\n  justify-content: space-between;\n  height: auto;\n`\n\nconst DetailsCont = styled.div`\n  width: 30%;\n  height: auto;\n  overflow: visible;\n`\n\nconst ActionDiv = styled.div`\n  margin: 15px 0px;\n  padding: 10px;\n`\nconst ModalFooter = styled.div`\n  min-width: 720px;\n  display: flex;\n  justify-content: space-between;\n`\n\nexport { DetailsCont, ActionDiv, ModalFooter }\nexport default Container\n","import React from 'react'\nimport styled from 'styled-components'\nimport { Flex, Button } from '@sparkpointio/sparkswap-uikit'\n\nconst Container = styled.div`\n  margin-top: -30px;\n  display: flex;\n  flex-direction: column;\n  min-width: 500px;\n`\nconst StyledFlex = styled(Flex)`\n  padding: 10px 0px;\n`\nconst CancelButton = styled(Button)`\n  flex: 1;\n  margin-right: 10px;\n`\nconst DepositButton = styled(Button)`\n  flex: 1;\n  margin-left: 10px;\n`\n\nexport { StyledFlex, CancelButton, DepositButton }\nexport default Container\n","import BigNumber from 'bignumber.js'\nimport React, { useCallback, useMemo, useState } from 'react'\nimport { useWeb3React } from '@web3-react/core'\nimport { Contract } from 'web3-eth-contract'\nimport { Modal, Text } from '@metagg/mgg-uikit'\nimport ModalInput from 'components/ModalInput'\nimport { getFullDisplayBalance } from 'utils/formatBalance'\nimport Container, { CancelButton, DepositButton, StyledFlex } from './Styled'\nimport useToast from '../../../../hooks/useToast'\nimport { useTranslation } from '../../../../contexts/Localization'\nimport { useAppDispatch } from '../../../../state'\nimport { fetchFarmUserDataAsync } from '../../../../state/farms'\nimport { MAINNET_CHAIN_ID } from '../../../../config'\n\ninterface StakeModalInterface {\n  pid: number\n  onDismiss?: () => void\n  max: BigNumber\n  symbol: string\n  placeholder?: string\n  addLiquidityUrl?: string\n  inputTitle?: string\n  onConfirm: (amount: string, contract: Contract) => void\n  lpStakingContract?: Contract\n}\n\nconst Stake: React.FC<StakeModalInterface> = ({\n  pid,\n  onDismiss,\n  max,\n  symbol,\n  addLiquidityUrl,\n  inputTitle,\n  onConfirm,\n  lpStakingContract,\n}) => {\n  const [val, setVal] = useState('0')\n  const [pendingTx, setPendingTx] = useState(false)\n  const valNumber = new BigNumber(val)\n  const fullBalance = useMemo(() => {\n    return getFullDisplayBalance(max)\n  }, [max])\n\n  const { toastError, toastSuccess } = useToast()\n  const { t } = useTranslation()\n  const dispatch = useAppDispatch()\n  const { account, chainId } = useWeb3React()\n  const chain = chainId ? chainId.toString() : MAINNET_CHAIN_ID\n  const fullBalanceNumber = new BigNumber(fullBalance)\n\n  const handleChange = useCallback(\n    (e: React.FormEvent<HTMLInputElement>) => {\n      if (e.currentTarget.validity.valid) {\n        setVal(e.currentTarget.value.replace(/,/g, '.'))\n      }\n    },\n    [setVal],\n  )\n\n  const onClick = async () => {\n    try {\n      setPendingTx(true)\n      await onConfirm(val, lpStakingContract)\n      setPendingTx(false)\n      toastSuccess(`${t('Staked')}!`, t('Your %symbol% tokens have been staked to the pool!', { symbol }))\n      onDismiss()\n    } catch (e) {\n      toastError(t('Error'), t('Please try again. Confirm the transaction and make sure you are paying enough gas!'))\n      console.error(e)\n    } finally {\n      setPendingTx(false)\n    }\n    dispatch(fetchFarmUserDataAsync({ account, pids: [pid], chain }))\n  }\n\n  const handleSelectMax = useCallback(() => {\n    setVal(fullBalance)\n  }, [fullBalance, setVal])\n  return (\n    <Modal title=\"\" onDismiss={!pendingTx && onDismiss}>\n      <Container>\n        <Text>Stake amount: </Text>\n        <ModalInput\n          value={val}\n          onSelectMax={handleSelectMax}\n          onChange={handleChange}\n          max={fullBalance}\n          symbol={symbol}\n          addLiquidityUrl={addLiquidityUrl}\n          //  inputTitle={t('Stake')}\n        />\n      </Container>\n      <StyledFlex justifyContent=\"space-between\">\n        <Text>{symbol} balance: </Text>\n        <Text>{fullBalance}</Text>\n      </StyledFlex>\n      <StyledFlex justifyContent=\"space-between\">\n        <CancelButton onClick={onDismiss}>Close</CancelButton>\n        <DepositButton\n          onClick={onClick}\n          // disable Deposit button if not yet approved\n          disabled={pendingTx || !valNumber.isFinite() || valNumber.eq(0) || valNumber.gt(fullBalanceNumber)}\n        >\n          Deposit\n        </DepositButton>\n      </StyledFlex>\n    </Modal>\n  )\n}\n\nexport default Stake\n","import React from 'react'\nimport BigNumber from 'bignumber.js'\nimport { Button, Modal, Text, Flex } from '@metagg/mgg-uikit'\n\ninterface ClaimModalProps {\n  onDismiss?: () => void\n}\n\nconst ClaimModal: React.FC<ClaimModalProps> = ({ onDismiss }) => {\n  return (\n    <Modal title=\"\" onDismiss={onDismiss}>\n      {/* <ModalInput\n        onSelectMax={handleSelectMax}\n        onChange={handleChange}\n        value={val}\n        max={fullBalance}\n        symbol={tokenName}\n        inputTitle={t('Unstake')}\n      />\n      <ModalActions>\n        <Button variant=\"secondary\" onClick={onDismiss} width=\"100%\" disabled={pendingTx}>\n          {t('Cancel')}\n        </Button>\n        <Button\n          disabled={pendingTx || !valNumber.isFinite() || valNumber.eq(0) || valNumber.gt(fullBalanceNumber)}\n          onClick={async () => {\n            setPendingTx(true)\n            await onConfirm(val)\n            setPendingTx(false)\n            onDismiss()\n          }}\n          width=\"100%\"\n        >\n          {pendingTx ? t('Pending Confirmation') : t('Confirm')}\n        </Button>\n      </ModalActions> */}\n      <Flex marginTop=\"-10px\" style={{ width: '450px' }} alignItems=\"center\" flexDirection=\"column\">\n        <Text>You will be claiming the reward amount of </Text>\n        <Text fontSize=\"28px\" bold>\n          78.912 SRK Tokens\n        </Text>\n      </Flex>\n      <Flex justifyContent=\"center\" margin=\"24px\" padding=\"0px 35px\">\n        <Button fullWidth>Confirm</Button>\n      </Flex>\n    </Modal>\n  )\n}\n\nexport default ClaimModal\n","import BigNumber from 'bignumber.js'\nimport React, { useCallback, useState } from 'react'\nimport { Contract } from 'web3-eth-contract'\nimport { useWeb3React } from '@web3-react/core'\nimport { Button, Modal, Skeleton, Text, useModal } from '@metagg/mgg-uikit'\nimport { useApprove } from 'hooks/useApprove'\nimport { useERC20, useLPStakingContract } from 'hooks/useContract'\nimport useTokenBalance from 'hooks/useTokenBalance'\nimport { useAppDispatch } from 'state'\nimport { Farm } from 'state/types'\nimport { fetchFarmUserDataAsync } from 'state/farms'\nimport { getAddress } from 'utils/addressHelpers'\nimport { getBalanceAmount } from 'utils/formatBalance'\nimport { useTranslation } from 'contexts/Localization'\nimport WithdrawModal from './WithdrawModal'\nimport Container, { ActionDiv, DetailsCont, ModalFooter } from './Styled'\nimport { ModalHr } from './Divider'\nimport StakeModal from './Modals/Stake'\nimport ClaimModal from './Modals/ClaimModal'\nimport { MAINNET_CHAIN_ID } from '../../../config'\nimport { calculateUserRewardRate } from '../../../utils/farmHelpers'\n\ninterface DepositModalProps {\n  max: BigNumber\n  onConfirm: (amount: string, contract: Contract) => void\n  onDismiss?: () => void\n  tokenName?: string\n  addLiquidityUrl?: string\n  addTokenUrl?: string\n  farm?: Farm\n  handleUnstake?: (amount: string) => void\n  maxStake?: BigNumber\n}\n\nconst DepositModal: React.FC<DepositModalProps> = ({\n  max,\n  onConfirm,\n  onDismiss,\n  tokenName = '',\n  addLiquidityUrl,\n  addTokenUrl,\n  handleUnstake,\n  farm,\n  maxStake,\n}) => {\n  const [requestedApproval, setRequestedApproval] = useState(false)\n  const { t } = useTranslation()\n  const [activeSelect, setActiveSelect] = useState(false)\n  const { allowance, tokenBalance, stakedBalance, earnings } = farm.userData || {}\n  const { account, chainId } = useWeb3React()\n  const chain = chainId ? chainId.toString() : MAINNET_CHAIN_ID\n  const userRate = calculateUserRewardRate(farm, chain)\n  const dispatch = useAppDispatch()\n  const { pid, lpAddresses } = farm\n  const lpAddress = getAddress(lpAddresses, chain)\n  const lpContract = useERC20(lpAddress)\n  const RewardTokenBalance = useTokenBalance(getAddress(farm.quoteToken.address, chain))\n  const formatTokenBalance = getBalanceAmount(RewardTokenBalance.balance).toFormat(6)\n  const formatLPTokenBalance = getBalanceAmount(new BigNumber(tokenBalance)).toFormat(6)\n  const formatStakedTokenBalance = getBalanceAmount(new BigNumber(stakedBalance)).toFormat(6)\n  const formatTokenEarnings = getBalanceAmount(new BigNumber(earnings)).toFormat(6)\n  const [isApproved, setIsApproved] = useState(\n    account && allowance && new BigNumber(allowance).isGreaterThanOrEqualTo(tokenBalance),\n  )\n  const lpStakingAddress = getAddress(farm.stakingAddresses, chain)\n  const lpStakingContract = useLPStakingContract(lpStakingAddress)\n  const { onApprove } = useApprove(lpContract, lpStakingContract)\n  const handleApprove = useCallback(async () => {\n    try {\n      setRequestedApproval(true)\n      await onApprove()\n      dispatch(fetchFarmUserDataAsync({ account, pids: [pid], chain }))\n      setIsApproved(true)\n      setRequestedApproval(false)\n    } catch (e) {\n      console.error(e)\n    }\n  }, [onApprove, dispatch, account, pid, chain])\n  const [onPresentStake] = useModal(\n    <StakeModal\n      pid={pid}\n      onConfirm={onConfirm}\n      lpStakingContract={lpStakingContract}\n      max={max}\n      symbol={tokenName}\n      addLiquidityUrl={addLiquidityUrl}\n      inputTitle={t('Stake')}\n    />,\n  )\n\n  const [onPresentClaim] = useModal(<ClaimModal />)\n  const [onPresentWithdraw] = useModal(\n    <WithdrawModal\n      farm={farm}\n      staked={formatStakedTokenBalance}\n      earnings={formatTokenEarnings}\n      max={maxStake}\n      onConfirm={handleUnstake}\n      tokenName={tokenName}\n    />,\n  )\n\n  return (\n    <Modal title={t('Account Info')} onDismiss={onDismiss}>\n      <Text color=\"textSubtle\" fontSize=\"14px\" style={{ paddingBottom: '30px', marginTop: '-40px' }}>\n        Staking, balances & earnings\n      </Text>\n      <Container>\n        <DetailsCont>\n          <Text bold fontSize=\"24px\">\n            {formatTokenBalance ?? <Skeleton width={60} display=\"inline-block\" />}\n          </Text>\n          <Text color=\"textSubtle\" fontSize=\"14px\">\n            {farm.quoteToken.symbol}\n          </Text>\n          <ActionDiv style={{ padding: '0px' }}>\n            <Button fullWidth as=\"a\" target=\"_blank\" href={addTokenUrl}>\n              Get {farm.quoteToken.symbol}\n            </Button>\n          </ActionDiv>\n        </DetailsCont>\n        <DetailsCont>\n          <Text bold fontSize=\"24px\">\n            {formatLPTokenBalance ?? <Skeleton width={60} display=\"inline-block\" />}\n          </Text>\n          <Text color=\"textSubtle\" fontSize=\"14px\">\n            {tokenName} Tokens\n          </Text>\n          <ActionDiv style={{ padding: '0px' }}>\n            <Button fullWidth as=\"a\" target=\"_blank\" href={addLiquidityUrl}>\n              Get {tokenName}\n            </Button>\n          </ActionDiv>\n        </DetailsCont>\n        <DetailsCont>\n          <Text bold fontSize=\"24px\">\n            {formatStakedTokenBalance ?? <Skeleton width={60} display=\"inline-block\" />}\n          </Text>\n          <Text color=\"textSubtle\" fontSize=\"14px\">\n            Your {tokenName} Deposits\n          </Text>\n          <ActionDiv style={{ padding: '0px' }}>\n            {isApproved ? (\n              <Button fullWidth onClick={onPresentStake} disabled>\n                Stake {tokenName}\n              </Button>\n            ) : (\n              <Button fullWidth onClick={handleApprove} disabled={requestedApproval}>\n                Enable Farm\n              </Button>\n            )}\n          </ActionDiv>\n        </DetailsCont>\n      </Container>\n      <ModalHr />\n      <ModalFooter>\n        <DetailsCont>\n          <Text bold fontSize=\"24px\">\n            {userRate}\n          </Text>\n          <Text color=\"textSubtle\" fontSize=\"14px\">{`Your Rate ${farm.quoteToken.symbol}/week`}</Text>\n        </DetailsCont>\n        <DetailsCont>\n          <Text bold fontSize=\"24px\">\n            {formatTokenEarnings ?? <Skeleton width={60} display=\"inline-block\" />}\n          </Text>\n          <Text color=\"textSubtle\" fontSize=\"14px\">{`${farm.quoteToken.symbol} Token Earnings`}</Text>\n        </DetailsCont>\n        <DetailsCont\n          style={{ display: 'flex', justifyContent: 'center', alignItems: 'center' }}\n          onMouseEnter={() => setActiveSelect(true)}\n          onMouseLeave={() => setActiveSelect(false)}\n        >\n          <Button fullWidth onClick={onPresentWithdraw} disabled={earnings === '0'}>\n            <Text>Claim & Withdraw</Text>\n          </Button>\n        </DetailsCont>\n      </ModalFooter>\n    </Modal>\n  )\n}\n\nexport default DepositModal\n","import React, { useCallback } from 'react'\nimport { useWeb3React } from '@web3-react/core'\nimport { Contract } from 'web3-eth-contract'\nimport styled from 'styled-components'\nimport BigNumber from 'bignumber.js'\nimport { Button, Flex, Heading, IconButton, AddIcon, MinusIcon, useModal } from '@metagg/mgg-uikit'\nimport { useLocation } from 'react-router-dom'\nimport Balance from 'components/Balance'\nimport { useTranslation } from 'contexts/Localization'\nimport { useAppDispatch } from 'state'\nimport { fetchFarmUserDataAsync } from 'state/farms'\nimport { useLpTokenPrice } from 'state/hooks'\nimport useStake from 'hooks/useStake'\nimport useUnstake, { useExit } from 'hooks/useUnstake'\nimport { Farm } from 'state/types'\nimport { getBalanceAmount, getBalanceNumber, getFullDisplayBalance } from 'utils/formatBalance'\nimport Loading from 'components/Loading'\nimport DepositModal from '../DepositModal'\nimport WithdrawModal from '../WithdrawModal'\nimport { getAddress } from '../../../../utils/addressHelpers'\nimport { calculateUserRewardRate } from '../../../../utils/farmHelpers'\nimport { MAINNET_CHAIN_ID } from '../../../../config'\n\ninterface FarmCardActionsProps {\n  userDataReady?: boolean\n  userRate?: string\n  stakedBalance?: BigNumber\n  tokenBalance?: BigNumber\n  tokenName?: string\n  pid?: number\n  addLiquidityUrl?: string\n  addTokenUrl?: string\n  farm?: Farm\n}\n\nconst IconButtonWrapper = styled.div`\n  display: flex;\n  svg {\n    width: 20px;\n  }\n`\n\nconst StakeAction: React.FC<FarmCardActionsProps> = ({\n  stakedBalance,\n  tokenBalance,\n  tokenName,\n  pid,\n  addLiquidityUrl,\n  addTokenUrl,\n  farm,\n  userDataReady,\n}) => {\n  const { t } = useTranslation()\n  const { onStake } = useStake(pid)\n  const { account, chainId } = useWeb3React()\n  const chain = chainId ? chainId.toString() : MAINNET_CHAIN_ID\n  const { onUnstake } = useExit(getAddress(farm.stakingAddresses, chain))\n  const location = useLocation()\n  const dispatch = useAppDispatch()\n  const lpPrice = useLpTokenPrice(tokenName)\n\n  const handleStake = async (amount: string, contract?: Contract) => {\n    await onStake(amount, contract)\n    dispatch(fetchFarmUserDataAsync({ account, pids: [pid], chain }))\n  }\n\n  const handleUnstake = async (amount: string) => {\n    await onUnstake(amount)\n    dispatch(fetchFarmUserDataAsync({ account, pids: [pid], chain }))\n  }\n\n  const displayBalance = useCallback(() => {\n    const stakedBalanceBigNumber = getBalanceAmount(stakedBalance)\n    if (stakedBalanceBigNumber.gt(0) && stakedBalanceBigNumber.lt(0.0001)) {\n      return getFullDisplayBalance(stakedBalance).toLocaleString()\n    }\n    return stakedBalanceBigNumber.toFixed(3, BigNumber.ROUND_DOWN)\n  }, [stakedBalance])\n\n  const [onPresentDeposit] = useModal(\n    <DepositModal\n      max={tokenBalance}\n      onConfirm={handleStake}\n      tokenName={tokenName}\n      addLiquidityUrl={addLiquidityUrl}\n      addTokenUrl={addTokenUrl}\n      farm={farm}\n      handleUnstake={handleUnstake}\n      maxStake={stakedBalance}\n    />,\n  )\n  const earnings = getBalanceAmount(new BigNumber(farm.userData.earnings)).toFormat(6)\n  const formatStakedBalance = getBalanceAmount(new BigNumber(farm.userData.stakedBalance)).toFormat(6)\n  const [onPresentWithdraw] = useModal(\n    <WithdrawModal\n      farm={farm}\n      staked={formatStakedBalance}\n      earnings={earnings}\n      max={stakedBalance}\n      onConfirm={handleUnstake}\n      tokenName={tokenName}\n    />,\n  )\n\n  const renderStakingButtons = () => {\n    let buttonTxt = 'Deposit'\n    if (farm.hasEnded && stakedBalance.isGreaterThan(0)) {\n      buttonTxt = 'Withdraw'\n    }\n    return (\n      <Button\n        onClick={farm.hasEnded && parseFloat(farm.userData.stakedBalance) ? onPresentWithdraw : onPresentDeposit}\n        disabled={\n          farm.hasEnded &&\n          !parseFloat(farm.userData.stakedBalance) &&\n          ['history', 'archived'].some((item) => location.pathname.includes(item))\n        }\n        fullWidth\n      >\n        {userDataReady ? buttonTxt : <Loading />}\n      </Button>\n    )\n  }\n\n  return (\n    <Flex justifyContent=\"space-between\" alignItems=\"center\">\n      {/* <Heading color={stakedBalance.eq(0) ? 'textDisabled' : 'text'}>{displayBalance()}</Heading> */}\n      {renderStakingButtons()}\n    </Flex>\n  )\n}\n\nexport default StakeAction\n","import React, { useState } from 'react'\nimport styled from 'styled-components'\nimport BigNumber from 'bignumber.js'\nimport { getAddress } from 'utils/addressHelpers'\nimport { useAppDispatch } from 'state'\nimport { Farm } from 'state/types'\nimport { useTranslation } from 'contexts/Localization'\nimport UnlockButton from 'components/UnlockButton'\nimport StakeAction from './StakeAction'\n\nconst Action = styled.div`\n  padding-top: 16px;\n`\n\nexport interface FarmWithStakedValue extends Farm {\n  apr?: number\n}\n\ninterface FarmCardActionsProps {\n  userDataReady: boolean\n  farm: FarmWithStakedValue\n  account?: string\n  addLiquidityUrl?: string\n  addTokenUrl?: string\n}\n\nconst CardActions: React.FC<FarmCardActionsProps> = ({\n  userDataReady,\n  farm,\n  account,\n  addLiquidityUrl,\n  addTokenUrl,\n}) => {\n  const { t } = useTranslation()\n  const { pid, lpAddresses } = farm\n  const {\n    allowance: allowanceAsString = 0,\n    tokenBalance: tokenBalanceAsString = 0,\n    stakedBalance: stakedBalanceAsString = 0,\n    earnings: earningsAsString = 0,\n  } = farm.userData || {}\n  const tokenBalance = new BigNumber(tokenBalanceAsString)\n  const stakedBalance = new BigNumber(stakedBalanceAsString)\n\n  const renderDepositButton = () => {\n    return (\n      <StakeAction\n        userDataReady={userDataReady}\n        stakedBalance={stakedBalance}\n        tokenBalance={tokenBalance}\n        tokenName={farm.lpSymbol}\n        pid={pid}\n        addLiquidityUrl={addLiquidityUrl}\n        addTokenUrl={addTokenUrl}\n        farm={farm}\n      />\n    )\n  }\n\n  return <Action>{!account ? <UnlockButton mt=\"8px\" width=\"100%\" /> : renderDepositButton()}</Action>\n}\n\nexport default CardActions\n","import React, { useContext, useState } from 'react'\nimport { Button, Skeleton, Text } from '@metagg/mgg-uikit'\nimport { ThemeContext } from 'styled-components'\nimport BigNumber from 'bignumber.js'\nimport { useWeb3React } from '@web3-react/core'\nimport Balance from 'components/Balance'\nimport { BIG_ZERO } from 'utils/bigNumber'\nimport { getBalanceAmount } from 'utils/formatBalance'\nimport { useAppDispatch } from 'state'\nimport { fetchFarmUserDataAsync } from 'state/farms'\nimport { usePriceCakeBusd } from 'state/hooks'\nimport { useClaim } from 'hooks/useHarvest'\nimport { useTranslation } from 'contexts/Localization'\n\nimport { ActionContainer, ActionContent, ActionTitles, Earned } from './styles'\nimport useToast from '../../../../../hooks/useToast'\nimport { MAINNET_CHAIN_ID } from '../../../../../config'\n\ninterface HarvestActionProps {\n  pid: number\n  stakingContract?: string\n  tokenRewardSymbol?: string\n  userData?: {\n    allowance: string\n    tokenBalance: string\n    stakedBalance: string\n    earnings: string\n  }\n  userDataReady: boolean\n}\n\nconst HarvestAction: React.FunctionComponent<HarvestActionProps> = ({\n  stakingContract,\n  tokenRewardSymbol,\n  pid,\n  userData,\n  userDataReady,\n}) => {\n  const earningsBigNumber = new BigNumber(userData.earnings)\n  const cakePrice = usePriceCakeBusd()\n  let earnings = BIG_ZERO\n  let earningsBusd = 0\n  let displayBalance = userDataReady ? earnings.toLocaleString() : <Skeleton width={60} />\n\n  // If user didn't connect wallet default balance will be 0\n  if (!earningsBigNumber.isZero()) {\n    earnings = getBalanceAmount(earningsBigNumber)\n    earningsBusd = earnings.multipliedBy(cakePrice).toNumber()\n    displayBalance = earnings.toFixed(3, BigNumber.ROUND_DOWN)\n  }\n  const theme = useContext(ThemeContext)\n  const [pendingTx, setPendingTx] = useState(false)\n  const { onReward } = useClaim(stakingContract)\n  const { t } = useTranslation()\n  const dispatch = useAppDispatch()\n  const { account, chainId } = useWeb3React()\n  const chain = chainId ? chainId.toString() : MAINNET_CHAIN_ID\n  const { toastError, toastSuccess } = useToast()\n\n  return (\n    <ActionContainer style={{ margin: '10px 0' }}>\n      <ActionTitles>\n        <Text bold textTransform=\"uppercase\" color={theme.colors.MGG_accent2} fontSize=\"12px\" pr=\"4px\">\n          {tokenRewardSymbol}\n        </Text>\n        <Text bold textTransform=\"uppercase\" color=\"textSubtle\" fontSize=\"12px\">\n          {t('Earned')}\n        </Text>\n      </ActionTitles>\n      <ActionContent>\n        <div>\n          <Earned>{displayBalance}</Earned>\n          {earningsBusd > 0 && (\n            <Balance fontSize=\"12px\" color=\"textSubtle\" decimals={2} value={earningsBusd} unit=\" USD\" prefix=\"~\" />\n          )}\n        </div>\n        <Button\n          style={{ borderRadius: '3px', height: '40px' }}\n          disabled={earnings.eq(0) || pendingTx || !userDataReady}\n          onClick={async () => {\n            setPendingTx(true)\n            try {\n              await onReward()\n              toastSuccess(\n                `${t('Claimed')}!`,\n                t('Your %symbol% earnings have been sent to your wallet!', { symbol: tokenRewardSymbol }),\n              )\n            } catch (e) {\n              toastError(\n                t('Error'),\n                t('Please try again. Confirm the transaction and make sure you are paying enough gas!'),\n              )\n              console.error(e)\n            } finally {\n              setPendingTx(false)\n            }\n            dispatch(fetchFarmUserDataAsync({ account, pids: [pid], chain }))\n          }}\n          ml=\"4px\"\n        >\n          {t('Claim')}\n        </Button>\n      </ActionContent>\n    </ActionContainer>\n  )\n}\n\nexport default HarvestAction\n","import React, { useContext, useState } from 'react'\nimport BigNumber from 'bignumber.js'\nimport styled, { keyframes, ThemeContext } from 'styled-components'\nimport { Flex, Skeleton, Text } from '@sparkpointio/sparkswap-uikit'\nimport { Farm } from 'state/types'\nimport { useFarmPrice } from 'hooks/price'\nimport { getFarmV2Apr } from 'utils/apr'\nimport useTokenBalance from 'hooks/useTokenBalance'\nimport { useWeb3React } from '@web3-react/core'\nimport { useTranslation } from 'contexts/Localization'\nimport { BASE_ADD_LIQUIDITY_URL, BASE_EXCHANGE_URL, BASE_INFO_URL, BASE_SWAP_URL, MAINNET_CHAIN_ID } from 'config'\nimport getLiquidityUrlPathParts from 'utils/getLiquidityUrlPathParts'\nimport CardHeading from './CardHeading'\nimport CardActionsContainer from './CardActionsContainer'\nimport HarvestAction from '../FarmTable/Actions/HarvestAction'\nimport { getAddress } from '../../../../utils/addressHelpers'\nimport { getBalanceAmount } from '../../../../utils/formatBalance'\nimport ExpandableSectionButton from '../../../../components/ExpandableSectionButton'\nimport DetailsSection from './DetailsSection'\nimport { getBscScanAddressUrl } from '../../../../utils/bscscan'\n\nexport interface FarmWithStakedValue extends Farm {\n  apr?: number\n  liquidity?: BigNumber\n}\n\nconst AccentGradient = keyframes`\n  0% {\n    background-position: 50% 0%;\n  }\n  50% {\n    background-position: 50% 100%;\n  }\n  100% {\n    background-position: 50% 0%;\n  }\n`\n\nconst StyledCardAccent = styled.div`\n  // background: ${({ theme }) => `linear-gradient(180deg, ${theme.colors.primaryBright}, ${theme.colors.secondary})`};\n  background-size: 400% 400%;\n  animation: ${AccentGradient} 2s linear infinite;\n  border-radius: 32px;\n  position: absolute;\n  top: -1px;\n  right: -1px;\n  bottom: -3px;\n  left: -1px;\n  z-index: -1;\n`\n\nconst FCard = styled.div<{ isPromotedFarm: boolean }>`\n  align-self: baseline;\n  max-width: 450px;\n  background: ${(props) => props.theme.colors.MGG_container};\n  border: 5px solid ${(props) => props.theme.colors.MGG_active};\n  // border-radius: ${({ theme, isPromotedFarm }) => (isPromotedFarm ? '31px' : theme.radii.card)};\n  box-shadow: 0px 1px 4px rgba(25, 19, 38, 0.15);\n  display: flex;\n  flex-direction: column;\n  justify-content: space-around;\n  // padding: 24px;\n  position: relative;\n  text-align: center;\n`\n\nconst Divider = styled.div`\n  background-color: ${({ theme }) => theme.colors.card};\n  height: 1px;\n  margin: 28px auto;\n  width: 100%;\n`\n\nconst ExpandingWrapper = styled.div<{ expanded: boolean }>`\n  height: ${(props) => (props.expanded ? '100%' : '0px')};\n  overflow: hidden;\n`\n\ninterface FarmCardProps {\n  userDataReady: boolean\n  farm: FarmWithStakedValue\n  removed: boolean\n  cakePrice?: BigNumber\n  account?: string\n}\n\nconst FarmCard: React.FC<FarmCardProps> = ({ userDataReady, farm, removed, cakePrice, account }) => {\n  const { t } = useTranslation()\n  const [showExpandableSection, setShowExpandableSection] = useState(false)\n  const farmImage = farm.lpSymbol.split(' ')[0].toLocaleLowerCase()\n  const formatTotalDeposits = getBalanceAmount(new BigNumber(farm.totalDeposits ?? 0)).toFormat(4)\n  const formatTotalRewardRate = getBalanceAmount(new BigNumber(farm.totalRewardRate ?? 0)).toFormat(4)\n  const lpLabel = farm.lpSymbol && farm.lpSymbol.toUpperCase().replace('PANCAKE', '')\n  const earnLabel = farm.quoteToken.symbol\n  const farmAPR = farm.apr && farm.apr.toLocaleString('en-US', { maximumFractionDigits: 2 })\n  const liquidityUrlPathParts = getLiquidityUrlPathParts({\n    mainTokenAddress: farm.token.address,\n    pairTokenAddress: farm.pairToken.address,\n  })\n\n  const { chainId } = useWeb3React()\n  const chain = chainId ? chainId.toString() : MAINNET_CHAIN_ID\n\n  const stakingAddress = getAddress(farm.stakingAddresses, chain)\n\n  const addLiquidityUrl = `${farm.liquidityUrl ?? BASE_ADD_LIQUIDITY_URL}/${liquidityUrlPathParts}`\n  const AddTokenUrl = `${BASE_SWAP_URL}/${farm.token.address[56]}`\n  const lpAddress = farm.lpAddresses[process.env.REACT_APP_CHAIN_ID]\n  const isPromotedFarm = farm.token.symbol === 'CAKE'\n  const theme = useContext(ThemeContext)\n\n  // const token1Balance = useTokenBalance(farm.token.address[56], farm.lpAddresses[56])\n  // const token2Balance = useTokenBalance(farm.pairToken.address[56], farm.lpAddresses[56])\n  // const {LPPrice, rewardPrice} = useFarmPrice(Number(farm.lpTotalSupply), farm.token.address[56], farm.pairToken.address[56], farm.quoteToken.address[56], farm.lpAddresses[56])\n  const aprBlackList = ['0x9f6b80e3867ab402081574e9e0a3be6fdf4ae95b']\n  // const apr = (aprBlackList.includes(farm.lpAddresses[56]) ? null : getFarmV2Apr(LPPrice, rewardPrice, Number(farm.totalDeposits), Number(farm.rewardRate)) )\n\n  return (\n    <FCard isPromotedFarm={isPromotedFarm}>\n      {isPromotedFarm && <StyledCardAccent />}\n      <CardHeading\n        lpLabel={lpLabel}\n        multiplier={farm.multiplier}\n        isCommunityFarm={farm.isCommunity}\n        farmImage={farmImage}\n        farmSymbol={farm.lpSymbol}\n        tokenSymbol={farm.token.symbol}\n        rewardToken={farm.quoteToken.symbol}\n        token={farm.token}\n        quoteToken={farm.quoteToken}\n        pairToken={farm.pairToken}\n      />\n      {/* <hr style={{ width: '100%', border: 'none', backgroundColor: theme.colors.primary, height: '2px' }} /> */}\n      {/* {!removed && (\n        <Flex justifyContent=\"space-between\" alignItems=\"center\">\n          <Text>{t('APR')}:</Text>\n          <Text bold style={{ display: 'flex', alignItems: 'center' }}>\n            {farm.apr ? (\n              <>\n                <ApyButton lpLabel={lpLabel} addLiquidityUrl={addLiquidityUrl} cakePrice={cakePrice} apr={farm.apr} />\n                {farmAPR}%\n              </>\n            ) : (\n              <Skeleton height={24} width={80} />\n            )}\n          </Text>\n        </Flex>\n      )} */}\n\n      {/* <Flex justifyContent='space-between' style={{ textAlign: 'left' }}>\n        <Text>{t('Total Deposits')}</Text>\n        <Text color='textSubtle'>{farm.totalDeposits ? formatTotalDeposits : <Skeleton width={60} display='inline-block' />}</Text>\n      </Flex> */}\n      <div style={{ margin: '24px' }}>\n        <Flex>\n          <HarvestAction\n            stakingContract={getAddress(farm.stakingAddresses, chain)}\n            tokenRewardSymbol={earnLabel}\n            userDataReady={userDataReady}\n            userData={farm.userData}\n            pid={farm.pid}\n          />\n        </Flex>\n        {/* <Flex justifyContent='space-between'>\n        <Text>{t('APR')}</Text>\n        <Text color='textSubtle'>{(apr === 0 || apr === null ? \"-- \" : apr.toFixed(2))}%</Text>\n      </Flex> */}\n        <Flex justifyContent=\"space-between\">\n          <Text>{t('Rate')}</Text>\n          <Text color=\"textSubtle\">\n            {formatTotalRewardRate ?? <Skeleton width={60} display=\"inline-block\" />} {earnLabel} / week\n          </Text>\n        </Flex>\n        <Flex justifyContent=\"space-between\">\n          <Text>{t('Duration')}</Text>\n          <Text color=\"textSubtle\">{farm.remainingDays ?? <Skeleton width={60} display=\"inline-block\" />} Days</Text>\n        </Flex>\n        <CardActionsContainer\n          userDataReady={userDataReady}\n          farm={farm}\n          account={account}\n          addLiquidityUrl={addLiquidityUrl}\n          addTokenUrl={AddTokenUrl}\n        />\n\n        <DetailsSection\n          removed={removed}\n          stakingAddress={getBscScanAddressUrl(stakingAddress)}\n          lpInfoAddress={`${farm.infoURL ?? BASE_INFO_URL}/${lpAddress}`}\n          lpLabel={lpLabel}\n        />\n\n        {/* <Divider />\n       <ExpandableSectionButton\n        onClick={() => setShowExpandableSection(!showExpandableSection)}\n        expanded={showExpandableSection}\n      />\n      <ExpandingWrapper expanded={showExpandableSection}>\n        <DetailsSection\n          removed={removed}\n          bscScanAddress={getBscScanAddressUrl(farm.lpAddresses[process.env.REACT_APP_CHAIN_ID])}\n          infoAddress={`https://pancakeswap.info/pool/${lpAddress}`}\n          totalValueFormatted={farm.totalDeposits}\n          lpLabel={lpLabel}\n          addLiquidityUrl={addLiquidityUrl}\n        />\n      </ExpandingWrapper>\n      <Flex justifyContent='center'>\n         {Object.prototype.hasOwnProperty.call(farm.lpAddresses, '56') && (<Text color=\"textSubtle\" fontSize=\"14px\">{t('This will only work on Binance Smart Chain')}</Text>)}\n         {Object.prototype.hasOwnProperty.call(farm.lpAddresses, '1') && (<Text color=\"textSubtle\" fontSize=\"14px\">{t('This will only work on Ethereum Blockchain')}</Text>)}\n      </Flex> */}\n      </div>\n    </FCard>\n  )\n}\n\nexport default FarmCard\n","import React, { useCallback, useContext, useEffect, useMemo, useRef, useState } from 'react'\nimport { Route, useLocation, useRouteMatch } from 'react-router-dom'\nimport BigNumber from 'bignumber.js'\nimport { useWeb3React } from '@web3-react/core'\nimport { Flex, Image, RowType, Toggle } from '@pancakeswap/uikit'\nimport { Oval } from 'react-loading-icons'\nimport { Text } from '@sparkpointio/sparkswap-uikit'\nimport styled, { ThemeContext } from 'styled-components'\nimport FlexLayout from 'components/layout/Flex'\nimport Page from 'components/layout/Page'\nimport useMedia from 'use-media'\nimport { SvgIcon } from '@material-ui/core'\nimport { useFarms, usePollFarmsData, usePriceCakeBusd } from 'state/hooks'\nimport usePersistState from 'hooks/usePersistState'\nimport { useFarmPrice } from 'hooks/price'\nimport usePrevious from 'utils/refHelpers'\nimport { Farm } from 'state/types'\nimport { useTranslation } from 'contexts/Localization'\nimport { getBalanceNumber, getBalanceAmount } from 'utils/formatBalance'\nimport { getFarmApr, getFarmV2Apr } from 'utils/apr'\nimport useTokenBalance from 'hooks/useTokenBalance'\nimport { orderBy } from 'lodash'\nimport isArchivedPid from 'utils/farmHelpers'\nimport { latinise } from 'utils/latinise'\nimport PageHeader from 'components/PageHeader'\nimport SearchInput from 'components/SearchInput'\nimport Select, { OptionProps } from 'components/Select/Select'\nimport FarmCard, { FarmWithStakedValue } from './components/FarmCard/FarmCard'\nimport Table from './components/FarmTable/FarmTable'\nimport FarmTabButtons from './components/FarmTabButtons'\nimport { RowProps } from './components/FarmTable/Row'\nimport { DesktopColumnSchema, ViewMode } from './components/types'\nimport { ReactComponent as FarmsDarkLogo } from './components/assets/farm-dark.svg'\nimport { ReactComponent as FarmsLightLogo } from './components/assets/farm-light.svg'\nimport { MAINNET_CHAIN_ID } from '../../config'\n\nconst ControlContainer = styled.div`\n  display: flex;\n  width: 100%;\n  align-items: center;\n  position: relative;\n\n  justify-content: space-between;\n  flex-direction: column;\n  margin-bottom: 32px;\n\n  ${({ theme }) => theme.mediaQueries.sm} {\n    flex-direction: row;\n    flex-wrap: wrap;\n    padding: 16px 32px;\n    margin-bottom: 0;\n  }\n`\n\nconst ToggleWrapper = styled.div`\n  display: flex;\n  align-items: center;\n  margin-left: 10px;\n\n  ${Text} {\n    margin-left: 8px;\n  }\n`\n\nconst LabelWrapper = styled.div`\n  > ${Text} {\n    font-size: 12px;\n  }\n`\n\nconst FilterContainer = styled.div`\n  display: flex;\n  align-items: center;\n  width: 100%;\n  padding: 8px 0px;\n\n  ${({ theme }) => theme.mediaQueries.sm} {\n    width: auto;\n    padding: 0;\n  }\n`\n\nconst ViewControls = styled.div`\n  flex-wrap: wrap;\n  justify-content: space-between;\n  display: flex;\n  align-items: center;\n  width: 100%;\n\n  > div {\n    padding: 8px 0px;\n  }\n\n  ${({ theme }) => theme.mediaQueries.sm} {\n    justify-content: flex-start;\n    width: auto;\n\n    > div {\n      padding: 0;\n    }\n  }\n`\n\nconst InfoBox = styled(Flex)`\n  @media (max-width: 1024px) {\n    flex-direction: column;\n    & > * {\n      margin: 10px 0px;\n    }\n  }\n`\nconst StyledImage = styled(Image)`\n  margin-left: auto;\n  margin-right: auto;\n  margin-top: 58px;\n`\nconst NUMBER_OF_FARMS_VISIBLE = 12\n\nconst Farms: React.FC = () => {\n  const { path } = useRouteMatch()\n  const { pathname } = useLocation()\n  const { t } = useTranslation()\n  const { data: farmsLP, userDataLoaded } = useFarms()\n  const cakePrice = usePriceCakeBusd()\n  const [query, setQuery] = useState('')\n  const [viewMode, setViewMode] = usePersistState(ViewMode.CARD, { localStorageKey: 'sparkswap_farm_view' })\n  const { account, chainId } = useWeb3React()\n  const chain = chainId ? chainId.toString() : MAINNET_CHAIN_ID\n  const [sortOption, setSortOption] = useState('earned')\n  const theme = useContext(ThemeContext)\n  const isArchived = pathname.includes('archived')\n  const isInactive = pathname.includes('history')\n  const isActive = !isInactive && !isArchived\n  const isMobile = useMedia({ maxWidth: 500 })\n  usePollFarmsData(isArchived)\n  // Users with no wallet connected should see 0 as Earned amount\n  // Connected users should see loading indicator until first userData has loaded\n  const userDataReady = !account || (!!account && userDataLoaded)\n\n  const [stakedOnly, setStakedOnly] = useState(!isActive)\n  useEffect(() => {\n    setStakedOnly(!isActive)\n  }, [isActive])\n  // const activeFarms = farmsLP.filter((farm) => farm.pid !== 0 && !farm.hasEnded && !isArchivedPid(farm.pid))\n  // const inactiveFarms = farmsLP.filter((farm) => farm.pid !== 0 && farm.hasEnded && !isArchivedPid(farm.pid))\n  // const archivedFarms = farmsLP.filter((farm) => isArchivedPid(farm.pid))\n  const activeFarms = farmsLP.filter((farm) => farm.pid !== 0 && farm.chain === chain)\n  // const inactiveFarms = farmsLP.filter(\n  //   (farm) => farm.pid !== 0 && farm.hasEnded && !isArchivedPid(farm.pid) && farm.chain === chain,\n  // )\n  // const archivedFarms = farmsLP.filter((farm) => isArchivedPid(farm.pid) && farm.chain === chain)\n\n  const stakedOnlyFarms = activeFarms.filter(\n    (farm) => farm.userData && new BigNumber(farm.userData.stakedBalance).isGreaterThan(0),\n  )\n\n  // const stakedInactiveFarms = inactiveFarms.filter(\n  //   (farm) => farm.userData && new BigNumber(farm.userData.stakedBalance).isGreaterThan(0),\n  // )\n  //\n  // const stakedArchivedFarms = archivedFarms.filter(\n  //   (farm) => farm.userData && new BigNumber(farm.userData.stakedBalance).isGreaterThan(0),\n  // )\n\n  const farmsList = useCallback(\n    (farmsToDisplay: Farm[]): FarmWithStakedValue[] => {\n      let farmsToDisplayWithAPR: FarmWithStakedValue[] = farmsToDisplay.map((farm) => {\n        if (!farm.lpTotalInQuoteToken || !farm.quoteToken.busdPrice) {\n          return farm\n        }\n        const totalLiquidity = new BigNumber(farm.lpTotalInQuoteToken).times(farm.quoteToken.busdPrice)\n        const apr = isActive ? getFarmApr(new BigNumber(farm.poolWeight), cakePrice, totalLiquidity) : 0\n\n        return { ...farm, apr, liquidity: totalLiquidity }\n      })\n\n      if (query) {\n        const lowercaseQuery = latinise(query.toLowerCase())\n        farmsToDisplayWithAPR = farmsToDisplayWithAPR.filter((farm: FarmWithStakedValue) => {\n          return (\n            latinise(farm.lpSymbol.toLowerCase()).includes(lowercaseQuery) ||\n            latinise(farm.quoteToken.symbol.toLowerCase()).includes(lowercaseQuery)\n          )\n        })\n      }\n      return farmsToDisplayWithAPR\n    },\n    [cakePrice, query, isActive],\n  )\n\n  const handleChangeQuery = (event: React.ChangeEvent<HTMLInputElement>) => {\n    setQuery(event.target.value)\n  }\n\n  const loadMoreRef = useRef<HTMLDivElement>(null)\n\n  const [numberOfFarmsVisible, setNumberOfFarmsVisible] = useState(NUMBER_OF_FARMS_VISIBLE)\n  const [observerIsSet, setObserverIsSet] = useState(false)\n  const farmsStakedMemoized = useMemo(() => {\n    let farmsStaked = []\n\n    const sortFarms = (farms: FarmWithStakedValue[]): FarmWithStakedValue[] => {\n      switch (sortOption) {\n        // case 'promoted':\n        //   return orderBy(\n        //     farms,\n        //     (farm: FarmWithStakedValue) => (farm.isPromoted ?? 0),\n        //     'desc',\n        //   )\n        case 'apr':\n          return orderBy(farms, (farm: FarmWithStakedValue) => farm.apr, 'desc')\n        case 'duration':\n          return orderBy(\n            farms,\n            (farm: FarmWithStakedValue) => (farm.remainingDays ? Number(farm.remainingDays) : 0),\n            'desc',\n          )\n        case 'multiplier':\n          return orderBy(\n            farms,\n            (farm: FarmWithStakedValue) => (farm.multiplier ? Number(farm.multiplier.slice(0, -1)) : 0),\n            'desc',\n          )\n        case 'earned':\n          return orderBy(\n            farms,\n            (farm: FarmWithStakedValue) => (farm.userData ? Number(farm.userData.earnings) : 0),\n            'desc',\n          )\n        case 'liquidity':\n          return orderBy(farms, (farm: FarmWithStakedValue) => Number(farm.liquidity), 'desc')\n        default:\n          return farms\n      }\n    }\n\n    farmsStaked = stakedOnly ? farmsList(stakedOnlyFarms) : farmsList(activeFarms)\n    // if (isActive) {\n    // }\n    // if (isInactive) {\n    //   farmsStaked = stakedOnly ? farmsList(stakedInactiveFarms) : farmsList(inactiveFarms)\n    // }\n    // if (isArchived) {\n    //   farmsStaked = stakedOnly ? farmsList(stakedArchivedFarms) : farmsList(archivedFarms)\n    // }\n    return sortFarms(farmsStaked).slice(0, numberOfFarmsVisible)\n  }, [\n    sortOption,\n    activeFarms,\n    farmsList,\n    // inactiveFarms,\n    // archivedFarms,\n    // isActive,\n    // isInactive,\n    // isArchived,\n    // stakedArchivedFarms,\n    // stakedInactiveFarms,\n    stakedOnly,\n    stakedOnlyFarms,\n    numberOfFarmsVisible,\n  ])\n\n  const [activeTab, setActiveTab] = useState(0)\n  const handleItemClick = (index: number) => setActiveTab(index)\n  const tabs = [t('Total'), 'Storm', 'Flippers', 'Cakers']\n\n  useEffect(() => {\n    const showMoreFarms = (entries) => {\n      const [entry] = entries\n      if (entry.isIntersecting) {\n        setNumberOfFarmsVisible((farmsCurrentlyVisible) => farmsCurrentlyVisible + NUMBER_OF_FARMS_VISIBLE)\n      }\n    }\n    // Uncomment this if !comingsoon\n    if (!observerIsSet) {\n      const loadMoreObserver = new IntersectionObserver(showMoreFarms, {\n        rootMargin: '0px',\n        threshold: 1,\n      })\n      loadMoreObserver.observe(loadMoreRef.current)\n      setObserverIsSet(true)\n    }\n  }, [farmsStakedMemoized, observerIsSet])\n\n  const rowData = farmsStakedMemoized.map((farm) => {\n    const { token, quoteToken } = farm\n    const tokenAddress = token.address\n    const quoteTokenAddress = quoteToken.address\n    const lpLabel = farm.lpSymbol && farm.lpSymbol.split(' ')[0].toUpperCase().replace('PANCAKE', '')\n\n    const row: RowProps = {\n      apr: {\n        value: farm.apr && farm.apr.toLocaleString('en-US', { maximumFractionDigits: 2 }),\n        multiplier: farm.multiplier,\n        lpLabel,\n        tokenAddress,\n        quoteTokenAddress,\n        cakePrice,\n        originalValue: farm.apr,\n      },\n      farm: {\n        label: lpLabel,\n        pid: farm.pid,\n        token: farm.token,\n        quoteToken: farm.quoteToken,\n      },\n      earned: {\n        earnings: getBalanceNumber(new BigNumber(farm.userData.earnings)),\n        pid: farm.pid,\n      },\n      liquidity: {\n        liquidity: farm.liquidity,\n      },\n      multiplier: {\n        multiplier: farm.multiplier,\n      },\n      details: farm,\n    }\n\n    return row\n  })\n\n  const renderContent = (): JSX.Element => {\n    // if (viewMode === ViewMode.TABLE && rowData.length) {\n    //   const columnSchema = DesktopColumnSchema\n\n    //   const columns = columnSchema.map((column) => ({\n    //     id: column.id,\n    //     name: column.name,\n    //     label: column.label,\n    //     sort: (a: RowType<RowProps>, b: RowType<RowProps>) => {\n    //       switch (column.name) {\n    //         case 'farm':\n    //           return b.id - a.id\n    //         case 'apr':\n    //           if (a.original.apr.value && b.original.apr.value) {\n    //             return Number(a.original.apr.value) - Number(b.original.apr.value)\n    //           }\n\n    //           return 0\n    //         case 'earned':\n    //           return a.original.earned.earnings - b.original.earned.earnings\n    //         default:\n    //           return 1\n    //       }\n    //     },\n    //     sortable: column.sortable,\n    //   }))\n\n    //   return <Table data={rowData} columns={columns} userDataReady={userDataReady} />\n    // }\n\n    return (\n      <div style={{ marginTop: '25x', paddingTop: '25px' }}>\n        <FlexLayout>\n          <Route exact path={`${path}`}>\n            {farmsStakedMemoized.map((farm) => (\n              <FarmCard\n                userDataReady={userDataReady}\n                key={farm.pid}\n                farm={farm}\n                cakePrice={cakePrice}\n                account={account}\n                removed={false}\n              />\n            ))}\n          </Route>\n          <Route exact path={`${path}/history`}>\n            {farmsStakedMemoized.map((farm) => (\n              <FarmCard\n                userDataReady={userDataReady}\n                key={farm.pid}\n                farm={farm}\n                cakePrice={cakePrice}\n                account={account}\n                removed\n              />\n            ))}\n          </Route>\n          <Route exact path={`${path}/archived`}>\n            {farmsStakedMemoized.map((farm) => (\n              <FarmCard\n                userDataReady={userDataReady}\n                key={farm.pid}\n                farm={farm}\n                cakePrice={cakePrice}\n                account={account}\n                removed\n              />\n            ))}\n          </Route>\n          {/* {farmsList(activeFarms).map((farm) => ( */}\n          {/*  <FarmCard userDataReady={userDataReady} key={farm.pid} farm={farm} cakePrice={cakePrice} account={account} removed={false} /> */}\n          {/* ))} */}\n        </FlexLayout>\n      </div>\n    )\n  }\n\n  const handleSortOptionChange = (option: OptionProps): void => {\n    setSortOption(option.value)\n  }\n\n  // const renderInactiveContent = (): JSX.Element => {\n  //   return (\n  //     <div>\n  //       <div style={{ margin: '20px' }}>\n  //         <Text fontSize=\"24px\" bold>\n  //           {' '}\n  //           Inactive Liquidity Pools{' '}\n  //         </Text>\n  //       </div>\n  //\n  //       <FlexLayout>\n  //         {farmsList(inactiveFarms).map((farm) => (\n  //           <FarmCard\n  //             userDataReady={userDataReady}\n  //             key={farm.pid}\n  //             farm={farm}\n  //             cakePrice={cakePrice}\n  //             account={account}\n  //             removed\n  //           />\n  //         ))}\n  //       </FlexLayout>\n  //     </div>\n  //   )\n  // }\n\n  const [isFetchData, setFetchData] = useState<boolean | null>(true)\n  const mggFarm = farmsStakedMemoized.filter((farm) => farm.isMain)[0]\n\n  // const token1Balance = useTokenBalance(mggFarm.token.address[chainId], mggFarm.lpAddresses[chainId])\n  // const token2Balance = useTokenBalance(mggFarm.pairToken.address[chainId], mggFarm.lpAddresses[chainId])\n\n  const { LPPrice, rewardPrice } = useFarmPrice(mggFarm, chain, isFetchData)\n  const prevLPPrice = usePrevious(LPPrice)\n  const prevRewardPrice = usePrevious(rewardPrice)\n  useEffect(() => {\n    if (LPPrice > 0 || rewardPrice > 0) {\n      setFetchData(false)\n    }\n    setTimeout(() => {\n      setFetchData(true)\n      if (LPPrice !== prevLPPrice || rewardPrice !== prevRewardPrice) {\n        setFetchData(true)\n      } else {\n        setFetchData(false)\n      }\n    }, 60000)\n    if (prevLPPrice === LPPrice || prevRewardPrice === rewardPrice) {\n      setFetchData(false)\n    }\n  }, [LPPrice, rewardPrice, setFetchData, prevLPPrice, prevRewardPrice])\n  useEffect(() => {\n    return setFetchData(null)\n  }, [])\n  const totalDeposits = mggFarm ? mggFarm.totalDeposits : 0\n  const rewardRate = mggFarm ? mggFarm.rewardRate : 0\n  const lpSymbol = mggFarm ? mggFarm.lpSymbol : 'N/A'\n  const lpTotalSupply = mggFarm ? mggFarm.lpTotalSupply : 'N/A'\n\n  const farmV2Apr = useMemo(() => {\n    return getFarmV2Apr(LPPrice, rewardPrice, Number(totalDeposits), Number(rewardRate))\n  }, [totalDeposits, rewardRate, LPPrice, rewardPrice])\n\n  const apr = farmV2Apr > 0 ? `${farmV2Apr.toFixed(2)} %` : <Oval width=\"20px\" height=\"20px\" />\n  const totalStaked =\n    getBalanceNumber(new BigNumber(totalDeposits)) > 0 ? (\n      `${getBalanceAmount(new BigNumber(totalDeposits)).toFormat(4)} ${lpSymbol}`\n    ) : (\n      <Oval width=\"20px\" height=\"20px\" />\n    )\n  const tvr = useMemo(\n    () => getBalanceAmount(new BigNumber(lpTotalSupply)).times(LPPrice).toFixed(4),\n    [lpTotalSupply, LPPrice],\n  )\n  return (\n    <>\n      <PageHeader>\n        <Flex\n          alignItems=\"center\"\n          justifyContent=\"space-around\"\n          flexDirection={['column', null, 'row']}\n          style={isMobile ? { flexDirection: 'column-reverse' } : { minHeight: '20vh', marginLeft: '-16px' }}\n          padding=\"24px\"\n        >\n          <Flex flexDirection=\"column\" flex=\"2\">\n            <Flex\n              justifyContent=\"space-around\"\n              flexDirection=\"column\"\n              padding=\"25px 25px 25px 0px\"\n              mr={['8px', 0]}\n              style={{ borderBottom: `1px solid ${theme.colors.MGG_active}` }}\n            >\n              <Text color={theme.colors.primary} fontSize=\"60px\" bold>\n                Liquidity Staking\n              </Text>\n              <Text color=\"text\" bold style={isMobile ? { fontSize: '17px' } : { fontSize: '27px' }}>\n                Earn MGG with your LP tokens!\n              </Text>\n            </Flex>\n            <InfoBox style={{ width: '100%' }} margin=\"20px 0px 0px 0px\" justifyContent=\"space-between\">\n              <Flex flexDirection=\"column\">\n                <Text fontSize=\"17px\" bold color={theme.colors.MGG_accent2}>\n                  Total Tokens Staked\n                </Text>\n                <Text fontSize=\"20px\"> {totalStaked}</Text>\n              </Flex>\n              <Flex flexDirection=\"column\">\n                <Text fontSize=\"17px\" bold color={theme.colors.MGG_accent2}>\n                  Total Value Locked\n                </Text>\n                <Text fontSize=\"20px\">\n                  {Number(tvr) > 0 && Number(tvr) !== Infinity ? `${tvr} USD` : <Oval width=\"20px\" height=\"20px\" />}\n                </Text>\n              </Flex>\n              <Flex flexDirection=\"column\">\n                <Text fontSize=\"17px\" bold color={theme.colors.MGG_accent2}>\n                  APR\n                </Text>\n                <Text fontSize=\"20px\">{apr}</Text>\n              </Flex>\n            </InfoBox>\n          </Flex>\n          {/* <Flex style={isMobile ? {\n            fontSize: '150px',\n            margin: 'auto',\n            marginTop: '20px',\n            marginBottom: '20px',\n          } : { fontSize: '240px', marginRight: '-118px' }}>\n            <SvgIcon component={theme.isDark ? FarmsDarkLogo : FarmsLightLogo} viewBox='0  0 384 512'\n                     style={isMobile ? { width: '200px' } : { width: '500px' }} fontSize='inherit' />\n          </Flex> */}\n        </Flex>\n      </PageHeader>\n      <Page>\n        {/* <ControlContainer>\n          <ViewControls>\n            <ToggleView viewMode={viewMode} onToggle={(mode: ViewMode) => setViewMode(mode)} />\n            <ToggleWrapper>\n              <Toggle checked={stakedOnly} onChange={() => setStakedOnly(!stakedOnly)} scale='sm' />\n              <Text> {t('Staked only')}</Text>\n            </ToggleWrapper>\n            <FarmTabButtons hasStakeInFinishedFarms={stakedInactiveFarms.length > 0} />\n          </ViewControls>\n          {/* <FilterContainer>\n            <LabelWrapper>\n              <Text textTransform='uppercase'>{t('Sort by')}</Text>\n              <Select\n                options={[\n                  // {\n                  //   label: t('Hot'),\n                  //   value: 'hot',\n                  // },\n                  // {\n                  //   label: t('APR'),\n                  //   value: 'apr',\n                  // },\n                  // {\n                  //   label: t('Multiplier'),\n                  //   value: 'multiplier',\n                  // },\n                  // {\n                  //   label: t('Promoted'),\n                  //   value: 'promoted',\n                  // },\n                  {\n                    label: t('Earned'),\n                    value: 'earned',\n                  },\n                  {\n                    label: t('Duration'),\n                    value: 'duration',\n                  },\n                  {\n                    label: t('Liquidity'),\n                    value: 'liquidity',\n                  },\n                ]}\n                onChange={handleSortOptionChange}\n              />\n            </LabelWrapper>\n            <LabelWrapper style={{ marginLeft: 16 }}>\n              <Text textTransform='uppercase'>{t('Search')}</Text>\n              <SearchInput onChange={handleChangeQuery} placeholder='Search Farms' />\n            </LabelWrapper>\n          </FilterContainer>\n        </ControlContainer> */}\n\n        {renderContent()}\n        <div ref={loadMoreRef} />\n      </Page>\n    </>\n  )\n}\n\nexport default Farms\n"],"sourceRoot":""}